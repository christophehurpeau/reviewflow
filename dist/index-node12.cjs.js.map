{"version":3,"file":"index-node12.cjs.js","sources":["../src/auth/github.ts","../src/views/Layout.tsx","../src/app/auth.tsx","../src/app/home.tsx","../src/accountConfigs/christophehurpeau.ts","../src/accountConfigs/defaultConfig.ts","../src/accountConfigs/ornikar.ts","../src/accountConfigs/reviewflow.ts","../src/accountConfigs/index.ts","../src/utils/Excludes.ts","../src/events/account-handlers/actions/syncOrg.ts","../src/events/account-handlers/actions/syncTeamMembers.ts","../src/events/account-handlers/actions/syncTeams.ts","../src/events/account-handlers/actions/syncUser.ts","../src/context/getOrCreateAccount.ts","../src/dm/defaultDmSettings.ts","../src/dm/getUserDmSettings.ts","../src/context/utils.ts","../src/context/slack/voidTeamSlack.ts","../src/context/slack/initTeamSlack.ts","../src/context/accountContext.ts","../src/app/org-settings.tsx","../src/app/repository.tsx","../src/auth/slack.ts","../src/app/slack-connect.tsx","../src/app/user-settings.tsx","../src/appRouter.tsx","../src/events/account-handlers/utils/handler.ts","../src/events/account-handlers/membershipChanged.ts","../src/events/account-handlers/orgMemberAddedOrRemoved.ts","../src/events/account-handlers/teamChanged.ts","../src/events/pr-handlers/utils/isBotUser.ts","../src/events/pr-handlers/actions/updateBranch.ts","../src/events/pr-handlers/actions/utils/body/prOptions.ts","../src/events/pr-handlers/actions/utils/body/parseBody.ts","../src/events/pr-handlers/actions/utils/hasLabelInPR.ts","../src/events/pr-handlers/actions/utils/readPullRequestCommits.ts","../src/events/pr-handlers/actions/autoMergeIfPossible.ts","../src/events/pr-handlers/actions/utils/body/updateBody.ts","../src/events/pr-handlers/utils/reviewflowComment.ts","../src/events/pr-handlers/utils/createPullRequestContext.ts","../src/events/pr-handlers/utils/fetchPr.ts","../src/context/initRepoLabels.ts","../src/context/repoContext.ts","../src/events/repository-handlers/utils/createRepoHandler.ts","../src/events/pr-handlers/utils/createPullRequestHandler.ts","../src/events/pr-handlers/checkrunCompleted.ts","../src/events/pr-handlers/checksuiteCompleted.ts","../src/slack/utils.ts","../src/events/pr-handlers/actions/utils/createStatus.ts","../src/events/pr-handlers/actions/updateStatusCheckFromLabels.ts","../src/events/pr-handlers/actions/updateReviewStatus.ts","../src/events/pr-handlers/utils/getReviewersAndReviewStates.ts","../src/events/pr-handlers/utils/getRolesFromPullRequestAndReviewers.ts","../src/events/pr-handlers/closed.ts","../src/events/pr-handlers/utils/createSlackMessageWithSecondaryBlock.ts","../src/events/pr-handlers/utils/getPullRequestFromPayload.ts","../src/events/pr-handlers/utils/parseMentions.ts","../src/events/pr-handlers/utils/slackifyCommentBody.ts","../src/events/pr-handlers/commentCreated.ts","../src/events/pr-handlers/actions/updatePrCommentBody.ts","../src/events/pr-handlers/actions/utils/syncLabel.ts","../src/events/pr-handlers/actions/syncLabelsAfterCommentBodyEdited.ts","../src/events/pr-handlers/commentEditedOrDeleted.ts","../src/events/pr-handlers/actions/readCommitsAndUpdateInfos.ts","../src/events/pr-handlers/actions/updatePr.ts","../src/events/pr-handlers/actions/utils/cleanTitle.ts","../src/events/pr-handlers/actions/editOpenedPR.ts","../src/events/pr-handlers/edited.ts","../src/events/pr-handlers/labelsChanged.ts","../src/events/pr-handlers/actions/autoApproveAndAutoMerge.ts","../src/events/pr-handlers/actions/autoAssignPRToCreator.ts","../src/events/pr-handlers/opened.ts","../src/events/pr-handlers/reopened.ts","../src/events/pr-handlers/reviewDismissed.ts","../src/events/pr-handlers/reviewRequestRemoved.ts","../src/events/pr-handlers/reviewRequested.ts","../src/events/pr-handlers/reviewSubmitted.ts","../src/events/pr-handlers/status.ts","../src/events/pr-handlers/synchronize.ts","../src/events/repository-handlers/repoEdited.ts","../src/initApp.ts","../src/mongo.ts","../src/slack/home.ts","../src/index.ts"],"sourcesContent":["import { AuthorizationCode } from 'simple-oauth2';\n\nif (!process.env.GITHUB_CLIENT_ID) {\n  throw new Error('Missing env variable: GITHUB_CLIENT_ID');\n}\n\nif (!process.env.GITHUB_CLIENT_SECRET) {\n  throw new Error('Missing env variable: GITHUB_CLIENT_SECRET');\n}\n\nexport const oauth2 = new AuthorizationCode({\n  client: {\n    id: process.env.GITHUB_CLIENT_ID,\n    secret: process.env.GITHUB_CLIENT_SECRET,\n  },\n  auth: {\n    tokenHost: 'https://github.com',\n    tokenPath: '/login/oauth/access_token',\n    authorizePath: '/login/oauth/authorize',\n  },\n});\n","import type { ReactElement, ReactNode } from 'react';\nimport React from 'react';\n\ninterface LayoutProps {\n  lang?: string;\n  title?: string;\n  children: ReactNode;\n}\n\nexport default function Layout({\n  lang = 'en',\n  title = process.env.REVIEWFLOW_NAME,\n  children,\n}: LayoutProps): ReactElement {\n  return (\n    <html lang={lang}>\n      <head>\n        <meta charSet=\"UTF-8\" />\n        <meta name=\"robots\" content=\"noindex\" />\n        <title>{title}</title>\n        <link\n          rel=\"stylesheet\"\n          type=\"text/css\"\n          href=\"https://christophe.hurpeau.com/index.css\"\n        />\n        <style>{`html,body,html body\n            #container{height:100%} footer{position:absolute;bottom:5px;left:0;right:0;}`}</style>\n      </head>\n      <body>\n        <div style={{ padding: '24px 48px' }}>\n          <div>\n            <h1>{process.env.REVIEWFLOW_NAME}</h1>\n            {children}\n          </div>\n        </div>\n      </body>\n    </html>\n  );\n}\n","import { promisify } from 'util';\nimport { Octokit } from '@octokit/rest';\nimport type { Router, Request, Response } from 'express';\nimport { sign, verify } from 'jsonwebtoken';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport * as githubAuth from '../auth/github';\nimport Layout from '../views/Layout';\n\nif (!process.env.AUTH_SECRET_KEY) {\n  throw new Error('Missing env variable: AUTH_SECRET_KEY');\n}\n\nconst AUTH_SECRET_KEY: string = process.env.AUTH_SECRET_KEY;\n\nconst signPromisified: any = promisify(sign);\nconst verifyPromisified: any = promisify(verify);\n\nconst secure =\n  !!process.env.SECURE_COOKIE && process.env.SECURE_COOKIE !== 'false';\n\nconst createRedirectUri = (req: Request): string => {\n  const host = `http${secure ? 's' : ''}://${req.hostname}${\n    req.hostname === 'localhost' ? `:${process.env.PORT || 3000}` : ''\n  }`;\n  return `${host}/app/login-response`;\n};\n\ninterface AuthInfo {\n  id: number;\n  login: string;\n  accessToken: string;\n  time: number;\n}\n\nconst readAuthCookie = (\n  req: Request,\n  strategy: string,\n): undefined | Promise<undefined | AuthInfo> => {\n  const cookie = req.cookies[`auth_${strategy}`];\n  if (!cookie) return;\n\n  return verifyPromisified(cookie, AUTH_SECRET_KEY, {\n    algorithm: 'HS512',\n    audience: req.headers['user-agent'],\n  });\n};\n\nconst getAuthInfoFromCookie = async (\n  req: Request,\n  res: Response,\n): Promise<undefined | AuthInfo> => {\n  const strategy = 'gh'; // req.params.strategy\n  try {\n    const authInfo = await readAuthCookie(req, strategy);\n\n    if (authInfo?.id) {\n      return authInfo;\n    }\n  } catch {}\n\n  res.clearCookie(`auth_${strategy}`);\n  return undefined;\n};\n\nfunction createApi(accessToken: string): Octokit {\n  return new Octokit({ auth: accessToken });\n}\n\nexport const getUser = async (\n  req: Request,\n  res: Response,\n): Promise<{\n  authInfo: AuthInfo;\n  api: Octokit;\n} | null> => {\n  const authInfo = await getAuthInfoFromCookie(req, res);\n  if (!authInfo) {\n    res.redirect('/app/login');\n    return null;\n  }\n\n  const api = createApi(authInfo.accessToken);\n\n  return {\n    authInfo,\n    api,\n  };\n};\n\nexport default function auth(router: Router): void {\n  router.get(\n    '/login',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req: Request, res: Response, next) => {\n      try {\n        if (await getAuthInfoFromCookie(req, res)) {\n          res.redirect('/app');\n          return;\n        }\n\n        // const state = await randomHex(8);\n        // res.cookie(`auth_${strategy}_${state}`, strategy, {\n        //   maxAge: 10 * 60 * 1000,\n        //   httpOnly: true,\n        //   secure,\n        // });\n\n        const redirectUri = githubAuth.oauth2.authorizeURL({\n          redirect_uri: createRedirectUri(req),\n          scope: 'read:user,repo',\n          // state,\n          // grant_type: options.grantType,\n          // access_type: options.accessType,\n          // login_hint: req.query.loginHint,\n          // include_granted_scopes: options.includeGrantedScopes,\n        });\n\n        // console.log(redirectUri);\n\n        res.redirect(redirectUri);\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n\n  router.get('/logout', (req, res, next) => {\n    try {\n      const strategy = 'gh';\n      res.clearCookie(`auth_${strategy}`, {\n        httpOnly: true,\n        secure,\n      });\n      res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              Logout successful. <a href=\"/app/login\">Login</a>\n            </div>\n          </Layout>,\n        ),\n      );\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  router.get(\n    '/login-response',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next) => {\n      try {\n        if (req.query.error) {\n          res.send(req.query.error_description);\n          return;\n        }\n\n        const strategy = 'gh';\n        const code: string = req.query.code as string;\n        // const state = req.query.state;\n        // const cookieName = `auth_${strategy}_${state}`;\n        // const cookie = req.cookies && req.cookies[cookieName];\n        // if (!cookie) {\n        //   // res.redirect(`/${strategy}/login`);\n        //   res.send(\n        //     '<html><body>No cookie for this state. <a href=\"/app/login\">Retry ?</a></body></html>',\n        //   );\n        //   return;\n        // }\n        // res.clearCookie(cookieName);\n\n        const accessToken = await githubAuth.oauth2.getToken({\n          code,\n          redirect_uri: createRedirectUri(req),\n        });\n\n        if (!accessToken) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>\n                <div>\n                  Could not get access token. <a href=\"/app/login\">Retry ?</a>\n                </div>\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        const api = createApi(accessToken.token.access_token);\n        const user = await api.users.getAuthenticated({});\n        const id = user.data.id;\n        const login = user.data.login;\n\n        const authInfo: AuthInfo = {\n          id,\n          login,\n          accessToken: accessToken.token.access_token,\n          time: Date.now(),\n        };\n        const token = await signPromisified(authInfo, AUTH_SECRET_KEY, {\n          algorithm: 'HS512',\n          audience: req.headers['user-agent'],\n          expiresIn: '10 days',\n        });\n\n        res.cookie(`auth_${strategy}`, token, {\n          httpOnly: true,\n          secure,\n        });\n\n        res.redirect('/app');\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n}\n","import type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function home(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n  mongoStores: MongoStores,\n): void {\n  router.get(\n    '/',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return;\n\n        const orgs = await user.api.orgs.listForAuthenticatedUser();\n\n        res.send(\n          renderToStaticMarkup(\n            <Layout>\n              <div style={{ display: 'flex' }}>\n                <div style={{ flexGrow: 1 }}>\n                  <h4>Choose your account</h4>\n                  <ul>\n                    <li>\n                      <a href=\"/app/user\">{user.authInfo.login}</a>\n                    </li>\n                    {orgs.data.map((org) => (\n                      <li key={org.id}>\n                        <a href={`/app/org/${org.login}`}>{org.login}</a>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </Layout>,\n          ),\n        );\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n}\n","import type { Config } from './types';\n\nconst config: Config<'dev', never> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  requiresReviewRequest: false,\n  prDefaultOptions: {\n    autoMerge: false,\n    autoMergeWithSkipCi: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [\n      {\n        regExp:\n          // eslint-disable-next-line unicorn/no-unsafe-regex\n          /^(?<revert>revert: )?(?<type>build|chore|ci|docs|feat|fix|perf|refactor|style|test)(?<scope>\\([/a-z-]+\\)?((?=:\\s)|(?=!:\\s)))?(?<breaking>!)?(?<subject>:\\s.*)$/,\n        createStatusInfo: (match) => {\n          if (match) {\n            return null;\n          }\n\n          return {\n            type: 'failure',\n            title: 'Title does not match commitlint conventional',\n            summary:\n              'https://www.npmjs.com/package/@commitlint/config-conventional',\n          };\n        },\n      },\n    ],\n  },\n  groups: {\n    dev: {\n      christophehurpeau: 'christophe@hurpeau.com',\n      tilap: 'jlavinh@gmail.com',\n    },\n  },\n  waitForGroups: {\n    dev: [],\n  },\n  teams: {},\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* code */\n      'code/needs-review': {\n        name: ':ok_hand: code/needs-review',\n        color: '#FFD57F',\n      },\n      'code/review-requested': {\n        name: ':ok_hand: code/review-requested',\n        color: '#B2E1FF',\n      },\n      'code/changes-requested': {\n        name: ':ok_hand: code/changes-requested',\n        color: '#e11d21',\n      },\n      'code/approved': {\n        name: ':ok_hand: code/approved',\n        color: '#64DD17',\n      },\n\n      /* auto merge */\n      'merge/automerge': {\n        name: ':vertical_traffic_light: automerge',\n        color: '#64DD17',\n      },\n      'merge/skip-ci': {\n        name: ':vertical_traffic_light: skip-ci',\n        color: '#e1e8ed',\n      },\n      'merge/update-branch': {\n        name: ':arrows_counterclockwise: update branch',\n        color: '#64DD17',\n      },\n\n      /* feature-branch */\n      'feature-branch': {\n        name: 'feature-branch',\n        color: '#7FCEFF',\n      },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        color: '#ef7934',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n      dev: {\n        needsReview: 'code/needs-review',\n        requested: 'code/review-requested',\n        changesRequested: 'code/changes-requested',\n        approved: 'code/approved',\n      },\n    },\n  },\n};\n\nexport default config;\n","import type { Config } from './types';\n\nconst config: Config<never, never> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  requiresReviewRequest: false,\n  prDefaultOptions: {\n    autoMerge: false,\n    autoMergeWithSkipCi: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [],\n  },\n  groups: {},\n  waitForGroups: {},\n  teams: {},\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        color: '#ef7934',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n    },\n  },\n};\n\nexport default config;\n","import type { Config } from './types';\n\nconst config: Config<'dev' | 'design', 'ops' | 'frontends' | 'backends'> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  ignoreRepoPattern: '(infra-.*|devenv)',\n  requiresReviewRequest: true,\n  autoMergeRenovateWithSkipCi: false,\n  prDefaultOptions: {\n    autoMergeWithSkipCi: false,\n    autoMerge: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [\n      {\n        regExp:\n          // eslint-disable-next-line unicorn/no-unsafe-regex\n          /^(?<revert>revert: )?(?<type>build|chore|ci|docs|feat|fix|perf|refactor|style|test)(?<scope>\\([/A-Za-z-]+\\)?((?=:\\s)|(?=!:\\s)))?(?<breaking>!)?(?<subject>:\\s.*)$/,\n        createStatusInfo: (match) => {\n          if (match) {\n            return null;\n          }\n\n          return {\n            type: 'failure',\n            title: 'Title does not match commitlint conventional',\n            summary:\n              'https://www.npmjs.com/package/@commitlint/config-conventional',\n          };\n        },\n      },\n      {\n        regExp: /\\s([A-Z][\\dA-Z]+-(\\d+)|\\[no issue])$/,\n        status: 'jira-issue',\n        createStatusInfo: (match, prInfo, isPrFromBot) => {\n          if (match) {\n            const issue = match[1];\n            if (issue === '[no issue]') {\n              return {\n                type: 'success',\n                title: '✓ No issue',\n                summary: '',\n              };\n            }\n            return {\n              type: 'success',\n              inBody: true,\n              title: `✓ JIRA issue: ${issue}`,\n              summary: `[${issue}](https://ornikar.atlassian.net/browse/${issue})`,\n              url: `https://ornikar.atlassian.net/browse/${issue}`,\n            };\n          }\n\n          if (isPrFromBot) {\n            return {\n              type: 'success',\n              title: 'Title does not have Jira issue but PR created by bot',\n              summary: '',\n            };\n          }\n\n          return {\n            type: 'failure',\n            title: 'Title does not have Jira issue',\n            summary: 'The PR title should end with ONK-0000, or [no issue]',\n          };\n        },\n      },\n    ],\n    head: [\n      {\n        bot: false,\n        regExp:\n          // eslint-disable-next-line unicorn/no-unsafe-regex\n          /^(?<revert>revert-\\d+-)?(?<type>build|chore|ci|docs|feat|fix|perf|refactor|style|test)(?<scope>\\/[a-z-]+)?\\/(?<breaking>!)?(?<subject>.*)(?:-(?<jiraIssue>[A-Z][\\dA-Z]+-(\\d+)))?$/,\n        status: 'branch-name',\n        createStatusInfo: (match, { title }) => {\n          const idealBranchName = title\n            .replace(/\\s*\\[no issue]$/, '')\n            .replace(/\\s*(\\(|\\):|:)\\s*/g, '/')\n            .replace(/[\\s,_-]+/g, '-');\n\n          if (!match) {\n            return {\n              type: 'failure',\n              title: `Suggested branch name: \"${idealBranchName}\"`,\n              summary: '',\n            };\n          }\n\n          if (match[0] === idealBranchName) {\n            return {\n              type: 'success',\n              title: '✓ The branch name matches PR title',\n              summary: '',\n            };\n          }\n\n          return {\n            type: 'success',\n            title: '✓ The branch name is valid',\n            summary: '',\n          };\n        },\n      },\n    ],\n    base: [\n      {\n        regExp: /^(master|main)$/,\n        createStatusInfo: (match) => {\n          if (match) {\n            return null;\n          }\n\n          return {\n            type: 'failure',\n            title: 'PR to branches other than main is not recommended',\n            summary: '',\n            url: 'https://ornikar.atlassian.net/wiki/spaces/TECH/pages/2221900272/Should+I+make+a+feature-branch+or+not',\n          };\n        },\n      },\n    ],\n  },\n\n  botUsers: ['michael-robot'],\n\n  groups: {\n    dev: {},\n    design: {},\n  },\n\n  groupsGithubTeams: {\n    dev: ['ops', 'dev', 'backend', 'frontend', 'frontend-architects'],\n    design: ['design'],\n  },\n\n  teams: {\n    ops: {\n      githubTeamName: 'ops',\n      logins: ['JulienBreux', 'TheR3aLp3nGuinJM', 'AymenBac'],\n      labels: ['teams/ops'],\n    },\n\n    backends: {\n      githubTeamName: 'backend',\n      logins: [\n        'abarreir',\n        'arthurflachs',\n        'damienorny',\n        'Thierry-girod',\n        'darame07',\n        'Pixy',\n        'machartier',\n        'camillebaronnet',\n        'olivier-martinez',\n        'tnesztler',\n      ],\n      labels: ['teams/backend'],\n    },\n\n    frontends: {\n      githubTeamName: 'frontend',\n      logins: [\n        'christophehurpeau',\n        'HugoGarrido',\n        'LentnerStefan',\n        'CorentinAndre',\n        'Mxime',\n        'vlbr',\n        'budet-b',\n        'mdcarter',\n        'ChibiBlasphem',\n        'PSniezak',\n        'aenario',\n      ],\n      labels: ['teams/frontend'],\n    },\n  },\n\n  waitForGroups: {\n    dev: [],\n    design: ['dev'],\n  },\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* code */\n      'code/needs-review': {\n        name: ':ok_hand: code/needs-review',\n        color: '#FFC44C',\n      },\n      'code/review-requested': {\n        name: ':ok_hand: code/review-requested',\n        color: '#DAE1E6',\n      },\n      'code/changes-requested': {\n        name: ':ok_hand: code/changes-requested',\n        color: '#e11d21',\n      },\n      'code/approved': {\n        name: ':ok_hand: code/approved',\n        color: '#64DD17',\n      },\n\n      /* design */\n      'design/needs-review': {\n        name: ':art: design/needs-review',\n        color: '#FFC44C',\n      },\n      'design/review-requested': {\n        name: ':art: design/review-requested',\n        color: '#DAE1E6',\n      },\n      'design/changes-requested': {\n        name: ':art: design/changes-requested',\n        color: '#e11d21',\n      },\n      'design/approved': {\n        name: ':art: design/approved',\n        color: '#64DD17',\n      },\n\n      /* teams */\n      'teams/ops': {\n        name: 'ops',\n        color: '#003b55',\n      },\n      'teams/backend': {\n        name: 'backend',\n        color: '#6ad8cb',\n      },\n      'teams/frontend': {\n        name: 'frontend',\n        color: '#8a5abc',\n      },\n\n      /* auto merge */\n      'merge/automerge': {\n        name: ':soon: automerge',\n        color: '#64DD17',\n      },\n      'merge/skip-ci': {\n        name: ':vertical_traffic_light: skip-ci',\n        color: '#e1e8ed',\n      },\n      'merge/update-branch': {\n        name: ':arrows_counterclockwise: update branch',\n        color: '#e1e8ed',\n      },\n\n      /* feature-branch */\n      'feature-branch': {\n        name: 'feature-branch',\n        color: '#7FCEFF',\n      },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        description: 'This issue or pull request will need a new major version',\n        color: '#FF6F00',\n      },\n      duplicate: {\n        name: 'duplicate',\n        description: 'This issue or pull request already exists',\n        color: '#ECEFF1',\n      },\n      documentation: {\n        name: 'documentation',\n        description: 'Improvements or additions to documentation',\n        color: '#7FCEFF',\n      },\n      rfc: {\n        name: 'RFC',\n        description: 'Request For Comments',\n        color: '#FFD3B2',\n      },\n      bug: {\n        name: 'bug',\n        description: \"Something isn't working\",\n        color: '#FF3D00',\n      },\n      enhancement: {\n        name: 'enhancement',\n        description: 'New feature or request',\n        color: '#7FCEFF',\n      },\n      'help-wanted': {\n        name: 'help wanted',\n        description: 'Extra attention is needed',\n        color: '#B1EE8B',\n      },\n      question: {\n        name: 'question',\n        description: 'Further information is requested',\n        color: '#F860A4',\n      },\n      wontfix: {\n        name: 'wontfix',\n        description: 'This will not be worked on',\n        color: '#ECEFF1',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n      dev: {\n        needsReview: 'code/needs-review',\n        requested: 'code/review-requested',\n        changesRequested: 'code/changes-requested',\n        approved: 'code/approved',\n      },\n      design: {\n        needsReview: 'design/needs-review',\n        requested: 'design/review-requested',\n        changesRequested: 'design/changes-requested',\n        approved: 'design/approved',\n      },\n    },\n  },\n};\n\nexport default config;\n","import chrisconfig from './christophehurpeau';\n// import ornikarconfig from './ornikar';\nimport type { Config } from './types';\n\nconst config: Config<'dev', never> = {\n  ...chrisconfig,\n  requiresReviewRequest: true,\n  groups: {\n    dev: {\n      christophehurpeau: 'christophe@hurpeau.com',\n      'chris-reviewflow': 'christophe.hurpeau+reviewflow@gmail.com',\n    },\n  },\n  // parsePR: ornikarconfig.parsePR,\n};\nexport default config;\n","import christophehurpeau from './christophehurpeau';\nimport defaultConfig from './defaultConfig';\nimport ornikar from './ornikar';\nimport reviewflow from './reviewflow';\nimport type { Config as ConfigType } from './types';\n\nexport type Config<\n  GroupNames extends string = any,\n  TeamNames extends string = any,\n> = ConfigType<GroupNames, TeamNames>;\n\nexport const accountConfigs: Record<string, Config> = {\n  ornikar,\n  christophehurpeau,\n  reviewflow,\n};\n\nexport { defaultConfig };\n\n// flat requires node 11\n// export const getMembers = <GroupNames extends string = any>(\n//   groups: Record<GroupNames, Group>,\n// ): string[] => {\n//   return Object.values(groups).flat(1);\n// };\n","export const ExcludesFalsy = Boolean as any as <T>(\n  x: T | false | null | undefined,\n) => x is T;\n\nexport const ExcludesNullish = ((res: any) => res !== null) as any as <T>(\n  x: T | null,\n) => x is T;\n","import type { MongoStores, Org } from '../../../mongo';\nimport type { Octokit } from '../../../octokit';\n\ninterface OrgInfo {\n  login: string;\n  id: number;\n}\n\nexport const syncOrg = async <T extends Octokit>(\n  mongoStores: MongoStores,\n  octokit: T,\n  installationId: number,\n  org: OrgInfo,\n): Promise<Org> => {\n  const orgInStore = await mongoStores.orgs.upsertOne({\n    _id: org.id,\n    login: org.login,\n    installationId,\n  });\n\n  const orgEmbed = { id: org.id, login: org.login };\n\n  const memberIds: number[] = [];\n\n  for await (const { data } of octokit.paginate.iterator(\n    octokit.orgs.listMembers,\n    { org: org.login },\n  )) {\n    await Promise.all(\n      data.map(async (member) => {\n        if (!member) return;\n        memberIds.push(member.id);\n        return Promise.all([\n          mongoStores.orgMembers.upsertOne<'teams'>(\n            {\n              _id: `${org.id}_${member.id}`,\n              org: orgEmbed,\n              user: {\n                id: member.id,\n                login: member.login,\n              },\n            },\n            {\n              teams: [], // teams is synced in syncTeamMembers\n            },\n          ),\n          mongoStores.users.upsertOne({\n            _id: member.id,\n            login: member.login,\n            type: member.type,\n          }),\n        ]);\n      }),\n    );\n  }\n\n  await mongoStores.orgMembers.deleteMany({\n    'org.id': org.id,\n    'user.id': { $not: { $in: memberIds } },\n  });\n\n  return orgInStore;\n};\n","import type { MongoStores, OrgTeamEmbed } from '../../../mongo';\nimport type { Octokit } from '../../../octokit';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\n\nexport const syncTeamMembers = async (\n  mongoStores: MongoStores,\n  octokit: Octokit,\n  org: { login: string; id: number },\n  team: OrgTeamEmbed,\n): Promise<void> => {\n  const memberIds: number[] = [];\n  for await (const { data } of octokit.paginate.iterator(\n    octokit.teams.listMembersInOrg,\n    {\n      org: org.login,\n      team_slug: team.slug,\n    },\n  )) {\n    const currentIterationMemberIds = data\n      .filter(ExcludesFalsy)\n      .map((member) => member.id);\n    memberIds.push(...currentIterationMemberIds);\n\n    await mongoStores.orgMembers.partialUpdateMany(\n      {\n        _id: {\n          $in: currentIterationMemberIds.map(\n            (memberId) => `${org.id}_${memberId}`,\n          ),\n        },\n        'org.id': org.id,\n        'teams.id': { $ne: team.id },\n      },\n      { $push: { teams: team } },\n    );\n  }\n\n  await mongoStores.orgMembers.partialUpdateMany(\n    {\n      'org.id': org.id,\n      'user.id': { $not: { $in: memberIds } },\n    },\n    { $pull: { teams: { id: team.id } } },\n  );\n};\n\nexport const syncTeamMembersWithTeamParents = async (\n  mongoStores: MongoStores,\n  octokit: Octokit,\n  org: { login: string; id: number },\n  team: OrgTeamEmbed,\n): Promise<void> => {};\n","import type { MongoStores, OrgTeamEmbed } from '../../../mongo';\nimport type { Octokit } from '../../../octokit';\nimport { syncTeamMembers } from './syncTeamMembers';\n\nexport const syncTeams = async (\n  mongoStores: MongoStores,\n  octokit: Octokit,\n  org: { login: string; id: number },\n): Promise<OrgTeamEmbed[]> => {\n  const orgEmbed = { id: org.id, login: org.login };\n\n  const teamEmbeds: OrgTeamEmbed[] = [];\n  const teamIds: number[] = [];\n\n  for await (const { data } of octokit.paginate.iterator(octokit.teams.list, {\n    org: org.login,\n  })) {\n    await Promise.all(\n      data.map(async (team) => {\n        teamIds.push(team.id);\n        teamEmbeds.push({\n          id: team.id,\n          name: team.name,\n          slug: team.slug,\n        });\n        return mongoStores.orgTeams.upsertOne({\n          _id: team.id,\n          org: orgEmbed,\n          name: team.name,\n          slug: team.slug,\n          description: team.description,\n        });\n      }),\n    );\n  }\n\n  await Promise.all([\n    mongoStores.orgTeams.deleteMany({\n      'org.id': org.id,\n      _id: { $not: { $in: teamIds } },\n    }),\n\n    mongoStores.orgMembers.partialUpdateMany(\n      {\n        'org.id': org.id,\n      },\n      { $pull: { teams: { id: { $not: { $in: teamIds } } } } },\n    ),\n  ]);\n\n  return teamEmbeds;\n};\n\nexport const syncTeamsAndTeamMembers = async (\n  mongoStores: MongoStores,\n  octokit: Octokit,\n  org: { login: string; id: number },\n): Promise<void> => {\n  const teams = await syncTeams(mongoStores, octokit, org);\n  for (const team of teams) {\n    await syncTeamMembers(mongoStores, octokit, org, team);\n  }\n};\n","import type { MongoStores, User } from '../../../mongo';\nimport type { Octokit } from '../../../octokit';\n\ninterface UserInfo {\n  login: string;\n  id: number;\n}\n\nexport const syncUser = async (\n  mongoStores: MongoStores,\n  github: Octokit,\n  installationId: number,\n  userInfo: UserInfo,\n): Promise<User> => {\n  const user = await mongoStores.users.upsertOne({\n    _id: userInfo.id,\n    login: userInfo.login,\n    type: 'User',\n    installationId,\n  });\n\n  return user;\n};\n","import { syncOrg } from '../events/account-handlers/actions/syncOrg';\nimport { syncTeamsAndTeamMembers } from '../events/account-handlers/actions/syncTeams';\nimport { syncUser } from '../events/account-handlers/actions/syncUser';\nimport type { Org, User } from '../mongo';\nimport type { Octokit } from '../octokit';\nimport type { AppContext } from './AppContext';\n\nexport interface AccountInfo {\n  id: number;\n  login: string;\n  type: string;\n}\n\nexport const getOrCreateAccount = async (\n  { mongoStores }: AppContext,\n  github: Octokit,\n  installationId: number,\n  accountInfo: AccountInfo,\n): Promise<Org | User> => {\n  switch (accountInfo.type) {\n    case 'Organization': {\n      let org = await mongoStores.orgs.findByKey(accountInfo.id);\n      if (org?.installationId) return org;\n\n      // TODO diff org vs user...\n      org = await syncOrg(mongoStores, github, installationId, accountInfo);\n      await syncTeamsAndTeamMembers(mongoStores, github, accountInfo);\n      return org;\n    }\n\n    case 'User': {\n      let user = await mongoStores.users.findByKey(accountInfo.id);\n      if (user?.installationId) return user;\n\n      user = await syncUser(mongoStores, github, installationId, accountInfo);\n      return user;\n    }\n\n    default:\n      throw new Error(`Account type not supported ${accountInfo.type}`);\n  }\n};\n","import type { MessageCategory } from './MessageCategory';\n\nexport const defaultDmSettings: Record<MessageCategory, boolean> = {\n  'pr-lifecycle': true,\n  'pr-lifecycle-follow': true,\n  'pr-review': true,\n  'pr-review-follow': true,\n  'pr-comment': true,\n  'pr-comment-bots': true,\n  'pr-comment-follow': true,\n  'pr-comment-follow-bots': false,\n  'pr-comment-mention': true,\n  'pr-comment-thread': true,\n  'pr-merge-conflicts': true,\n  'issue-comment-mention': true,\n};\n","import { accountConfigs, defaultConfig } from '../accountConfigs';\nimport type { MongoStores } from '../mongo';\nimport type { MessageCategory } from './MessageCategory';\nimport { defaultDmSettings } from './defaultDmSettings';\n\nexport type UserDmSettings = Record<MessageCategory, boolean>;\nconst cache = new Map<string, Map<number, UserDmSettings>>();\n\nconst getDefaultDmSettings = (org: string): UserDmSettings => {\n  const accountConfig = accountConfigs[org] || defaultConfig;\n  return accountConfig.defaultDmSettings\n    ? { ...defaultDmSettings, ...accountConfig.defaultDmSettings }\n    : defaultDmSettings;\n};\n\nexport const updateCache = (\n  org: string,\n  userId: number,\n  newSettings: Partial<UserDmSettings>,\n): void => {\n  let orgCache = cache.get(org);\n  if (!orgCache) {\n    orgCache = new Map();\n    cache.set(org, orgCache);\n  }\n  orgCache.set(userId, { ...getDefaultDmSettings(org), ...newSettings });\n};\n\nexport const getUserDmSettings = async (\n  mongoStores: MongoStores,\n  org: string,\n  orgId: number,\n  userId: number,\n): Promise<UserDmSettings> => {\n  const orgDefaultDmSettings = getDefaultDmSettings(org);\n\n  const userDmSettingsConfig = await mongoStores.userDmSettings.findOne({\n    orgId,\n    userId,\n  });\n\n  const config = userDmSettingsConfig\n    ? {\n        ...orgDefaultDmSettings,\n        ...userDmSettingsConfig.settings,\n      }\n    : orgDefaultDmSettings;\n\n  updateCache(org, userId, config);\n  return config;\n};\n","import createEmojiRegex from 'emoji-regex';\n\nexport const getKeys = <T>(o: T): (keyof T)[] => Object.keys(o) as (keyof T)[];\n\nconst emojiRegex = createEmojiRegex();\n\nexport const getEmojiFromRepoDescription = (\n  description: string | null,\n): string => {\n  if (!description) return '';\n  if (description.startsWith(':')) {\n    const [, emoji] = /^(:\\w+:)/.exec(description) || [];\n    return emoji || '';\n  }\n  const match = emojiRegex.exec(description);\n  if (match && description.startsWith(match[0])) return match[0];\n  return '';\n};\n","import type { TeamSlack } from './TeamSlack';\n\nexport const voidTeamSlack = (): TeamSlack => ({\n  mention: (): string => '',\n  postMessage: (): Promise<null> => Promise.resolve(null),\n  updateMessage: (): Promise<null> => Promise.resolve(null),\n  deleteMessage: (): Promise<undefined> => Promise.resolve(undefined),\n  addReaction: (): Promise<undefined> => Promise.resolve(undefined),\n  updateHome: (): void => undefined,\n  updateSlackMember: (): Promise<undefined> => Promise.resolve(undefined),\n  shouldShowLoginMessage: (): boolean => false,\n});\n","import { WebClient } from '@slack/web-api';\nimport type { Context } from 'probot';\nimport type { Config } from '../../accountConfigs';\nimport type { MessageCategory } from '../../dm/MessageCategory';\nimport { getUserDmSettings } from '../../dm/getUserDmSettings';\nimport type { Org, User } from '../../mongo';\nimport type { AppContext } from '../AppContext';\nimport type { AccountInfo } from '../getOrCreateAccount';\nimport { getKeys } from '../utils';\nimport type { SlackMessage } from './SlackMessage';\nimport type { TeamSlack, PostSlackMessageResult } from './TeamSlack';\nimport { voidTeamSlack } from './voidTeamSlack';\n\nexport type { TeamSlack };\n\nfunction getSlackAccountFromAccount(account: Org | User): string | undefined {\n  // This is first for legacy org using their own slackToken and slack app. Keep using them.\n  if ('slackToken' in account) return account.slackToken;\n  if ('slack' in account) return account.slack?.accessToken;\n  return undefined;\n}\n\ninterface MemberObject {\n  member: {\n    id: string;\n    teamId?: string;\n  };\n  slackClient?: WebClient;\n  im: any;\n}\n\nexport const initTeamSlack = async <GroupNames extends string>(\n  { mongoStores, slackHome }: AppContext,\n  context: Context<any>,\n  config: Config<GroupNames>,\n  account: Org | User,\n): Promise<TeamSlack> => {\n  const slackToken = getSlackAccountFromAccount(account);\n\n  if (!slackToken) {\n    return voidTeamSlack();\n  }\n\n  const githubLoginToSlackEmail = getKeys(config.groups).reduce<\n    Record<string, string>\n  >((acc, groupName) => {\n    Object.assign(acc, config.groups[groupName]);\n    return acc;\n  }, {});\n\n  const slackEmails = Object.values(githubLoginToSlackEmail);\n  const orgSlackClient = new WebClient(slackToken);\n\n  const membersInDb = await mongoStores.orgMembers.findAll({\n    'org.id': account._id,\n  });\n\n  const members: [string, MemberObject][] = [];\n  const foundEmailMembers: string[] = [];\n\n  Object.entries(githubLoginToSlackEmail).forEach(([login, email]) => {\n    const member = membersInDb.find((m) => m.user.login === login);\n    if (member?.slack?.id) {\n      foundEmailMembers.push(email);\n      members.push([login, { member: { id: member.slack.id }, im: undefined }]);\n    }\n  });\n\n  if (foundEmailMembers.length !== slackEmails.length) {\n    const missingEmails = slackEmails.filter(\n      (email) => !foundEmailMembers.includes(email),\n    );\n\n    const memberEmailToGithubLogin = new Map<string, string>(\n      Object.entries(githubLoginToSlackEmail).map(([login, email]) => [\n        email,\n        login,\n      ]),\n    );\n    const memberEmailToMemberId = new Map<string, string>(\n      Object.entries(githubLoginToSlackEmail).map(([login, email]) => [\n        email,\n        membersInDb.find((m) => m.user.login === login)?._id as any,\n      ]),\n    );\n\n    await orgSlackClient.paginate('users.list', {}, (page: any) => {\n      page.members.forEach((member: any) => {\n        const email = member.profile?.email;\n        if (email && missingEmails.includes(email)) {\n          const login = memberEmailToGithubLogin.get(email);\n          if (!login) return;\n          members.push([login, { member, im: undefined }]);\n          const memberId = memberEmailToMemberId.get(email);\n          if (memberId) {\n            mongoStores.orgMembers.partialUpdateByKey(memberId, {\n              $set: { slack: { id: member.id, email } },\n            });\n          }\n        }\n      });\n      return false;\n    });\n  }\n\n  const membersMap = new Map(members);\n\n  // User added its email but not linked to a slack account yet\n  // Temporary transition before login with slack in the settings\n  membersInDb.forEach((member) => {\n    if (member?.slack?.id && !membersMap.has(member.user.login)) {\n      membersMap.set(member.user.login, {\n        member: { id: member.slack.id, teamId: member.slack.teamId },\n        im: undefined,\n      });\n    }\n  });\n\n  const getSlackClient = (teamId?: string): WebClient | undefined => {\n    if (!teamId || !('slack' in account) || !account.slack?.teamId) {\n      return orgSlackClient;\n    }\n\n    if (!account.config.canUseExternalSlack) {\n      return undefined;\n    }\n\n    // TODO support external slack\n    return undefined;\n  };\n\n  const openConversation = async (\n    slackClient: WebClient,\n    userId: string,\n  ): Promise<any> => {\n    try {\n      const im: any = await slackClient.conversations.open({\n        users: userId,\n      });\n      return im.channel;\n    } catch (err) {\n      context.log('could create im', { err });\n    }\n  };\n\n  for (const user of membersMap.values()) {\n    const slackClient = getSlackClient(user.member.teamId);\n    if (slackClient) {\n      user.slackClient = slackClient;\n      const im = await openConversation(slackClient, user.member.id);\n      if (im) user.im = im;\n    }\n  }\n\n  return {\n    mention: (githubLogin: string): string => {\n      // TODO pass AccountInfo instead\n      if (githubLogin.endsWith('[bot]')) {\n        return `:robot_face: ${githubLogin.slice(0, -'[bot]'.length)}`;\n      }\n      const user = membersMap.get(githubLogin);\n      if (!user) return githubLogin;\n      return `<@${user.member.id}>`;\n    },\n    postMessage: async (\n      category: MessageCategory,\n      toAccount: AccountInfo,\n      message: SlackMessage,\n    ): Promise<PostSlackMessageResult> => {\n      context.log.debug(\n        {\n          category,\n          toAccount,\n          message,\n        },\n        'slack: post message',\n      );\n      if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return null;\n\n      const userDmSettings = await getUserDmSettings(\n        mongoStores,\n        account.login,\n        account._id,\n        toAccount.id,\n      );\n\n      if (!userDmSettings[category]) return null;\n\n      const user = membersMap.get(toAccount.login);\n      if (!user || !user.slackClient || !user.im) return null;\n\n      const result = await user.slackClient.chat.postMessage({\n        username: process.env.REVIEWFLOW_NAME,\n        channel: user.im.id,\n        text: message.text,\n        blocks: message.blocks,\n        attachments: message.secondaryBlocks\n          ? [{ blocks: message.secondaryBlocks }]\n          : undefined,\n        thread_ts: message.ts,\n      });\n      if (!result.ok) return null;\n      return { ts: result.ts as string, channel: result.channel as string };\n    },\n    updateMessage: async (\n      toAccount: AccountInfo,\n      ts: string,\n      channel: string,\n      message: SlackMessage,\n    ): Promise<PostSlackMessageResult> => {\n      context.log.debug({ ts, channel, message }, 'slack: update message');\n      if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return null;\n\n      const user = membersMap.get(toAccount.login);\n      if (!user || !user.slackClient || !user.im) return null;\n\n      const result = await user.slackClient.chat.update({\n        ts,\n        channel,\n        text: message.text,\n        blocks: message.blocks,\n        attachments: message.secondaryBlocks\n          ? [{ blocks: message.secondaryBlocks }]\n          : undefined,\n      });\n      if (!result.ok) return null;\n      return { ts: result.ts as string, channel: result.channel as string };\n    },\n    deleteMessage: async (\n      toAccount: AccountInfo,\n      ts: string,\n      channel: string,\n    ): Promise<void> => {\n      context.log.debug({ ts, channel }, 'slack: delete message');\n\n      const user = membersMap.get(toAccount.login);\n      if (!user || !user.slackClient || !user.im) return;\n\n      await user.slackClient.chat.delete({\n        ts,\n        channel,\n      });\n    },\n    addReaction: async (\n      toAccount: AccountInfo,\n      ts: string,\n      channel: string,\n      name: string,\n    ): Promise<void> => {\n      context.log.debug({ ts, channel, name }, 'slack: add reaction');\n\n      const user = membersMap.get(toAccount.login);\n      if (!user || !user.slackClient || !user.im) return;\n\n      await user.slackClient.reactions.add({\n        timestamp: ts,\n        channel,\n        name,\n      });\n    },\n    updateHome: (githubLogin: string): void => {\n      context.log.debug({ githubLogin }, 'update slack home');\n\n      const user = membersMap.get(githubLogin);\n      if (!user || !user.slackClient || !user.member) return;\n\n      slackHome.scheduleUpdateMember(context.octokit, user.slackClient, {\n        user: { id: null, login: githubLogin },\n        org: { id: account._id, login: account.login },\n        slack: { id: user.member.id },\n      } as any);\n    },\n\n    updateSlackMember: async (userId, userLogin): Promise<void> => {\n      // delete existing member if existing\n      membersMap.delete(userLogin);\n\n      const member = await mongoStores.orgMembers.findOne({\n        'org.id': account._id,\n        'user.id': userId,\n      });\n\n      if (!member || !member.slack) return;\n\n      const slackClient = getSlackClient(member.slack.teamId);\n      if (slackClient) {\n        const im = await openConversation(slackClient, member.slack.id);\n        membersMap.set(userLogin, {\n          member: { id: member.slack.id },\n          slackClient,\n          im,\n        });\n      }\n    },\n    shouldShowLoginMessage: (githubLogin: string) => {\n      return !membersMap.has(githubLogin);\n    },\n  };\n};\n","import { Lock } from 'lock';\nimport type { Context } from 'probot';\nimport type {\n  PullRequestWithDecentData,\n  PullRequestWithDecentDataFromWebhook,\n} from 'events/pr-handlers/utils/PullRequestData';\nimport type { Config } from '../accountConfigs';\nimport type {\n  Org,\n  User,\n  AccountEmbed,\n  AccountType,\n  AccountEmbedWithoutType,\n  OrgMember,\n} from '../mongo';\nimport { ExcludesFalsy } from '../utils/Excludes';\nimport type { AppContext } from './AppContext';\nimport type { AccountInfo } from './getOrCreateAccount';\nimport { getOrCreateAccount } from './getOrCreateAccount';\nimport type { TeamSlack } from './slack/initTeamSlack';\nimport { initTeamSlack } from './slack/initTeamSlack';\nimport { getKeys } from './utils';\n\nexport interface AccountContext<\n  GroupNames extends string = any,\n  TeamNames extends string = any,\n> {\n  config: Config<GroupNames, TeamNames>;\n  accountEmbed: AccountEmbed;\n  slack: TeamSlack;\n  /** init slack after installation in webapp */\n  initSlack: () => Promise<void>;\n  getReviewerGroup: (githubLogin: string) => GroupNames | undefined;\n  getReviewerGroups: (githubLogins: string[]) => GroupNames[];\n  getTeamGroup: (teamName: string) => GroupNames | undefined;\n  getGithubTeamsGroups: (teamNames: string[]) => GroupNames[];\n  getMembersForTeam: (teamId: string) => Promise<AccountEmbedWithoutType[]>;\n  getTeamsForLogin: (githubLogin: string) => TeamNames[];\n  updateGithubTeamMembers: () => Promise<void>;\n  approveShouldWait: (\n    reviewerGroup: GroupNames | undefined,\n    pullRequest: PullRequestWithDecentData,\n    {\n      includesReviewerGroup,\n      includesWaitForGroups,\n    }: { includesReviewerGroup?: boolean; includesWaitForGroups?: boolean },\n  ) => boolean;\n\n  lock: (callback: () => Promise<void> | void) => Promise<void>;\n}\n\ninterface TeamsAndGroups {\n  groupName?: string;\n  teamNames: string[];\n}\n\nexport const getTeamsAndGroups = (\n  config: Config,\n  member: OrgMember,\n): TeamsAndGroups => {\n  const { groupsGithubTeams, teams } = config;\n\n  const groupName = !groupsGithubTeams\n    ? undefined\n    : (getKeys(groupsGithubTeams).find((groupName) => {\n        return member.teams.some((team) => {\n          return groupsGithubTeams[groupName].includes(team.name);\n        });\n      }) as string);\n\n  const teamNames = getKeys(teams).filter((teamName) => {\n    const githubTeamName = teams[teamName].githubTeamName;\n    if (!githubTeamName) {\n      return teams[teamName].logins.includes(member.user.login);\n    }\n    return member.teams.some((team) => team.name === teamName);\n  });\n  return { groupName, teamNames };\n};\n\nconst initAccountContext = async (\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config,\n  accountInfo: AccountInfo,\n): Promise<AccountContext> => {\n  const account = await getOrCreateAccount(\n    appContext,\n    context.octokit,\n    context.payload.installation.id,\n    accountInfo,\n  );\n  const initSlack = (account: Org | User): ReturnType<typeof initTeamSlack> =>\n    initTeamSlack(appContext, context, config, account);\n  const slackPromise = initSlack(account);\n\n  const githubLoginToGroup = new Map<string, string>();\n  const githubTeamNameToGroup = new Map<string, string>();\n  const githubLoginToTeams = new Map<string, string[]>();\n  // TODO const githubLoginToSlackId = new Map<string, string>();\n\n  for (const groupName of getKeys(config.groups)) {\n    Object.keys(config.groups[groupName]).forEach((login) => {\n      githubLoginToGroup.set(login, groupName);\n    });\n  }\n\n  if (config.groupsGithubTeams) {\n    for (const groupName of getKeys(config.groupsGithubTeams)) {\n      config.groupsGithubTeams[groupName].forEach((teamName) => {\n        githubTeamNameToGroup.set(teamName, groupName);\n      });\n    }\n  }\n\n  const updateGithubTeamMembers = async (): Promise<void> => {\n    if (accountInfo.type !== 'Organization') {\n      return;\n    }\n\n    const members = await appContext.mongoStores.orgMembers.findAll({\n      'org.id': accountInfo.id,\n    });\n\n    members.forEach((member) => {\n      const { groupName, teamNames } = getTeamsAndGroups(config, member);\n      if (groupName) {\n        githubLoginToGroup.set(member.user.login, groupName);\n      }\n      githubLoginToTeams.set(member.user.login, teamNames);\n    });\n  };\n\n  await updateGithubTeamMembers();\n\n  const getReviewerGroups = (githubLogins: string[]): string[] => [\n    ...new Set(\n      githubLogins\n        .map((githubLogin) => githubLoginToGroup.get(githubLogin))\n        .filter(ExcludesFalsy),\n    ),\n  ];\n  const getGithubTeamsGroups = (githubTeamNames: string[]): string[] => [\n    ...new Set(\n      githubTeamNames\n        .map((teamName) => githubTeamNameToGroup.get(teamName))\n        .filter(ExcludesFalsy),\n    ),\n  ];\n\n  const lock = Lock();\n\n  return {\n    config,\n    accountEmbed: {\n      id: accountInfo.id,\n      login: accountInfo.login,\n      type: accountInfo.type as AccountType,\n    },\n    lock: (callback: () => Promise<void> | void): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const logInfos = { account: accountInfo.login };\n        context.log.info(logInfos, 'lock: try to lock account');\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        lock('_', async (createReleaseCallback) => {\n          const release = createReleaseCallback(() => {});\n          context.log.info(logInfos, 'lock: lock account acquired');\n          try {\n            await callback();\n          } catch (err) {\n            context.log.info(logInfos, 'lock: release account (with error)');\n            release();\n            reject(err);\n            return;\n          }\n          context.log.info(logInfos, 'lock: release account');\n          release();\n          resolve();\n        });\n      });\n    },\n    getReviewerGroup: (githubLogin): string | undefined =>\n      githubLoginToGroup.get(githubLogin),\n    getReviewerGroups,\n    getTeamGroup: (githubTeamName): string | undefined =>\n      githubTeamNameToGroup.get(githubTeamName),\n    getGithubTeamsGroups,\n\n    getTeamsForLogin: (githubLogin): string[] =>\n      githubLoginToTeams.get(githubLogin) || [],\n\n    getMembersForTeam: async (teamId): Promise<AccountEmbedWithoutType[]> => {\n      if (accountInfo.type !== 'Organization') {\n        throw new Error(\n          `Invalid account type \"${accountInfo.type}\" for getMembersForTeam`,\n        );\n      }\n      const cursor = await appContext.mongoStores.orgMembers.cursor<\n        Pick<OrgMember, 'user'>\n      >({\n        'org.id': account._id,\n        'teams.id': teamId,\n      });\n      await cursor.limit(100);\n      const orgMembers = await cursor.toArray();\n      return orgMembers.map((member) => member.user);\n    },\n    updateGithubTeamMembers,\n\n    approveShouldWait: (\n      reviewerGroup,\n      pullRequest,\n      { includesReviewerGroup, includesWaitForGroups },\n    ): boolean => {\n      if (\n        !reviewerGroup ||\n        !pullRequest.requested_reviewers ||\n        !pullRequest.requested_teams\n      ) {\n        return false;\n      }\n\n      const requestedReviewerGroups = [\n        ...new Set([\n          ...getReviewerGroups(\n            (\n              pullRequest.requested_reviewers as PullRequestWithDecentDataFromWebhook['requested_reviewers']\n            ).map((request) => request.login),\n          ),\n          ...(!pullRequest.requested_teams\n            ? []\n            : getGithubTeamsGroups(\n                (\n                  pullRequest.requested_teams as PullRequestWithDecentDataFromWebhook['requested_teams']\n                ).map((team) => team.name),\n              )),\n        ]),\n      ];\n\n      // contains another request of a reviewer in the same group\n      if (\n        includesReviewerGroup &&\n        requestedReviewerGroups.includes(reviewerGroup)\n      ) {\n        return true;\n      }\n\n      // contains a request from a dependent group\n      if (config.waitForGroups && includesWaitForGroups) {\n        const waitForGroups = config.waitForGroups;\n        return requestedReviewerGroups.some((group) =>\n          waitForGroups[reviewerGroup].includes(group),\n        );\n      }\n\n      return false;\n    },\n\n    slack: await slackPromise,\n\n    async initSlack(): Promise<void> {\n      // get latest account\n      const account = await getOrCreateAccount(\n        appContext,\n        context.octokit,\n        context.payload.installation.id,\n        accountInfo,\n      );\n      const slack = await initSlack(account);\n      (this as AccountContext).slack = slack;\n    },\n  };\n};\n\nconst accountContextsPromise = new Map();\nconst accountContexts = new Map();\n\nexport const getExistingAccountContext = (\n  accountInfo: AccountInfo,\n): Promise<AccountContext> | null => {\n  const existingAccountContext = accountContexts.get(accountInfo.login);\n  if (existingAccountContext) return Promise.resolve(existingAccountContext);\n\n  const existingPromise = accountContextsPromise.get(accountInfo.login);\n  if (existingPromise) return Promise.resolve(existingPromise);\n\n  return null;\n};\n\nexport const obtainAccountContext = (\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config,\n  accountInfo: AccountInfo,\n): Promise<AccountContext> => {\n  const existingAccountContextPromise = getExistingAccountContext(accountInfo);\n  if (existingAccountContextPromise) return existingAccountContextPromise;\n\n  const promise = initAccountContext(appContext, context, config, accountInfo);\n  accountContextsPromise.set(accountInfo.login, promise);\n\n  return promise.then((accountContext) => {\n    accountContextsPromise.delete(accountInfo.login);\n    accountContexts.set(accountInfo.login, accountContext);\n    return accountContext;\n  });\n};\n","/* eslint-disable unicorn/no-nested-ternary */\nimport bodyParser from 'body-parser';\nimport type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { accountConfigs } from '../accountConfigs';\nimport { getTeamsAndGroups } from '../context/accountContext';\nimport type { MessageCategory } from '../dm/MessageCategory';\nimport { getUserDmSettings, updateCache } from '../dm/getUserDmSettings';\nimport { syncOrg } from '../events/account-handlers/actions/syncOrg';\nimport { syncTeamsAndTeamMembers } from '../events/account-handlers/actions/syncTeams';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nconst dmMessages: Record<MessageCategory, string> = {\n  'pr-lifecycle': 'Your PR is closed, merged, reopened',\n  'pr-lifecycle-follow':\n    \"Someone closed, merged, reopened a PR you're reviewing\",\n  'pr-review': 'You are assigned to a review, someone reviewed your PR',\n  'pr-review-follow': \"Someone reviewed a PR you're also reviewing\",\n  'pr-comment': 'Someone commented on your PR',\n  'pr-comment-bots': 'A bot commented on your PR',\n  'pr-comment-follow': \"Someone commented on a PR you're reviewing\",\n  'pr-comment-follow-bots': \"A bot commented on a PR you're reviewing\",\n  'pr-comment-mention': 'Someone mentioned you in a PR',\n  'pr-comment-thread': \"Someone replied to a discussion you're in\",\n  'pr-merge-conflicts': 'Your PR has a merge conflict (not implemented)',\n  'issue-comment-mention':\n    'Someone mentioned you in an issue (not implemented)',\n};\n\nexport default function orgSettings(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n  mongoStores: MongoStores,\n): void {\n  router.get(\n    '/org/:org/force-sync',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return;\n\n        const orgs = await user.api.orgs.listForAuthenticatedUser();\n        const org = orgs.data.find((o) => o.login === req.params.org);\n        if (!org) {\n          res.redirect('/app');\n          return;\n        }\n\n        const o = await mongoStores.orgs.findByKey(org.id);\n        if (!o) {\n          res.redirect('/app');\n          return;\n        }\n\n        await syncOrg(mongoStores, user.api, o.installationId!, org);\n        await syncTeamsAndTeamMembers(mongoStores, user.api, org);\n\n        res.redirect(`/app/org/${req.params.org}`);\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n\n  router.get(\n    '/org/:org',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next): Promise<void> => {\n      const user = await getUser(req, res);\n      try {\n        if (!user) return;\n\n        const authenticatedUserOrgs =\n          await user.api.orgs.listForAuthenticatedUser();\n        const org = authenticatedUserOrgs.data.find(\n          (o) => o.login === req.params.org,\n        );\n        if (!org) {\n          res.redirect('/app');\n          return;\n        }\n\n        const [installation, orgInDb] = await Promise.all([\n          octokitApp.apps\n            .getOrgInstallation({ org: org.login })\n            .catch((err) => {\n              return { status: err.status, data: undefined };\n            }),\n          mongoStores.orgs.findByKey(org.id),\n        ]);\n\n        if (!orgInDb) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>\n                <div>\n                  {process.env.REVIEWFLOW_NAME}\n                  {\" isn't correctly installed. Contact support.\"}\n                </div>\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        if (!installation) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>\n                <div>\n                  {process.env.REVIEWFLOW_NAME}{' '}\n                  {\"isn't installed for this user. Go to \"}\n                  <a\n                    href={`https://github.com/settings/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n                  >\n                    Github Configuration\n                  </a>{' '}\n                  to install it.\n                </div>\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        const accountConfig = accountConfigs[org.login];\n        const [orgMember, userDmSettings] = await Promise.all([\n          mongoStores.orgMembers.findOne({\n            'org.id': org.id,\n            'user.id': user.authInfo.id,\n          }),\n          getUserDmSettings(mongoStores, org.login, org.id, user.authInfo.id),\n        ]);\n        const teamsAndGroups = orgMember\n          ? getTeamsAndGroups(accountConfig, orgMember)\n          : { groupName: undefined, teamNames: [] };\n\n        res.send(\n          renderToStaticMarkup(\n            <Layout>\n              <div>\n                <div style={{ display: 'flex' }}>\n                  <h2 style={{ flexGrow: 1 }}>{org.login}</h2>\n                  <a href=\"/app\">Switch account</a>\n                </div>\n\n                <div style={{ display: 'flex' }}>\n                  <div style={{ flexGrow: 1 }}>\n                    <h4>Account Config</h4>\n                    {!accountConfig\n                      ? 'Default config is used: https://github.com/christophehurpeau/reviewflow/blob/master/src/accountConfigs/defaultConfig.ts'\n                      : `Custom config: https://github.com/christophehurpeau/reviewflow/blob/master/src/accountConfigs/${org.login}.ts`}\n\n                    <h4 style={{ marginTop: '1rem' }}>Slack Connection</h4>\n                    {!orgInDb.slack && !orgInDb.slackToken ? (\n                      <>\n                        Slack account yet linked ! Install application to get\n                        notifications for your reviews.\n                        <br />\n                        <a\n                          href={`/app/slack-install?orgId=${encodeURIComponent(\n                            org.id,\n                          )}&orgLogin=${encodeURIComponent(org.login)}`}\n                        >\n                          <img\n                            alt=\"Add to Slack\"\n                            height=\"40\"\n                            width=\"139\"\n                            src=\"https://platform.slack-edge.com/img/add_to_slack.png\"\n                            srcSet=\"https://platform.slack-edge.com/img/add_to_slack.png 1x, https://platform.slack-edge.com/img/add_to_slack@2x.png 2x\"\n                          />\n                        </a>\n                      </>\n                    ) : !orgMember || !orgMember.slack ? (\n                      <>\n                        Slack account yet linked ! Sign in to get notifications\n                        for your reviews.\n                        <br />\n                        <a\n                          href={`/app/slack-connect?orgId=${encodeURIComponent(\n                            org.id,\n                          )}&orgLogin=${encodeURIComponent(org.login)}`}\n                        >\n                          <img\n                            src=\"https://api.slack.com/img/sign_in_with_slack.png\"\n                            alt=\"Sign in with Slack\"\n                          />\n                        </a>\n                      </>\n                    ) : (\n                      <div>\n                        {!orgInDb.slackToken\n                          ? null\n                          : '⚠ This account use a custom slack application.'}\n                        {orgInDb.slack && (\n                          <div>Slack Team ID: {orgInDb.slack.id}</div>\n                        )}\n                        <div>Slack User ID: {orgMember.slack.id}</div>\n                      </div>\n                    )}\n                    <h4 style={{ marginTop: '1rem' }}>User Information</h4>\n                    {!orgMember ? (\n                      <>User not found in database</>\n                    ) : (\n                      <>\n                        <div>\n                          Group Name: {teamsAndGroups.groupName || 'No groups'}\n                        </div>\n                        <div>\n                          Team Names:{' '}\n                          {teamsAndGroups.teamNames.join(', ') || 'No teams'}\n                        </div>\n                      </>\n                    )}\n                  </div>\n                  <div style={{ width: '380px' }}>\n                    <h4>My DM Settings</h4>\n                    {!orgMember || !orgMember.slack ? (\n                      <>Link your github account to unlock DM Settings</>\n                    ) : (\n                      Object.entries(dmMessages).map(([key, name]) => (\n                        <div key={key}>\n                          <label htmlFor={key}>\n                            <span\n                              // eslint-disable-next-line react/no-danger\n                              dangerouslySetInnerHTML={{\n                                __html: `<input id=\"${key}\" type=\"checkbox\" autocomplete=\"off\" ${\n                                  userDmSettings[key as MessageCategory]\n                                    ? 'checked=\"checked\" '\n                                    : ''\n                                }onclick=\"fetch(location.pathname, { method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ key: '${key}', value: event.currentTarget.checked }) })\" />`,\n                              }}\n                            />\n                            {name}\n                          </label>\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n              </div>\n            </Layout>,\n          ),\n        );\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n\n  router.patch('/org/:org', bodyParser.json(), async (req, res, next) => {\n    try {\n      if (!req.body) {\n        res.status(400).send('not ok');\n        return;\n      }\n\n      const user = await getUser(req, res);\n      if (!user) return;\n\n      const orgs = await user.api.orgs.listForAuthenticatedUser();\n      const org = orgs.data.find((o) => o.login === req.params.org);\n      if (!org) {\n        res.redirect('/app');\n        return;\n      }\n\n      (await mongoStores.userDmSettings.collection).updateOne(\n        {\n          _id: `${org.id}_${user.authInfo.id}`,\n        },\n        {\n          $set: {\n            [`settings.${req.body.key}`]: req.body.value,\n            updated: new Date(),\n          },\n          $setOnInsert: {\n            orgId: org.id,\n            userId: user.authInfo.id,\n            created: new Date(),\n          },\n        },\n        { upsert: true },\n      );\n\n      const userDmSettingsConfig = await mongoStores.userDmSettings.findOne({\n        orgId: org.id,\n        userId: user.authInfo.id,\n      });\n\n      if (userDmSettingsConfig) {\n        updateCache(org.login, user.authInfo.id, userDmSettingsConfig.settings);\n      }\n\n      res.send('ok');\n    } catch (err) {\n      next(err);\n    }\n  });\n}\n","import type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function repository(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n): void {\n  router.get(\n    '/repositories',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return;\n        const { data } = await user.api.repos.listForAuthenticatedUser({\n          per_page: 100,\n        });\n\n        res.send(\n          renderToStaticMarkup(\n            <Layout>\n              <div>\n                <h4>Your repositories</h4>\n                <ul>\n                  {data.map((repo: any) => (\n                    <li key={repo.id}>\n                      <a\n                        href={`/app/repository/${repo.owner.login}/${repo.name}`}\n                      >\n                        {repo.name}\n                      </a>\n                    </li>\n                  ))}\n                </ul>\n\n                {data.length === 100 && (\n                  <div>We currently have a limit to 100 repositories</div>\n                )}\n              </div>\n            </Layout>,\n          ),\n        );\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n\n  router.get(\n    '/repository/:owner/:repository',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return;\n        const { data } = await user.api.repos.get({\n          owner: req.params.owner,\n          repo: req.params.repository,\n        });\n\n        if (!data) {\n          res.status(404).send(\n            renderToStaticMarkup(\n              <Layout>\n                <div>repo not found</div>\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        if (!data.permissions || !data.permissions.admin) {\n          res.status(401).send(\n            renderToStaticMarkup(\n              <Layout>\n                <div>\n                  not authorized to see this repo, you need to have admin\n                  permission\n                </div>\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        const { data: data2 } = await octokitApp.apps\n          .getRepoInstallation({\n            owner: req.params.owner,\n            repo: req.params.repository,\n          })\n          .catch((err) => {\n            return { status: err.status, data: undefined };\n          });\n\n        if (!data2) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>\n                <div>\n                  {process.env.REVIEWFLOW_NAME}{' '}\n                  {\"isn't installed on this repo. Go to \"}\n                  <a\n                    href={`https://github.com/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n                  >\n                    Github Configuration\n                  </a>{' '}\n                  to add it.\n                </div>\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        res.send(\n          renderToStaticMarkup(\n            <Layout>\n              <div>\n                <h4>{req.params.repository}</h4>\n              </div>\n            </Layout>,\n          ),\n        );\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n}\n","import { AuthorizationCode } from 'simple-oauth2';\n\nif (!process.env.SLACK_CLIENT_ID) {\n  throw new Error('Missing env variable: SLACK_CLIENT_ID');\n}\n\nif (!process.env.SLACK_CLIENT_SECRET) {\n  throw new Error('Missing env variable: SLACK_CLIENT_SECRET');\n}\n\ninterface CreateSlackOAuth2Options {\n  id: string;\n  secret: string;\n  apiVersion?: string;\n}\n\nexport const createSlackOAuth2 = ({\n  id,\n  secret,\n  apiVersion = '',\n}: CreateSlackOAuth2Options): AuthorizationCode =>\n  new AuthorizationCode({\n    client: { id, secret },\n    auth: {\n      tokenHost: 'https://slack.com',\n      tokenPath: '/api/oauth.access',\n      authorizePath: `/oauth/${apiVersion}authorize`,\n    },\n  });\n\nexport const slackOAuth2 = createSlackOAuth2({\n  id: process.env.SLACK_CLIENT_ID,\n  secret: process.env.SLACK_CLIENT_SECRET,\n});\n\nexport const slackOAuth2Version2 = createSlackOAuth2({\n  id: process.env.SLACK_CLIENT_ID,\n  secret: process.env.SLACK_CLIENT_SECRET,\n  apiVersion: 'v2/',\n});\n","import { WebClient } from '@slack/web-api';\nimport type { Router, Request, Response } from 'express';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { slackOAuth2 } from '../auth/slack';\nimport { getExistingAccountContext } from '../context/accountContext';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nif (!process.env.AUTH_SECRET_KEY) {\n  throw new Error('Missing env variable: AUTH_SECRET_KEY');\n}\n\nconst createRedirectUri = (req: Request): string => {\n  const host = `https://${req.hostname}${\n    req.hostname === 'localhost' ? `:${process.env.PORT || 3000}` : ''\n  }`;\n  return `${host}/app/slack-connect-response`;\n};\n\nconst parseJSONSafe = (string: string) => {\n  try {\n    return JSON.parse(string);\n  } catch {\n    return null;\n  }\n};\n\nexport default function slackConnect(\n  router: Router,\n  mongoStores: MongoStores,\n): void {\n  router.get(\n    '/slack-connect',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req: Request, res: Response, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return;\n\n        const orgId = Number(req.query.orgId);\n        const orgLogin = req.query.orgLogin as string;\n        if (!orgId || !orgLogin) {\n          res.redirect('/app');\n          return;\n        }\n\n        const org = await mongoStores.orgs.findByKey(orgId);\n\n        if (!org) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>Organization is not installed.</Layout>,\n            ),\n          );\n          return;\n        }\n\n        const redirectUri = slackOAuth2.authorizeURL({\n          redirect_uri: createRedirectUri(req),\n          scope: 'identity.basic identity.email identity.avatar',\n          state: JSON.stringify({ orgId, orgLogin }),\n        });\n\n        // TODO team_id\n        res.redirect(redirectUri);\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n\n  router.get(\n    '/slack-install',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req: Request, res: Response, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return;\n\n        const orgId = Number(req.query.orgId);\n        const orgLogin = req.query.orgLogin as string;\n        if (!orgId || !orgLogin) {\n          res.redirect('/app');\n          return;\n        }\n\n        const redirectUri = slackOAuth2.authorizeURL({\n          redirect_uri: createRedirectUri(req),\n          // see url in https://app.slack.com/app-settings/T01495JH7RS/A023QGDUDQX/distribute for scopes\n          //=chat:write,im:history,im:read,mpim:read,im:write,mpim:history,mpim:write,reactions:read,reactions:write,team:read,users:read,users:read.email,users:write&user_scope=\n          scope:\n            'chat:write im:history im:read im:write mpim:history mpim:read mpim:write reactions:read reactions:write team:read users:read users:read.email users:write',\n          state: JSON.stringify({ orgId, orgLogin, isInstall: true }),\n        });\n\n        res.redirect(redirectUri);\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n\n  router.get(\n    '/slack-connect-response',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return;\n\n        if (req.query.error) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>\n                Could not get access token:{' '}\n                {req.query.error_description || req.query.error}.\n              </Layout>,\n            ),\n          );\n\n          return;\n        }\n\n        const code: string = req.query.code as string;\n        const state: string = req.query.state as string;\n        const { orgId, orgLogin, isInstall } = parseJSONSafe(state) || {};\n\n        const accessToken = await slackOAuth2.getToken({\n          code,\n          redirect_uri: createRedirectUri(req),\n        });\n\n        if (!accessToken || !accessToken.token.ok) {\n          res.send(\n            renderToStaticMarkup(<Layout>Could not get access token.</Layout>),\n          );\n          return;\n        }\n\n        const org = await mongoStores.orgs.findByKey(orgId);\n\n        if (!org) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>Organization is not installed.</Layout>,\n            ),\n          );\n          return;\n        }\n\n        // install slack, not login\n        if (isInstall) {\n          await mongoStores.orgs.partialUpdateOne(org, {\n            $set: {\n              slack: {\n                id: accessToken.token.user_id,\n                accessToken: accessToken.token.access_token,\n                scope: accessToken.token.scope\n                  ? accessToken.token.scope.split(',')\n                  : [],\n                teamId: accessToken.token.team_id,\n              },\n            },\n          });\n\n          const existingAccountContext = await getExistingAccountContext({\n            type: 'Organization',\n            id: orgId,\n            login: orgLogin,\n          });\n\n          if (existingAccountContext) {\n            existingAccountContext.initSlack();\n          }\n\n          res.redirect(`/app/org/${orgLogin || ''}`);\n          return;\n        }\n\n        const slackClient = new WebClient(accessToken.token.access_token);\n        const identity = await slackClient.users.identity();\n\n        if (!org.slack && !org.slackToken) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>\n                Organization is not linked to slack. Install it first.\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        if (\n          org?.slack?.teamId &&\n          accessToken.token.team_id !== org?.slack?.teamId\n        ) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>\n                Invalid slack team.{' '}\n                <a\n                  href={`/app/slack-connect?orgId=${encodeURIComponent(\n                    org._id,\n                  )}&orgLogin=${encodeURIComponent(org.login)}`}\n                >\n                  Retry ?\n                </a>\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        await mongoStores.orgMembers.partialUpdateMany(\n          { 'user.id': user.authInfo.id, 'org.id': orgId },\n          {\n            $set: {\n              slack: {\n                id: accessToken.token.user_id,\n                accessToken: accessToken.token.access_token,\n                scope: accessToken.token.scope\n                  ? accessToken.token.scope.split(',')\n                  : [],\n                teamId: accessToken.token.team_id,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                email: (identity as any).user.email,\n              },\n            },\n          },\n        );\n\n        const existingAccountContext = await getExistingAccountContext({\n          type: 'Organization',\n          id: orgId,\n          login: orgLogin,\n        });\n\n        if (existingAccountContext) {\n          existingAccountContext.slack.updateSlackMember(\n            user.authInfo.id,\n            user.authInfo.login,\n          );\n        }\n\n        res.redirect(`/app/org/${orgLogin || ''}`);\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n}\n","import type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { syncUser } from '../events/account-handlers/actions/syncUser';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function userSettings(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n  mongoStores: MongoStores,\n): void {\n  router.get(\n    '/user/force-sync',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return;\n\n        // const { data: installation } = await api.apps\n        //   .getUserInstallation({\n        //     username: user.authInfo.login,\n        //   })\n        //   .catch((err) => {\n        //     return { status: err.status, data: undefined };\n        //   });\n\n        // console.log(installation);\n\n        const u = await mongoStores.users.findByKey(user.authInfo.id);\n        if (!u || !u.installationId) {\n          res.redirect('/app');\n          return;\n        }\n\n        await syncUser(mongoStores, user.api, u.installationId!, user.authInfo);\n\n        res.redirect('/app/user');\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n\n  router.get(\n    '/user',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return null;\n\n        const { data: installation } = await octokitApp.apps\n          .getUserInstallation({\n            username: user.authInfo.login,\n          })\n          .catch((err) => {\n            return { status: err.status, data: undefined };\n          });\n\n        if (!installation) {\n          return res.send(\n            renderToStaticMarkup(\n              <Layout>\n                <div>\n                  {process.env.REVIEWFLOW_NAME}{' '}\n                  {\"isn't installed for this user. Go to \"}\n                  <a\n                    href={`https://github.com/settings/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n                  >\n                    Github Configuration\n                  </a>{' '}\n                  to install it.\n                </div>\n              </Layout>,\n            ),\n          );\n        }\n\n        return res.send(\n          renderToStaticMarkup(\n            <Layout>\n              <div>\n                {process.env.REVIEWFLOW_NAME} is installed for this user\n              </div>\n            </Layout>,\n          ),\n        );\n      } catch (err) {\n        next(err);\n        return null;\n      }\n    },\n  );\n}\n","import cookieParser from 'cookie-parser';\nimport type { Probot, run } from 'probot';\nimport auth from './app/auth';\nimport home from './app/home';\nimport orgSettings from './app/org-settings';\nimport repository from './app/repository';\nimport slackConnect from './app/slack-connect';\nimport userSettings from './app/user-settings';\nimport type { AppContext } from './context/AppContext';\n\nexport default async function appRouter(\n  app: Probot,\n  getRouter: Parameters<\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    Extract<Parameters<typeof run>[0], Function>\n  >[1]['getRouter'],\n  { mongoStores }: AppContext,\n): Promise<void> {\n  const router = getRouter!('/app');\n  const octokitApp = await app.auth();\n\n  router.use(cookieParser());\n\n  auth(router);\n  repository(router, octokitApp);\n  home(router, octokitApp, mongoStores);\n  orgSettings(router, octokitApp, mongoStores);\n  userSettings(router, octokitApp, mongoStores);\n  slackConnect(router, mongoStores);\n}\n","import type { Context } from 'probot';\nimport { accountConfigs, defaultConfig } from '../../../accountConfigs';\nimport type { AppContext } from '../../../context/AppContext';\nimport type { AccountContext } from '../../../context/accountContext';\nimport { obtainAccountContext } from '../../../context/accountContext';\n\ntype CallbackContextAndAccountContext<T> = (\n  context: Context<T>,\n  accountContext: AccountContext,\n) => void | Promise<void>;\n\nexport const handlerOrgChange = async <\n  T extends { organization?: { id: number; login: string } },\n>(\n  appContext: AppContext,\n  context: Context<T>,\n  callback: CallbackContextAndAccountContext<T>,\n): Promise<void> => {\n  const org = context.payload.organization;\n  if (!org) return;\n  const config = accountConfigs[org.login] || defaultConfig;\n  const accountContext = await obtainAccountContext(\n    appContext,\n    context,\n    config,\n    { ...org, type: 'Organization' },\n  );\n  if (!accountContext) return;\n\n  return accountContext.lock(async () => {\n    await callback(context, accountContext);\n  });\n};\n\nexport const createHandlerOrgChange =\n  <T extends { organization?: { id: number; login: string } }>(\n    appContext: AppContext,\n    callback: CallbackContextAndAccountContext<T>,\n  ) =>\n  (context: Context<T>) => {\n    return handlerOrgChange(appContext, context, callback);\n  };\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { syncTeamsAndTeamMembers } from './actions/syncTeams';\nimport { createHandlerOrgChange } from './utils/handler';\n\nexport default function membershipChanged(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  /* https://developer.github.com/webhooks/event-payloads/#membership */\n  app.on(\n    ['membership.added', 'membership.removed'],\n    createHandlerOrgChange<EventPayloads.WebhookPayloadMembership>(\n      appContext,\n      async (context, accountContext) => {\n        // TODO: only sync team members and team parents members\n        // await syncTeamMembersWithTeamParents(\n        //   appContext.mongoStores,\n        //   context.octokit,\n        //   context.payload.organization,\n        //   {\n        //     id: context.payload.team.id,\n        //     name: context.payload.team.name,\n        //     slug: context.payload.team.slug,\n        //   },\n        // );\n        await syncTeamsAndTeamMembers(\n          appContext.mongoStores,\n          context.octokit,\n          context.payload.organization,\n        );\n        await accountContext.updateGithubTeamMembers();\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { syncOrg } from './actions/syncOrg';\nimport { createHandlerOrgChange } from './utils/handler';\n\nexport default function orgMemberAddedOrRemoved(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  /* https://developer.github.com/webhooks/event-payloads/#organization */\n  app.on(\n    ['organization.member_added', 'organization.member_removed'],\n    createHandlerOrgChange<EventPayloads.WebhookPayloadOrganization>(\n      appContext,\n      async (context, accountContext) => {\n        const o = await appContext.mongoStores.orgs.findByKey(\n          accountContext.accountEmbed.id,\n        );\n        if (!o || !o.installationId) return;\n\n        await syncOrg(\n          appContext.mongoStores,\n          context.octokit,\n          o.installationId,\n          context.payload.organization,\n        );\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { syncTeams } from './actions/syncTeams';\nimport { createHandlerOrgChange } from './utils/handler';\n\nexport default function teamChanged(app: Probot, appContext: AppContext): void {\n  /* https://developer.github.com/webhooks/event-payloads/#team */\n  app.on(\n    ['team.created', 'team.deleted', 'team.edited'],\n    createHandlerOrgChange<EventPayloads.WebhookPayloadTeam>(\n      appContext,\n      async (context, accountContext) => {\n        await syncTeams(\n          appContext.mongoStores,\n          context.octokit,\n          context.payload.organization,\n        );\n      },\n    ),\n  );\n}\n","import type { RestEndpointMethodTypes } from '@octokit/plugin-rest-endpoint-methods';\nimport type { RepoContext } from '../../../context/repoContext';\n\nexport const checkIfUserIsBot = (\n  repoContext: RepoContext,\n  user: { login: string; type: string },\n): boolean => {\n  if (user.type === 'Bot') return true;\n  if (repoContext.config.botUsers) {\n    return repoContext.config.botUsers.includes(user.login);\n  }\n  return false;\n};\n\nexport const checkIfIsThisBot = (user: {\n  login: string;\n  type: string;\n}): boolean => {\n  return (\n    user.type === 'Bot' && user.login === `${process.env.REVIEWFLOW_NAME}[bot]`\n  );\n};\n\nexport const areCommitsAllMadeByBots = (\n  repoContext: RepoContext,\n  commits: RestEndpointMethodTypes['pulls']['listCommits']['response']['data'],\n): boolean =>\n  commits.every((c) => c.author && checkIfUserIsBot(repoContext, c.author));\n","import type { Context } from 'probot';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\n\nexport const updateBranch = async (\n  pullRequest: PullRequestWithDecentData,\n  context: Context<any>,\n  login: string | null,\n): Promise<boolean> => {\n  context.log.info('update branch', {\n    head: pullRequest.head.ref,\n    base: pullRequest.base.ref,\n  });\n\n  const result = await context.octokit.repos\n    .merge({\n      owner: pullRequest.head.repo.owner.login,\n      repo: pullRequest.head.repo.name,\n      head: pullRequest.base.ref,\n      base: pullRequest.head.ref,\n    })\n    .catch((err) => ({ error: err } as any));\n\n  context.log.info(\n    {\n      status: result.status,\n      sha: result.data?.sha,\n      error: result.error,\n    },\n    'update branch result',\n  );\n\n  if (result.status === 204) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `${\n          login ? `@${login} ` : ''\n        }Could not update branch: base already contains the head, nothing to merge.`,\n      }),\n    );\n    return true;\n  } else if (result.status === 409) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `${\n          login ? `@${login} ` : ''\n        }Could not update branch: merge conflict. Please resolve manually.`,\n      }),\n    );\n    return false;\n  } else if (!result || !result.data || !result.data.sha) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `${\n          login ? `@${login} ` : ''\n        }Could not update branch (unknown error).`,\n      }),\n    );\n    return false;\n  } else if (login) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `${login ? `@${login} ` : ''}Branch updated: ${result.data.sha}`,\n      }),\n    );\n  }\n  return true;\n};\n","export type OptionsKeys =\n  | 'autoMerge'\n  | 'autoMergeWithSkipCi'\n  | 'deleteAfterMerge';\n\nexport type Options = Record<OptionsKeys, boolean>;\n\nexport const options: OptionsKeys[] = [\n  'autoMerge',\n  'autoMergeWithSkipCi',\n  'deleteAfterMerge',\n];\nexport const optionsRegexps: {\n  key: OptionsKeys;\n  regexp: RegExp;\n}[] = options.map((option) => ({\n  key: option,\n  regexp: new RegExp(`\\\\[([ xX]?)]\\\\s*<!-- reviewflow-${option} -->`),\n}));\n\ninterface OptionDisplay {\n  key: OptionsKeys;\n  labelKey?: string;\n  icon?: string;\n  description: string;\n}\n\nexport const optionsDescriptions: OptionDisplay[] = [\n  {\n    key: 'autoMerge',\n    labelKey: 'merge/automerge',\n    description:\n      'Automatically merge when this PR is ready and has no failed statuses. When the repository requires _branches to be up to date before merging_, it merges default branch, with a queue per repo to prevent multiple merges when several PRs are ready. A fail job prevents the merge.',\n  },\n  {\n    key: 'autoMergeWithSkipCi',\n    labelKey: 'merge/skip-ci',\n    description:\n      'Add `[skip ci]` on merge commit when merge is done with autoMerge.',\n  },\n  {\n    key: 'deleteAfterMerge',\n    icon: ':recycle:',\n    description: 'Automatically delete the branch after this PR is merged.',\n  },\n];\n","import { optionsRegexps } from './prOptions';\nimport type { Options } from './prOptions';\n\nexport type { Options } from './prOptions';\n\nexport const parseOptions = (\n  content: string,\n  defaultOptions: Options,\n): Options => {\n  return optionsRegexps.reduce<any>((acc, { key, regexp }) => {\n    const match = regexp.exec(content);\n    acc[key] = !match\n      ? defaultOptions[key] || false\n      : match[1] === 'x' || match[1] === 'X';\n    return acc;\n  }, {}) as Options;\n};\n\nexport const parseCommitNotes = (content: string): string => {\n  const commitNotes = content.replace(\n    /^.*#### Commits Notes:(.*)#### Options:.*$/s,\n    '$1',\n  );\n\n  if (commitNotes === content) {\n    return '';\n  } else {\n    return commitNotes.trim();\n  }\n};\n\ninterface ParsedBody {\n  options: Options;\n  commitNotes: string;\n}\n\nexport const parseBody = (\n  content: string,\n  defaultOptions: Options,\n): ParsedBody => {\n  return {\n    options: parseOptions(content, defaultOptions),\n    commitNotes: parseCommitNotes(content),\n  };\n};\n","import type { PullRequestLabels } from 'events/pr-handlers/utils/PullRequestData';\nimport type { LabelResponse } from '../../../../context/initRepoLabels';\n\nexport default function hasLabelInPR(\n  prLabels: PullRequestLabels,\n  label: LabelResponse,\n): boolean {\n  if (!label) return false;\n  return prLabels.some((l): boolean => l.id === label.id);\n}\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { PullRequestData } from 'events/pr-handlers/utils/PullRequestData';\n\nexport function readPullRequestCommits<\n  E extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  context: Context<E>,\n  pr: PullRequestData = context.payload.pull_request,\n): Promise<\n  RestEndpointMethodTypes['pulls']['listCommits']['response']['data']\n> {\n  return context.octokit.paginate(\n    context.octokit.pulls.listCommits,\n    context.repo({\n      pull_number: pr.number,\n      // A custom page size up to 100. Default is 30.\n      per_page: 100,\n    }),\n    (res) => res.data,\n  );\n}\n","/* eslint-disable max-lines */\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { AutomergeLog } from 'mongo';\nimport type {\n  PullRequestData,\n  PullRequestFromRestEndpoint,\n  PullRequestLabels,\n} from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { areCommitsAllMadeByBots } from '../utils/isBotUser';\nimport { updateBranch } from './updateBranch';\nimport { parseBody } from './utils/body/parseBody';\nimport hasLabelInPR from './utils/hasLabelInPR';\nimport { readPullRequestCommits } from './utils/readPullRequestCommits';\n\nconst hasFailedStatusOrChecks = async (\n  pr: PullRequestData,\n  context: Context<any>,\n): Promise<boolean> => {\n  const checks = await context.octokit.checks.listForRef(\n    context.repo({\n      ref: pr.head.sha,\n      per_page: 100,\n    }),\n  );\n\n  const failedChecks = checks.data.check_runs.filter(\n    (check) => check.conclusion === 'failure',\n  );\n\n  if (failedChecks.length > 0) {\n    context.log.info(\n      {\n        checks: failedChecks.map((check) => check.name),\n      },\n      `automerge not possible: failed check pr ${pr.id}`,\n    );\n    return true;\n  }\n\n  const combinedStatus = await context.octokit.repos.getCombinedStatusForRef(\n    context.repo({\n      ref: pr.head.sha,\n      per_page: 100,\n    }),\n  );\n\n  if (combinedStatus.data.state === 'failure') {\n    const failedStatuses = combinedStatus.data.statuses.filter(\n      (status) => status.state === 'failure' || status.state === 'error',\n    );\n\n    context.log.info(\n      {\n        statuses: failedStatuses.map((status) => status.context),\n      },\n      `automerge not possible: failed status pr ${pr.id}`,\n    );\n\n    return true;\n  }\n\n  return false;\n};\n\nexport const autoMergeIfPossible = async (\n  pullRequest: PullRequestFromRestEndpoint,\n  context: Context<any>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  prLabels: PullRequestLabels = pullRequest.labels,\n): Promise<boolean> => {\n  if (reviewflowPrContext === null) return false;\n\n  const autoMergeLabel = repoContext.labels['merge/automerge'];\n\n  if (!hasLabelInPR(prLabels, autoMergeLabel)) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'no automerge label',\n    );\n    return false;\n  }\n\n  const isRenovatePr = pullRequest.head.ref.startsWith('renovate/');\n\n  const createMergeLockPrFromPr = () => ({\n    id: pullRequest.id,\n    number: pullRequest.number,\n    branch: pullRequest.head.ref,\n  });\n\n  if (pullRequest.state !== 'open') {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'pr is not opened',\n    );\n    return false;\n  }\n\n  const addLog = (\n    type: AutomergeLog['type'],\n    action: AutomergeLog['action'],\n  ): void => {\n    const repoFullName = pullRequest.head.repo.full_name;\n    context.log.info(`automerge: ${repoFullName}#${pullRequest.id} ${type}`);\n    repoContext.appContext.mongoStores.automergeLogs.insertOne({\n      account: repoContext.accountEmbed,\n      repoFullName,\n      pr: {\n        id: pullRequest.id,\n        number: pullRequest.number,\n        isRenovate: isRenovatePr,\n        mergeableState: pullRequest.mergeable_state,\n      },\n      type,\n      action,\n    });\n  };\n\n  if (\n    repoContext.hasNeedsReview(prLabels) ||\n    repoContext.hasRequestedReview(prLabels)\n  ) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'blocking labels',\n    );\n    return false;\n  }\n\n  if (\n    pullRequest.requested_reviewers &&\n    pullRequest.requested_reviewers.length > 0\n  ) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'still has requested reviewers',\n    );\n    return false;\n  }\n\n  if (pullRequest.requested_teams && pullRequest.requested_teams.length > 0) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'still has requested teams',\n    );\n    return false;\n  }\n\n  const lockedPr = repoContext.getMergeLockedPr();\n  if (lockedPr && String(lockedPr.number) !== String(pullRequest.number)) {\n    context.log.info(\n      {\n        prId: pullRequest.id,\n        prNumber: pullRequest.number,\n        lockedPrNumber: lockedPr.number,\n      },\n      'automerge not possible: locked pr',\n    );\n    repoContext.pushAutomergeQueue(createMergeLockPrFromPr());\n    return false;\n  }\n\n  repoContext.addMergeLockPr(createMergeLockPrFromPr());\n\n  if (pullRequest.mergeable == null) {\n    const prResult = await context.octokit.pulls.get(\n      context.repo({\n        pull_number: pullRequest.number,\n      }),\n    );\n    pullRequest = prResult.data;\n  }\n\n  if (pullRequest.merged) {\n    addLog('already merged', 'remove');\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'pr already merged',\n    );\n    return false;\n  }\n\n  context.log.info(\n    `automerge?: ${pullRequest.id}, #${pullRequest.number}, mergeable=${pullRequest.mergeable} state=${pullRequest.mergeable_state}`,\n  );\n\n  // https://github.com/octokit/octokit.net/issues/1763\n  if (\n    !(\n      pullRequest.mergeable_state === 'clean' ||\n      pullRequest.mergeable_state === 'has_hooks' ||\n      pullRequest.mergeable_state === 'unstable'\n    )\n  ) {\n    if (\n      !pullRequest.mergeable_state ||\n      pullRequest.mergeable_state === 'unknown'\n    ) {\n      addLog('unknown mergeable_state', 'reschedule');\n      // GitHub is determining whether the pull request is mergeable\n      repoContext.reschedule(context, createMergeLockPrFromPr());\n      return false;\n    }\n\n    if (isRenovatePr) {\n      if (\n        pullRequest.mergeable_state === 'behind' ||\n        pullRequest.mergeable_state === 'dirty'\n      ) {\n        const commits = await readPullRequestCommits(context, pullRequest);\n\n        // check if has commits not made by renovate or bots like https://github.com/ornikar/shared-configs/pull/47#issuecomment-445767120\n        if (!areCommitsAllMadeByBots(repoContext, commits)) {\n          addLog('rebase-renovate', 'update branch');\n          if (await updateBranch(pullRequest, context, null)) {\n            return false;\n          }\n\n          repoContext.removePrFromAutomergeQueue(\n            context,\n            pullRequest.number,\n            'update branch failed',\n          );\n          return false;\n        }\n\n        addLog('rebase-renovate', 'wait');\n        if (\n          pullRequest.body &&\n          pullRequest.body.includes('<!-- rebase-check -->')\n        ) {\n          if (pullRequest.body.includes('[x] <!-- rebase-check -->')) {\n            return false;\n          }\n\n          const renovateRebaseBody = pullRequest.body.replace(\n            '[ ] <!-- rebase-check -->',\n            '[x] <!-- rebase-check -->',\n          );\n          await context.octokit.issues.update(\n            context.repo({\n              issue_number: pullRequest.number,\n              body: renovateRebaseBody,\n            }),\n          );\n        } else if (!pullRequest.title.startsWith('rebase!')) {\n          await context.octokit.issues.update(\n            context.repo({\n              issue_number: pullRequest.number,\n              title: `rebase!${pullRequest.title}`,\n            }),\n          );\n        }\n        return false;\n      }\n\n      if (await hasFailedStatusOrChecks(pullRequest, context)) {\n        addLog('failed status or checks', 'remove');\n        repoContext.removePrFromAutomergeQueue(\n          context,\n          pullRequest.number,\n          'failed status or checks',\n        );\n        return false;\n      } else if (pullRequest.mergeable_state === 'blocked') {\n        addLog('blocked mergeable_state', 'wait');\n        // waiting for reschedule in status (pr-handler/status.ts)\n        return false;\n      }\n\n      context.log.info(\n        `automerge not possible: renovate with mergeable_state=${pullRequest.mergeable_state}`,\n      );\n      return false;\n    }\n\n    if (pullRequest.mergeable_state === 'blocked') {\n      if (await hasFailedStatusOrChecks(pullRequest, context)) {\n        addLog('failed status or checks', 'remove');\n        repoContext.removePrFromAutomergeQueue(\n          context,\n          pullRequest.number,\n          'failed status or checks',\n        );\n        return false;\n      } else {\n        addLog('blocked mergeable_state', 'wait');\n        // waiting for reschedule in status (pr-handler/status.ts)\n        return false;\n      }\n    }\n\n    if (pullRequest.mergeable_state === 'behind') {\n      addLog('behind mergeable_state', 'update branch');\n      if (await updateBranch(pullRequest, context, null)) {\n        return false;\n      }\n\n      repoContext.removePrFromAutomergeQueue(\n        context,\n        pullRequest.number,\n        'update branch failed',\n      );\n      return false;\n    }\n\n    addLog('not mergeable', 'remove');\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      `mergeable_state=${pullRequest.mergeable_state}`,\n    );\n    context.log.info(\n      `automerge not possible: not mergeable mergeable_state=${pullRequest.mergeable_state}`,\n    );\n    return false;\n  }\n\n  try {\n    context.log.info(`automerge pr #${pullRequest.number}`);\n\n    const parsedBody = parseBody(\n      reviewflowPrContext.commentBody,\n      repoContext.config.prDefaultOptions,\n    );\n    const options = parsedBody?.options || repoContext.config.prDefaultOptions;\n\n    const mergeResult = await context.octokit.pulls.merge({\n      merge_method: 'squash',\n      owner: pullRequest.head.repo.owner.login,\n      repo: pullRequest.head.repo.name,\n      pull_number: pullRequest.number,\n      commit_title: `${pullRequest.title}${\n        options.autoMergeWithSkipCi ? ' [skip ci]' : ''\n      } (#${pullRequest.number})`,\n      commit_message: parsedBody?.commitNotes\n        ? parsedBody?.commitNotes\n            .replace(/^- (.*)\\s*\\([^)]+\\)$/gm, '$1')\n            .replace(/^Breaking Changes:\\n/, 'BREAKING CHANGE: ')\n            .replace(/\\n/g, '; ')\n        : '',\n    });\n    context.log.debug(mergeResult.data, 'merge result:');\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'merged',\n    );\n    return Boolean('merged' in mergeResult.data && mergeResult.data.merged);\n  } catch (err) {\n    context.log.info({ errorMessage: err.message }, 'could not merge:');\n    repoContext.reschedule(context, createMergeLockPrFromPr());\n    return false;\n  }\n};\n","import type { LabelList, StatusInfo } from 'accountConfigs/types';\nimport type { Options } from './parseBody';\nimport { parseOptions } from './parseBody';\nimport { optionsDescriptions } from './prOptions';\n\nexport const defaultCommentBody = 'This will be auto filled by reviewflow.';\n\nconst toMarkdownOptions = (\n  repoLink: string,\n  labelsConfig: LabelList,\n  options: Options,\n): string => {\n  return optionsDescriptions\n    .map(({ key, labelKey, description, icon: iconValue }) => {\n      const checkboxWithId = `[${\n        options[key] ? 'x' : ' '\n      }] <!-- reviewflow-${key} -->`;\n\n      const labelDescription = labelKey && labelsConfig[labelKey];\n      const labelLink = labelDescription\n        ? `[${labelDescription.name}](${repoLink}/labels/${encodeURIComponent(\n            labelDescription.name,\n          )}): `\n        : '';\n      const icon = labelLink || !iconValue ? '' : `${iconValue} `;\n\n      return `- ${checkboxWithId}${icon}${labelLink}${description}`;\n    })\n    .join('\\n');\n};\n\nconst toMarkdownInfos = (infos: StatusInfo[]): string => {\n  return infos\n    .map((info) => {\n      if (info.url) return `[${info.title}](${info.url})`;\n      return info.title;\n    })\n    .join('\\n\\n');\n};\n\ninterface UpdatedBodyWithOptions {\n  commentBody: string;\n  options?: Options;\n}\n\nconst getReplacement = (infos?: StatusInfo[]): string => {\n  if (!infos) return '$1$2';\n  return infos.length > 0\n    ? `#### Infos:\\n\\n${toMarkdownInfos(infos)}\\n\\n$2`\n    : '$2';\n};\n\nconst updateOptions = (\n  options: Options,\n  optionsToUpdate?: Partial<Options>,\n): Options => {\n  if (!optionsToUpdate) return options;\n  return { ...options, ...optionsToUpdate };\n};\n\nconst internalUpdateBodyOptionsAndInfos = (\n  repoLink: string,\n  labelsConfig: LabelList,\n  body: string,\n  options: Options,\n  infos?: StatusInfo[],\n): string => {\n  const infosAndCommitNotesParagraph = body.replace(\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /^\\s*(?:(#### Infos:.*)?(#### Commits Notes:.*)?#### Options:)?.*$/s,\n    getReplacement(infos),\n  );\n\n  return `${infosAndCommitNotesParagraph}#### Options:\\n${toMarkdownOptions(\n    repoLink,\n    labelsConfig,\n    options,\n  )}`;\n};\n\nexport const createCommentBody = (\n  repoLink: string,\n  labelsConfig: LabelList,\n  defaultOptions: Options,\n  infos?: StatusInfo[],\n): string => {\n  return internalUpdateBodyOptionsAndInfos(\n    repoLink,\n    labelsConfig,\n    '',\n    defaultOptions,\n    infos,\n  );\n};\n\nexport const updateCommentOptions = (\n  repoLink: string,\n  labelsConfig: LabelList,\n  commentBody: string,\n  defaultOptions: Options,\n  optionsToUpdate?: Partial<Options>,\n): UpdatedBodyWithOptions => {\n  const options = parseOptions(commentBody, defaultOptions);\n  const updatedOptions = updateOptions(options, optionsToUpdate);\n\n  return {\n    options: updatedOptions,\n    commentBody: internalUpdateBodyOptionsAndInfos(\n      repoLink,\n      labelsConfig,\n      commentBody,\n      updatedOptions,\n    ),\n  };\n};\n\nexport const updateCommentBodyInfos = (\n  commentBody: string,\n  infos?: StatusInfo[],\n): string => {\n  return commentBody.replace(\n    // *  - zero or more\n    // *? - zero or more (non-greedy)\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /^\\s*(?:(#### Infos:.*?)?(#### Commits Notes:.*?)?(#### Options:.*?)?)?$/s,\n    `${getReplacement(infos)}$3`,\n  );\n};\n\nexport const updateCommentBodyCommitsNotes = (\n  commentBody: string,\n  commitNotes?: string,\n): string => {\n  return commentBody.replace(\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /(?:#### Commits Notes:.*?)?(#### Options:)/s,\n    !commitNotes ? '$1' : `#### Commits Notes:\\n\\n${commitNotes}\\n\\n$1`,\n  );\n};\n\nexport const removeDeprecatedReviewflowInPrBody = (\n  prBody: string | null,\n): string => {\n  if (!prBody) return '';\n  return prBody.replace(\n    /^(.*)<!---? do not edit after this -?-->(.*)<!---? end - don't add anything after this -?-->(.*)$/is,\n    '$1$3',\n  );\n};\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { Context } from 'probot';\nimport type { PullRequestWithDecentDataFromWebhook } from './PullRequestData';\n\nexport const createReviewflowComment = <T>(\n  pullRequestNumber: PullRequestWithDecentDataFromWebhook['number'],\n  context: Context<T>,\n  body: string,\n): Promise<\n  RestEndpointMethodTypes['issues']['createComment']['response']['data']\n> => {\n  return context.octokit.issues\n    .createComment(context.repo({ issue_number: pullRequestNumber, body }))\n    .then(({ data }) => data);\n};\n\nexport const getReviewflowCommentById = <T>(\n  pullRequestNumber: PullRequestWithDecentDataFromWebhook['number'],\n  context: Context<T>,\n  commentId: number,\n): Promise<\n  RestEndpointMethodTypes['issues']['getComment']['response']['data'] | null\n> => {\n  return context.octokit.issues\n    .getComment(\n      context.repo({\n        issue_number: pullRequestNumber,\n        comment_id: commentId,\n      }),\n    )\n    .then(\n      ({ data }) => data,\n      () => null,\n    );\n};\n","import type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { ReviewflowPr } from 'mongo';\nimport { defaultCommentBody } from '../actions/utils/body/updateBody';\nimport type { PullRequestWithDecentDataFromWebhook } from './PullRequestData';\nimport {\n  createReviewflowComment,\n  getReviewflowCommentById,\n} from './reviewflowComment';\n\nexport interface CreatePrContextOptions {\n  reviewflowCommentPromise?: ReturnType<typeof createReviewflowComment>;\n}\n\nexport interface ReviewflowPrContext {\n  reviewflowPr: ReviewflowPr;\n  commentBody: string;\n}\n\nexport const getReviewflowPrContext = async <T>(\n  pullRequestNumber: PullRequestWithDecentDataFromWebhook['number'],\n  context: Context<T>,\n  repoContext: RepoContext,\n  reviewflowCommentPromise?: ReturnType<typeof createReviewflowComment>,\n): Promise<ReviewflowPrContext> => {\n  const appContext = repoContext.appContext;\n  const prEmbed = { number: pullRequestNumber };\n\n  if (reviewflowCommentPromise) {\n    const comment = await reviewflowCommentPromise;\n    const reviewflowPr = await appContext.mongoStores.prs.insertOne({\n      account: repoContext.accountEmbed,\n      repo: repoContext.repoEmbed,\n      pr: prEmbed,\n      commentId: comment.id,\n    });\n    return { reviewflowPr, commentBody: comment.body! };\n  }\n\n  const existing = await appContext.mongoStores.prs.findOne({\n    'account.id': repoContext.accountEmbed.id,\n    'repo.id': repoContext.repoEmbed.id,\n    'pr.number': pullRequestNumber,\n  });\n  const comment =\n    existing &&\n    (await getReviewflowCommentById(\n      pullRequestNumber,\n      context,\n      existing.commentId,\n    ));\n\n  if (!comment || !existing) {\n    const comment = await createReviewflowComment(\n      pullRequestNumber,\n      context,\n      defaultCommentBody,\n    );\n\n    if (!existing) {\n      const reviewflowPr = await appContext.mongoStores.prs.insertOne({\n        account: repoContext.accountEmbed,\n        repo: repoContext.repoEmbed,\n        pr: prEmbed,\n        commentId: comment.id,\n      });\n      return { reviewflowPr, commentBody: comment.body! };\n    } else {\n      await appContext.mongoStores.prs.partialUpdateByKey(existing._id, {\n        $set: { commentId: comment.id },\n      });\n    }\n  }\n\n  return { reviewflowPr: existing, commentBody: comment!.body! };\n};\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { Context } from 'probot';\n\nexport const fetchPr = async (\n  context: Context<any>,\n  prNumber: number,\n): Promise<RestEndpointMethodTypes['pulls']['get']['response']['data']> => {\n  const prResult = await context.octokit.pulls.get(\n    context.repo({ pull_number: prNumber }),\n  );\n\n  return prResult.data;\n};\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { Context } from 'probot';\nimport type { Config } from '../accountConfigs';\n\nexport interface LabelResponse {\n  id: number;\n  node_id: string;\n  url: string;\n  name: string;\n  description?: string | null;\n  color: string;\n  default: boolean;\n}\n\nexport type LabelsRecord = Record<string, LabelResponse>;\n\nexport const getLabelsForRepo = async (\n  context: Context<any>,\n): Promise<\n  RestEndpointMethodTypes['issues']['listLabelsForRepo']['response']['data']\n> => {\n  const { data: labels } = await context.octokit.issues.listLabelsForRepo(\n    context.repo({ per_page: 100 }),\n  );\n  return labels;\n};\n\nexport const initRepoLabels = async <GroupNames extends string>(\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<LabelsRecord> => {\n  const labels = await getLabelsForRepo(context);\n  const finalLabels: Record<string, LabelResponse> = {};\n\n  for (const [labelKey, labelConfig] of Object.entries(config.labels.list)) {\n    const labelColor = labelConfig.color.slice(1);\n    const description = labelConfig.description\n      ? `${labelConfig.description} - Synced by reviewflow`\n      : `Synced by reviewflow for ${labelKey}`;\n\n    let existingLabel = labels.find((label) => label.name === labelConfig.name);\n    if (!existingLabel) {\n      existingLabel = labels.find((label) => label.description === description);\n    }\n    if (!existingLabel) {\n      if (labelKey === 'design/needs-review') {\n        existingLabel = labels.find(\n          (label) => label.name === 'needs-design-review',\n        );\n      }\n      if (labelKey === 'design/approved') {\n        existingLabel = labels.find(\n          (label) => label.name === 'design-reviewed',\n        );\n      }\n      if (labelKey === 'teams/ops') {\n        existingLabel = labels.find((label) => label.name === 'archi');\n      }\n      if (labelKey === 'merge/skip-ci') {\n        existingLabel = labels.find(\n          (label) => label.name === 'automerge/skip-ci',\n        );\n      }\n    }\n\n    if (!existingLabel) {\n      const result = await context.octokit.issues.createLabel(\n        context.repo({\n          name: labelConfig.name,\n          color: labelColor,\n          description,\n        }),\n      );\n      finalLabels[labelKey] = result.data;\n    } else if (\n      existingLabel.name !== labelConfig.name ||\n      existingLabel.color !== labelColor ||\n      existingLabel.description !== description\n    ) {\n      context.log.info(\n        {\n          current_name: existingLabel.name,\n          name: existingLabel.name !== labelConfig.name && labelConfig.name,\n          color: existingLabel.color !== labelColor && labelColor,\n          description: existingLabel.description !== description && description,\n        },\n        'Needs to update label',\n      );\n\n      const result = await context.octokit.issues.updateLabel(\n        context.repo({\n          name: existingLabel.name,\n          new_name: labelConfig.name,\n          color: labelColor,\n          description,\n        }),\n      );\n      finalLabels[labelKey] = result.data;\n    } else {\n      finalLabels[labelKey] = existingLabel;\n    }\n  }\n\n  return finalLabels;\n};\n","import { Lock } from 'lock';\nimport type { Context } from 'probot';\nimport type { Config } from '../accountConfigs';\nimport { accountConfigs, defaultConfig } from '../accountConfigs';\nimport type { GroupLabels } from '../accountConfigs/types';\nimport { autoMergeIfPossible } from '../events/pr-handlers/actions/autoMergeIfPossible';\nimport type {\n  PullRequestData,\n  PullRequestLabels,\n  PullRequestWithDecentData,\n} from '../events/pr-handlers/utils/PullRequestData';\nimport { getReviewflowPrContext } from '../events/pr-handlers/utils/createPullRequestContext';\nimport { fetchPr } from '../events/pr-handlers/utils/fetchPr';\nimport { ExcludesFalsy } from '../utils/Excludes';\nimport type { AppContext } from './AppContext';\nimport type { AccountContext } from './accountContext';\nimport { obtainAccountContext } from './accountContext';\nimport type { LabelResponse, LabelsRecord } from './initRepoLabels';\nimport { initRepoLabels } from './initRepoLabels';\nimport { getEmojiFromRepoDescription } from './utils';\n\nexport interface LockedMergePr {\n  id: number;\n  number: number;\n  branch: string;\n}\n\ninterface RepoContextWithoutTeamContext<GroupNames extends string> {\n  appContext: AppContext;\n  repoFullName: string;\n  repoEmbed: { id: number; name: string };\n  repoEmoji: string | undefined;\n  labels: LabelsRecord;\n  protectedLabelIds: readonly LabelResponse['id'][];\n  shouldIgnore: boolean;\n\n  hasNeedsReview: (labels: PullRequestLabels) => boolean;\n  hasRequestedReview: (labels: PullRequestLabels) => boolean;\n  hasChangesRequestedReview: (labels: PullRequestLabels) => boolean;\n  hasApprovesReview: (labels: PullRequestLabels) => boolean;\n  getNeedsReviewGroupNames: (labels: PullRequestLabels) => GroupNames[];\n  lockPullRequest: (\n    pullRequest: PullRequestData,\n    callback: () => Promise<void> | void,\n  ) => Promise<void>;\n\n  /** @deprecated */\n  lockPR: (\n    prId: string,\n    prNumber: number,\n    callback: () => Promise<void> | void,\n  ) => Promise<void>;\n\n  getMergeLockedPr: () => LockedMergePr;\n  addMergeLockPr: (pr: LockedMergePr) => void;\n  removePrFromAutomergeQueue: (\n    context: Context<any>,\n    prNumber: number,\n    reason: string,\n  ) => void;\n  reschedule: (context: Context<any>, pr: LockedMergePr) => void;\n  pushAutomergeQueue: (pr: LockedMergePr) => void;\n}\n\nexport type RepoContext<GroupNames extends string = any> =\n  AccountContext<GroupNames> & RepoContextWithoutTeamContext<GroupNames>;\n\nexport const shouldIgnoreRepo = (\n  repoName: string,\n  accountConfig: Config<any, any>,\n): boolean => {\n  const ignoreRepoRegexp =\n    accountConfig.ignoreRepoPattern &&\n    new RegExp(`^${accountConfig.ignoreRepoPattern}$`);\n\n  if (repoName === 'reviewflow-test') {\n    return process.env.REVIEWFLOW_NAME !== 'reviewflow-dev';\n  }\n\n  if (ignoreRepoRegexp) {\n    return ignoreRepoRegexp.test(repoName);\n  }\n\n  return false;\n};\n\nconst createGetReviewLabelIds = <GroupNames extends string>(\n  shouldIgnore: boolean,\n  config: Config<GroupNames>,\n  reviewGroupNames: GroupNames[],\n  labels: LabelsRecord,\n): ((labelKey: GroupLabels) => number[]) => {\n  if (shouldIgnore) return (labelKey: GroupLabels): number[] => [];\n  return (labelKey: GroupLabels): number[] =>\n    reviewGroupNames\n      .map((key) => config.labels.review[key][labelKey])\n      .filter(Boolean)\n      .map((name) => labels[name].id);\n};\n\nasync function initRepoContext<GroupNames extends string>(\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<RepoContext<GroupNames>> {\n  const {\n    id,\n    name,\n    full_name: fullName,\n    owner: org,\n    description,\n  } = context.payload.repository;\n  const repoEmoji = getEmojiFromRepoDescription(description);\n\n  const accountContext = await obtainAccountContext(\n    appContext,\n    context,\n    config,\n    org,\n  );\n  const repoContext = Object.create(accountContext);\n\n  const shouldIgnore = shouldIgnoreRepo(name, config);\n\n  const labels = shouldIgnore ? {} : await initRepoLabels(context, config);\n\n  const reviewGroupNames = Object.keys(config.groups) as GroupNames[];\n  const getReviewLabelIds = createGetReviewLabelIds(\n    shouldIgnore,\n    config,\n    reviewGroupNames,\n    labels,\n  );\n\n  const needsReviewLabelIds = getReviewLabelIds('needsReview');\n  const requestedReviewLabelIds = getReviewLabelIds('requested');\n  const changesRequestedLabelIds = getReviewLabelIds('changesRequested');\n  const approvedReviewLabelIds = getReviewLabelIds('approved');\n\n  const protectedLabelIds = [\n    ...requestedReviewLabelIds,\n    ...changesRequestedLabelIds,\n    ...approvedReviewLabelIds,\n  ];\n\n  const labelIdToGroupName = new Map<LabelResponse['id'], GroupNames>();\n  if (!shouldIgnore) {\n    reviewGroupNames.forEach((key) => {\n      const reviewGroupLabels = config.labels.review[key] as any;\n      Object.keys(reviewGroupLabels).forEach((labelKey: string) => {\n        labelIdToGroupName.set(labels[reviewGroupLabels[labelKey]].id, key);\n      });\n    });\n  }\n\n  // const updateStatusCheck = (context, reviewGroup, statusInfo) => {};\n\n  const hasNeedsReview = (labels: PullRequestLabels): boolean =>\n    labels.some((label) => label.id && needsReviewLabelIds.includes(label.id));\n  const hasRequestedReview = (labels: PullRequestLabels): boolean =>\n    labels.some(\n      (label) => label.id && requestedReviewLabelIds.includes(label.id),\n    );\n  const hasChangesRequestedReview = (labels: PullRequestLabels): boolean =>\n    labels.some(\n      (label) => label.id && changesRequestedLabelIds.includes(label.id),\n    );\n  const hasApprovesReview = (labels: PullRequestLabels): boolean =>\n    labels.some(\n      (label) => label.id && approvedReviewLabelIds.includes(label.id),\n    );\n\n  const getNeedsReviewGroupNames = (labels: PullRequestLabels): GroupNames[] =>\n    labels\n      .filter((label) => label.id && needsReviewLabelIds.includes(label.id))\n      .map((label) => labelIdToGroupName.get(label.id!))\n      .filter(ExcludesFalsy);\n\n  const lock = Lock();\n  let lockMergePr: LockedMergePr | undefined;\n  let automergeQueue: LockedMergePr[] = [];\n\n  const lockPR = (\n    prOrPrIssueId: string,\n    prNumber: number,\n    callback: () => Promise<void> | void,\n  ): Promise<void> =>\n    new Promise((resolve, reject) => {\n      const logInfos = {\n        repo: fullName,\n        prOrPrIssueId,\n        prNumber,\n      };\n      context.log.debug(logInfos, 'lock: try to lock pr');\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      lock(String(prNumber), async (createReleaseCallback) => {\n        const release = createReleaseCallback(() => {});\n        context.log.info(logInfos, 'lock: lock pr acquired');\n        try {\n          await callback();\n        } catch (err) {\n          context.log.info(logInfos, 'lock: release pr (with error)');\n          release();\n          reject(err);\n          return;\n        }\n        context.log.info(logInfos, 'lock: release pr');\n        release();\n        resolve();\n      });\n    });\n\n  const lockPullRequest = (\n    pullRequest: PullRequestWithDecentData,\n    callback: () => Promise<void> | void,\n  ): Promise<void> => {\n    return lockPR(String(pullRequest.id), pullRequest.number, callback);\n  };\n\n  const reschedule = (context: Context<any>, pr: LockedMergePr): void => {\n    if (!pr) throw new Error('Cannot reschedule undefined');\n    context.log.info(pr, 'reschedule');\n    setTimeout(() => {\n      lockPR('reschedule', -1, () => {\n        return lockPR(String(pr.id), pr.number, async () => {\n          const [pullRequest, reviewflowPrContext] = await Promise.all([\n            fetchPr(context, pr.number),\n            getReviewflowPrContext(pr.number, context, repoContext),\n          ]);\n          await autoMergeIfPossible(\n            pullRequest,\n            context,\n            repoContext,\n            reviewflowPrContext,\n          );\n        });\n      });\n    }, 10_000);\n  };\n\n  return Object.assign(repoContext, {\n    appContext,\n    labels,\n    repoFullName: fullName,\n    repoEmbed: { id, name },\n    repoEmoji,\n    protectedLabelIds,\n    shouldIgnore,\n    hasNeedsReview,\n    hasRequestedReview,\n    hasChangesRequestedReview,\n    hasApprovesReview,\n    getNeedsReviewGroupNames,\n\n    getMergeLockedPr: () => lockMergePr,\n    addMergeLockPr: (pr: LockedMergePr): void => {\n      // eslint-disable-next-line no-console\n      console.log('merge lock: lock', {\n        repo: fullName,\n        pr,\n      });\n      if (lockMergePr && String(lockMergePr.number) === String(pr.number)) {\n        return;\n      }\n      if (lockMergePr) throw new Error('Already have lock');\n      lockMergePr = pr;\n    },\n    removePrFromAutomergeQueue: (\n      context,\n      prNumber: number | string,\n      reason: string,\n    ): void => {\n      if (lockMergePr && String(lockMergePr.number) === String(prNumber)) {\n        lockMergePr = automergeQueue.shift();\n        context.log(`merge lock: remove ${fullName}#${prNumber}: ${reason}`);\n        if (lockMergePr) {\n          context.log(lockMergePr, `merge lock: next ${fullName}`);\n        } else {\n          context.log(`merge lock: nothing next ${fullName}`);\n        }\n        if (lockMergePr) {\n          reschedule(context, lockMergePr);\n        }\n      } else {\n        const previousLength = automergeQueue.length;\n        automergeQueue = automergeQueue.filter(\n          (value) => String(value.number) !== String(prNumber),\n        );\n        if (automergeQueue.length !== previousLength) {\n          context.log(`merge lock: remove ${fullName}#${prNumber}: ${reason}`);\n        }\n      }\n    },\n    pushAutomergeQueue: (pr: LockedMergePr): void => {\n      context.log(\n        {\n          repo: fullName,\n          pr,\n          lockMergePr,\n          automergeQueue,\n        },\n        'merge lock: push queue',\n      );\n      if (!automergeQueue.some((p) => p.number === pr.number)) {\n        automergeQueue.push(pr);\n      }\n    },\n    reschedule,\n\n    lockPR,\n    lockPullRequest,\n  } as RepoContextWithoutTeamContext<GroupNames>);\n}\n\nconst repoContextsPromise = new Map<number, Promise<RepoContext>>();\nconst repoContexts = new Map<number, RepoContext>();\n\nexport const obtainRepoContext = (\n  appContext: AppContext,\n  context: Context<any>,\n): Promise<RepoContext> | RepoContext | null => {\n  const repo = context.payload.repository;\n  const owner = repo.owner;\n  const key = repo.id;\n\n  const existingRepoContext = repoContexts.get(key);\n  if (existingRepoContext) return existingRepoContext;\n\n  const existingPromise = repoContextsPromise.get(key);\n  if (existingPromise) return Promise.resolve(existingPromise);\n\n  let accountConfig = accountConfigs[owner.login];\n\n  if (!accountConfig) {\n    context.log(`using default config for ${owner.login}`);\n    accountConfig = defaultConfig as Config<any, any>;\n  }\n\n  const promise = initRepoContext(appContext, context, accountConfig);\n  repoContextsPromise.set(key, promise);\n\n  return promise.then((repoContext) => {\n    repoContextsPromise.delete(key);\n    repoContexts.set(key, repoContext);\n    return repoContext;\n  });\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { AppContext } from '../../../context/AppContext';\nimport type { RepoContext } from '../../../context/repoContext';\nimport { obtainRepoContext } from '../../../context/repoContext';\n\nexport const createRepoHandler = <\n  T extends { repository: EventPayloads.PayloadRepository },\n>(\n  appContext: AppContext,\n  callback: (\n    context: Context<T>,\n    repoContext: RepoContext,\n  ) => Promise<void> | void,\n): ((context: Context<T>) => Promise<void>) => {\n  return async (context): Promise<void> => {\n    const repoContext = await obtainRepoContext(appContext, context);\n    if (!repoContext) return;\n\n    return callback(context, repoContext);\n  };\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { AppContext } from '../../../context/AppContext';\nimport type { RepoContext, LockedMergePr } from '../../../context/repoContext';\nimport { createRepoHandler } from '../../repository-handlers/utils/createRepoHandler';\nimport type {\n  PullRequestData,\n  PullRequestFromWebhook,\n} from './PullRequestData';\nimport type {\n  CreatePrContextOptions,\n  ReviewflowPrContext,\n} from './createPullRequestContext';\nimport { getReviewflowPrContext } from './createPullRequestContext';\n\ntype OnCallback<T> = (context: Context<T>) => Promise<void>;\n\nexport type CallbackWithPRAndRepoContext<T extends PullRequestData> = (\n  pullRequest: T,\n  repoContext: RepoContext,\n) => void | Promise<void>;\n\nexport const createPullRequestHandler = <\n  T extends\n    | EventPayloads.WebhookPayloadPullRequest\n    | EventPayloads.WebhookPayloadPullRequestReview\n    | EventPayloads.WebhookPayloadPullRequestReviewComment\n    | EventPayloads.WebhookPayloadIssueComment\n    | EventPayloads.WebhookPayloadPullRequestReviewComment,\n  U extends PullRequestFromWebhook,\n  GroupNames extends string = string,\n>(\n  appContext: AppContext,\n  getPullRequestInPayload: (\n    payload: Context<T>['payload'],\n    context: Context<T>,\n    repoContext: RepoContext<GroupNames>,\n  ) => U | null,\n  callbackPr: (\n    pullRequest: U,\n    context: Context<T>,\n    repoContext: RepoContext<GroupNames>,\n    reviewflowPrContext: ReviewflowPrContext | null,\n  ) => void | Promise<void>,\n  callbackBeforeLock?: (\n    pullRequest: U,\n    context: Context<T>,\n    repoContext: RepoContext<GroupNames>,\n  ) => CreatePrContextOptions,\n): OnCallback<T> => {\n  return createRepoHandler(appContext, async (context, repoContext) => {\n    const pullRequest: U | null = getPullRequestInPayload(\n      context.payload,\n      context,\n      repoContext,\n    );\n    if (pullRequest === null) return;\n    const options = callbackBeforeLock\n      ? callbackBeforeLock(pullRequest, context, repoContext)\n      : {};\n\n    await repoContext.lockPullRequest(pullRequest, async () => {\n      /*\n       * When repo are ignored, only slack notifications are sent.\n       * PR is not linted, commented, nor auto merged.\n       */\n      const reviewflowPrContext = repoContext.shouldIgnore\n        ? null\n        : await getReviewflowPrContext(\n            pullRequest.number,\n            context,\n            repoContext,\n            options.reviewflowCommentPromise,\n          );\n\n      return callbackPr(pullRequest, context, repoContext, reviewflowPrContext);\n    });\n  });\n};\n\nexport const createPullRequestsHandler = <\n  T extends { repository: EventPayloads.PayloadRepository },\n  U extends PullRequestFromWebhook | LockedMergePr,\n  GroupNames extends string,\n>(\n  appContext: AppContext,\n  getPrs: (\n    payload: Context<T>['payload'],\n    repoContext: RepoContext<GroupNames>,\n  ) => U[],\n  callbackPr: (\n    pullRequest: U,\n    context: Context<T>,\n    repoContext: RepoContext<GroupNames>,\n  ) => void | Promise<void>,\n): OnCallback<T> => {\n  return createRepoHandler(appContext, async (context, repoContext) => {\n    const prs = getPrs(context.payload, repoContext);\n    if (prs.length === 0) return;\n\n    await Promise.all(\n      prs.map((pr) =>\n        repoContext.lockPR(String(pr.id), pr.number, async () => {\n          return callbackPr(pr, context, repoContext);\n        }),\n      ),\n    );\n  });\n};\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { getReviewflowPrContext } from './utils/createPullRequestContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function checkrunCompleted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'check_run.completed',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext) => {\n        if (repoContext.shouldIgnore) return [];\n        return payload.check_run.pull_requests;\n      },\n      async (pullRequest, context, repoContext) => {\n        const [updatedPr, reviewflowPrContext] = await Promise.all([\n          fetchPr(context, pullRequest.number),\n          getReviewflowPrContext(pullRequest.number, context, repoContext),\n        ]);\n\n        await autoMergeIfPossible(\n          updatedPr,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { getReviewflowPrContext } from './utils/createPullRequestContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function checksuiteCompleted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'check_suite.completed',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext) => {\n        if (repoContext.shouldIgnore) return [];\n        return payload.check_suite.pull_requests;\n      },\n      async (pullRequest, context, repoContext) => {\n        const [updatedPr, reviewflowPrContext] = await Promise.all([\n          fetchPr(context, pullRequest.number),\n          getReviewflowPrContext(pullRequest.number, context, repoContext),\n        ]);\n\n        await autoMergeIfPossible(\n          updatedPr,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { PullRequestWithDecentData } from 'events/pr-handlers/utils/PullRequestData';\nimport type { RepoContext } from '../context/repoContext';\n\nexport const createLink = (url: string, text: string): string => {\n  return `<${url}|${text}>`;\n};\n\nexport const createPrLink = (\n  pr: { html_url: string; number: number },\n  repoContext: RepoContext,\n): string => {\n  return createLink(\n    pr.html_url,\n    `${repoContext.repoEmoji ? `${repoContext.repoEmoji} ` : ''}${\n      repoContext.repoFullName\n    }#${pr.number}`,\n  );\n};\n\nexport const createOwnerPart = (\n  ownerMention: string,\n  pullRequest: PullRequestWithDecentData,\n  sendTo: AccountInfo,\n): string => {\n  const owner = pullRequest.user;\n\n  if (owner && owner.id === sendTo.id) return 'your PR';\n\n  const isAssignedTo: boolean =\n    !!pullRequest.assignees &&\n    pullRequest.assignees.some((a: any) => a && a.id === sendTo.id);\n\n  return `${ownerMention}'s PR${isAssignedTo ? \" you're assigned to\" : ''}`;\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\n\nexport default async function createStatus<\n  T extends { repository: EventPayloads.PayloadRepository },\n>(\n  context: Context<T>,\n  name: string,\n  sha: string,\n  type: 'failure' | 'success',\n  description: string,\n  url?: string,\n): Promise<void> {\n  if (description.length > 140) {\n    context.log('description too long', { description });\n    description = description.slice(0, 140);\n  }\n  await context.octokit.repos.createCommitStatus(\n    context.repo({\n      context:\n        name === ''\n          ? process.env.REVIEWFLOW_NAME\n          : `${process.env.REVIEWFLOW_NAME}/${name}`,\n      sha,\n      state: type,\n      description,\n      target_url: url,\n    }),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\nimport type {\n  PullRequestLabels,\n  PullRequestWithDecentData,\n  PullRequestWithDecentDataFromWebhook,\n} from '../utils/PullRequestData';\nimport createStatus from './utils/createStatus';\n\nconst addStatusCheck = async function <\n  T extends { repository: EventPayloads.PayloadRepository },\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<T>,\n  { state, description }: { state: 'failure' | 'success'; description: string },\n  previousSha?: string,\n): Promise<void> {\n  const hasPrCheck = (\n    await context.octokit.checks.listForRef(\n      context.repo({\n        ref: pullRequest.head.sha,\n      }),\n    )\n  ).data.check_runs.find((check) => check.name === process.env.REVIEWFLOW_NAME);\n\n  context.log.debug({ hasPrCheck, state, description }, 'add status check');\n\n  if (hasPrCheck) {\n    await context.octokit.checks.create(\n      context.repo({\n        name: process.env.REVIEWFLOW_NAME!,\n        head_sha: pullRequest.head.sha,\n        started_at: pullRequest.created_at,\n        status: 'completed',\n        conclusion: state,\n        completed_at: new Date().toISOString(),\n        output: {\n          title: description,\n          summary: '',\n        },\n      }),\n    );\n  } else if (previousSha && state === 'failure') {\n    await Promise.all([\n      createStatus(\n        context,\n        '',\n        previousSha,\n        'success',\n        'New commits have been pushed',\n      ),\n      createStatus(context, '', pullRequest.head.sha, state, description),\n    ]);\n  } else {\n    await createStatus(context, '', pullRequest.head.sha, state, description);\n  }\n};\n\nexport const updateStatusCheckFromLabels = <\n  T extends { repository: EventPayloads.PayloadRepository },\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<T>,\n  repoContext: RepoContext,\n  labels: PullRequestLabels = pullRequest.labels || [],\n  previousSha?: string,\n): Promise<void> => {\n  context.log.debug(\n    {\n      labels: labels.map((l) => l?.name),\n      hasNeedsReview: repoContext.hasNeedsReview(labels),\n      hasApprovesReview: repoContext.hasApprovesReview(labels),\n    },\n    'updateStatusCheckFromLabels',\n  );\n\n  const createFailedStatusCheck = (description: string): Promise<void> =>\n    addStatusCheck(\n      pullRequest,\n      context,\n      {\n        state: 'failure',\n        description,\n      },\n      previousSha,\n    );\n\n  if (\n    pullRequest.requested_reviewers &&\n    pullRequest.requested_reviewers.length > 0\n  ) {\n    return createFailedStatusCheck(\n      `Awaiting review from: ${(\n        pullRequest.requested_reviewers as PullRequestWithDecentDataFromWebhook['requested_reviewers']\n      )\n        .filter(ExcludesFalsy)\n        .map((rr) => rr.login)\n        .join(', ')}`,\n    );\n  }\n\n  if (pullRequest.requested_teams && pullRequest.requested_teams.length > 0) {\n    return createFailedStatusCheck(\n      `Awaiting review from: ${(\n        pullRequest.requested_teams as PullRequestWithDecentDataFromWebhook['requested_teams']\n      )\n        .filter(ExcludesFalsy)\n        .map((rt) => rt.name)\n        .join(', ')}`,\n    );\n  }\n\n  if (repoContext.hasChangesRequestedReview(labels)) {\n    return createFailedStatusCheck(\n      'Changes requested ! Push commits or discuss changes then re-request a review.',\n    );\n  }\n\n  const needsReviewGroupNames = repoContext.getNeedsReviewGroupNames(labels);\n\n  if (needsReviewGroupNames.length > 0) {\n    return createFailedStatusCheck(\n      `Awaiting review from: ${needsReviewGroupNames.join(\n        ', ',\n      )}. Perhaps request someone ?`,\n    );\n  }\n\n  if (!repoContext.hasApprovesReview(labels)) {\n    if (repoContext.config.requiresReviewRequest) {\n      return createFailedStatusCheck(\n        'Awaiting review... Perhaps request someone ?',\n      );\n    }\n  }\n\n  // if (\n  //   repoContext.config.requiresReviewRequest &&\n  //   !repoContext.hasRequestedReview(labels)\n  // ) {\n  //   return  createFailedStatusCheck(\n  //     context,\n  //     pr,\n  //     'You need to request someone to review the PR',\n  //   );\n  //   return;\n  // }\n  // return  createInProgressStatusCheck(context);\n  // } else if (repoContext.hasApprovesReview(labels)) {\n  return addStatusCheck(\n    pullRequest,\n    context,\n    {\n      state: 'success',\n      description: '✓ PR ready to merge !',\n    },\n    previousSha,\n  );\n  // }\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { GroupLabels } from '../../../accountConfigs/types';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\nimport type {\n  PullRequestLabels,\n  PullRequestWithDecentData,\n} from '../utils/PullRequestData';\nimport { updateStatusCheckFromLabels } from './updateStatusCheckFromLabels';\n\nexport const updateReviewStatus = async <\n  E extends { repository: EventPayloads.PayloadRepository },\n  GroupNames extends string = any,\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewGroup: GroupNames,\n  {\n    add: labelsToAdd,\n    remove: labelsToRemove,\n  }: {\n    add?: (GroupLabels | false | undefined)[];\n    remove?: (GroupLabels | false | undefined)[];\n  },\n): Promise<PullRequestLabels> => {\n  context.log.debug(\n    {\n      reviewGroup,\n      labelsToAdd,\n      labelsToRemove,\n    },\n    'updateReviewStatus',\n  );\n\n  let prLabels: PullRequestLabels = pullRequest.labels || [];\n  if (!reviewGroup) return prLabels;\n\n  const newLabelNames = new Set<string>(\n    prLabels.map((label) => label.name).filter(ExcludesFalsy),\n  );\n\n  const toAdd = new Set<GroupLabels | string>();\n  const toAddNames = new Set<string>();\n  const toDelete = new Set<GroupLabels>();\n  const toDeleteNames = new Set<string>();\n  const labels = repoContext.labels;\n\n  const getLabelFromKey = (\n    key: GroupLabels,\n  ): undefined | PullRequestLabels[number] => {\n    const reviewConfig = repoContext.config.labels.review[reviewGroup];\n    if (!reviewConfig) return undefined;\n\n    return reviewConfig[key] && labels[reviewConfig[key]]\n      ? labels[reviewConfig[key]]\n      : undefined;\n  };\n\n  if (labelsToAdd) {\n    labelsToAdd.forEach((key) => {\n      if (!key) return;\n      const label = getLabelFromKey(key);\n      if (\n        !label ||\n        !label.name ||\n        prLabels.some((prLabel) => prLabel.id === label.id)\n      ) {\n        return;\n      }\n      newLabelNames.add(label.name);\n      toAdd.add(key);\n      toAddNames.add(label.name);\n    });\n  }\n\n  if (labelsToRemove) {\n    labelsToRemove.forEach((key) => {\n      if (!key) return;\n      const label = getLabelFromKey(key);\n      if (!label) return;\n      const existing = prLabels.find((prLabel) => prLabel.id === label.id);\n      if (existing && existing.name) {\n        newLabelNames.delete(existing.name);\n        toDelete.add(key);\n        toDeleteNames.add(existing.name);\n      }\n    });\n  }\n\n  // TODO move that elsewhere\n  if (pullRequest.user) {\n    repoContext.getTeamsForLogin(pullRequest.user.login).forEach((teamName) => {\n      const team = repoContext.config.teams[teamName];\n      if (team.labels) {\n        team.labels.forEach((labelKey) => {\n          const label = repoContext.labels[labelKey];\n          if (label && !prLabels.some((prLabel) => prLabel.id === label.id)) {\n            newLabelNames.add(label.name);\n            toAdd.add(labelKey);\n            toAddNames.add(label.name);\n          }\n        });\n      }\n    });\n  }\n\n  // if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return;\n\n  if (toAdd.size !== 0 || toDelete.size !== 0) {\n    if (toDelete.size === 0 || toDelete.size < 4) {\n      context.log.debug(\n        {\n          reviewGroup,\n          toAdd: [...toAdd],\n          toDelete: [...toDelete],\n          toAddNames: [...toAddNames],\n          toDeleteNames: [...toDeleteNames],\n        },\n        'updateReviewStatus',\n      );\n\n      if (toAdd.size !== 0) {\n        const result = await context.octokit.issues.addLabels(\n          context.issue({\n            labels: [...toAddNames],\n          }),\n        );\n        prLabels = result.data;\n      }\n\n      if (toDelete.size !== 0) {\n        for (const toDeleteName of [...toDeleteNames]) {\n          try {\n            const result = await context.octokit.issues.removeLabel(\n              context.issue({\n                name: toDeleteName,\n              }),\n            );\n            prLabels = result.data;\n          } catch (err) {\n            context.log.warn(\n              {\n                err: err?.message,\n              },\n              'error removing label',\n            );\n          }\n        }\n      }\n    } else {\n      const newLabelNamesArray = [...newLabelNames];\n\n      context.log.debug(\n        {\n          reviewGroup,\n          toAdd: [...toAdd],\n          toDelete: [...toDelete],\n          oldLabels: prLabels.map((l) => l.name),\n          newLabelNames: newLabelNamesArray,\n        },\n        'updateReviewStatus',\n      );\n\n      const result = await context.octokit.issues.setLabels(\n        context.issue({\n          labels: newLabelNamesArray as string[] & { name: string }[],\n        }),\n      );\n      prLabels = result.data;\n    }\n  }\n\n  // if (toAdd.has('needsReview')) {\n  //   createInProgressStatusCheck(context);\n  // } else if (\n  //   toDelete.has('needsReview') ||\n  //   (prLabels.length === 0 && toAdd.size === 1 && toAdd.has('approved'))\n  // ) {\n  await updateStatusCheckFromLabels(\n    pullRequest,\n    context,\n    repoContext,\n    prLabels,\n  );\n  // }\n\n  return prLabels;\n};\n","import type { Context } from 'probot';\nimport type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { RepoContext } from '../../../context/repoContext';\nimport { getKeys } from '../../../context/utils';\n\ntype ReviewState = 'CHANGES_REQUESTED' | 'APPROVED' | 'DISMISSED';\n\ninterface ReviewStates {\n  approved: number;\n  changesRequested: number;\n  dismissed: number;\n}\n\nexport type Reviewer = AccountInfo;\n\nexport const getReviewersAndReviewStates = async <GroupNames extends string>(\n  context: Context,\n  repoContext: RepoContext<GroupNames>,\n): Promise<{\n  reviewers: Reviewer[];\n  reviewStates: Record<GroupNames, ReviewStates>;\n}> => {\n  const userIds = new Set<number>();\n  const reviewers: Reviewer[] = [];\n  const reviewStatesByUser = new Map<number, ReviewState>();\n\n  await context.octokit.paginate(\n    context.octokit.pulls.listReviews,\n    context.pullRequest({ page: undefined }),\n    ({ data: reviews }) => {\n      reviews.forEach((review) => {\n        if (!review.user) return;\n        if (!userIds.has(review.user.id)) {\n          userIds.add(review.user.id);\n          reviewers.push({\n            id: review.user.id,\n            login: review.user.login,\n            type: review.user.type,\n          });\n        }\n        const state = review.state.toUpperCase();\n        if (state !== 'COMMENTED') {\n          reviewStatesByUser.set(review.user.id, state as ReviewState);\n        }\n      });\n\n      return [];\n    },\n  );\n\n  const reviewStates: Record<GroupNames, ReviewStates> = {} as Record<\n    GroupNames,\n    ReviewStates\n  >;\n\n  getKeys(repoContext.config.groups).forEach((groupName) => {\n    reviewStates[groupName] = {\n      approved: 0,\n      changesRequested: 0,\n      dismissed: 0,\n    };\n  });\n\n  reviewers.forEach((reviewer) => {\n    const group = repoContext.getReviewerGroup(reviewer.login);\n    if (group) {\n      const state = reviewStatesByUser.get(reviewer.id);\n      switch (state) {\n        case 'APPROVED':\n          reviewStates[group].approved++;\n          break;\n        case 'CHANGES_REQUESTED':\n          reviewStates[group].changesRequested++;\n          break;\n        case 'DISMISSED':\n          reviewStates[group].dismissed++;\n          break;\n      }\n    }\n  });\n\n  return { reviewers, reviewStates };\n};\n","import type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { PullRequestWithDecentDataFromWebhook } from './PullRequestData';\nimport type { Reviewer } from './getReviewersAndReviewStates';\n\nexport interface RequestedReviewers extends AccountInfo {\n  isRequestedByName: boolean;\n  requestedByTeams: string[];\n}\n\nexport function getRolesFromPullRequestAndReviewers(\n  pullRequest: PullRequestWithDecentDataFromWebhook,\n  reviewers: Reviewer[],\n): {\n  owner: PullRequestWithDecentDataFromWebhook['user'];\n  assignees: PullRequestWithDecentDataFromWebhook['assignees'];\n  reviewers: Reviewer[];\n  requestedReviewers: RequestedReviewers[];\n  followers: AccountInfo[];\n} {\n  const owner = pullRequest.user;\n  const assignees = pullRequest.assignees;\n  const assigneeIds = assignees.map((a) => a.id);\n\n  const followers = reviewers.filter((user) => !assigneeIds.includes(user.id));\n  const requestedReviewers: RequestedReviewers[] =\n    pullRequest.requested_reviewers.map((rr) => ({\n      ...rr,\n      isRequestedByName: true,\n      requestedByTeams: [],\n    }));\n\n  if (pullRequest.requested_teams) {\n    // TODO\n    // requestedReviewers.push ...\n  }\n\n  if (requestedReviewers) {\n    followers.push(\n      ...requestedReviewers.filter((rr) => {\n        return (\n          !followers.some((f) => f.id === rr.id) && !assigneeIds.includes(rr.id)\n        );\n      }),\n    );\n  }\n\n  return {\n    owner,\n    assignees,\n    reviewers,\n    requestedReviewers,\n    followers,\n  };\n}\n","import type { Probot } from 'probot';\nimport type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { parseOptions } from './actions/utils/body/parseBody';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { getRolesFromPullRequestAndReviewers } from './utils/getRolesFromPullRequestAndReviewers';\n\nexport default function closed(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.closed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (pullRequest, context, repoContext, reviewflowPrContext) => {\n        /* if repo is not ignored */\n        if (reviewflowPrContext) {\n          /* update status, update automerge queue, delete branch */\n          const repo = context.payload.repository;\n\n          if (pullRequest.merged) {\n            const isNotFork = pullRequest.head.repo.id === repo.id;\n            const options = parseOptions(\n              reviewflowPrContext.commentBody,\n              repoContext.config.prDefaultOptions,\n            );\n\n            await Promise.all([\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pullRequest.number,\n                'pr closed',\n              ),\n              isNotFork && options.deleteAfterMerge\n                ? context.octokit.git\n                    .deleteRef(\n                      context.repo({ ref: `heads/${pullRequest.head.ref}` }),\n                    )\n                    .catch(() => {})\n                : undefined,\n            ]);\n          } else {\n            await Promise.all([\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pullRequest.number,\n                'pr closed',\n              ),\n              updateReviewStatus(pullRequest, context, repoContext, 'dev', {\n                remove: ['needsReview'],\n              }),\n            ]);\n          }\n        }\n\n        /* update slack home */\n        if (pullRequest.requested_reviewers) {\n          pullRequest.requested_reviewers.forEach((requestedReviewer) => {\n            repoContext.slack.updateHome(requestedReviewer.login);\n          });\n        }\n\n        if (pullRequest.requested_teams) {\n          await Promise.all(\n            pullRequest.requested_teams.map(async (team) => {\n              const members = await repoContext.getMembersForTeam(team.id);\n              members.forEach((member) => {\n                repoContext.slack.updateHome(member.login);\n              });\n            }),\n          );\n        }\n\n        if (pullRequest.assignees) {\n          pullRequest.assignees.forEach((assignee) => {\n            repoContext.slack.updateHome(assignee.login);\n          });\n        }\n\n        /* send notifications to assignees and followers */\n        const { reviewers } = await getReviewersAndReviewStates(\n          context,\n          repoContext,\n        );\n        const { owner, assignees, followers } =\n          getRolesFromPullRequestAndReviewers(pullRequest, reviewers);\n\n        const senderMention = repoContext.slack.mention(\n          context.payload.sender.login,\n        );\n        const ownerMention = repoContext.slack.mention(owner.login);\n        const prLink = slackUtils.createPrLink(pullRequest, repoContext);\n\n        const createMessage = (to: AccountInfo): string => {\n          const ownerPart = slackUtils.createOwnerPart(\n            ownerMention,\n            pullRequest,\n            to,\n          );\n\n          return `${\n            pullRequest.merged\n              ? `:rocket: ${senderMention} merged`\n              : `:wastebasket: ${senderMention} closed`\n          } ${ownerPart} ${prLink}\\n> ${pullRequest.title}`;\n        };\n\n        assignees.map((assignee) => {\n          if (context.payload.sender.id === assignee.id) return;\n          return repoContext.slack.postMessage('pr-lifecycle', assignee, {\n            text: createMessage(assignee),\n          });\n        });\n\n        followers.map((follower) => {\n          if (context.payload.sender.id === follower.id) return;\n          return repoContext.slack.postMessage(\n            'pr-lifecycle-follow',\n            follower,\n            {\n              text: createMessage(follower),\n            },\n          );\n        });\n      },\n    ),\n  );\n}\n","import type { KnownBlock } from '@slack/web-api';\nimport type { SlackMessage } from '../../../context/slack/SlackMessage';\n\nexport const createMrkdwnSectionBlock = (text: string): KnownBlock => ({\n  type: 'section',\n  text: {\n    type: 'mrkdwn',\n    text,\n  },\n});\n\nexport const createSlackMessageWithSecondaryBlock = (\n  message: string,\n  secondaryBlockText?: string | null,\n): SlackMessage => {\n  return {\n    text: message,\n    blocks: [\n      {\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: message,\n        },\n      },\n    ],\n    secondaryBlocks: !secondaryBlockText\n      ? undefined\n      : [createMrkdwnSectionBlock(secondaryBlockText)],\n  };\n};\n","import type { EventPayloads } from '@octokit/webhooks';\n\ntype WebhookPr =\n  | EventPayloads.WebhookPayloadPullRequest['pull_request']\n  | EventPayloads.WebhookPayloadPullRequestReviewPullRequest;\n\ntype PullRequestHandlerAllowedPayloads =\n  | {\n      repository: EventPayloads.PayloadRepository;\n      pull_request: WebhookPr;\n    }\n  | {\n      repository: EventPayloads.PayloadRepository;\n      issue: EventPayloads.WebhookPayloadIssueCommentIssue;\n    };\n\nexport type PullRequestFromPayload<\n  T extends PullRequestHandlerAllowedPayloads,\n> = T extends { pull_request: WebhookPr }\n  ? T['pull_request']\n  : T extends { issue: EventPayloads.WebhookPayloadIssueCommentIssue }\n  ? T['issue'] /* & T['issue']['pull_request'] */\n  : never;\n\n/** deprecated */\nexport const getPullRequestFromPayload = <\n  T extends PullRequestHandlerAllowedPayloads,\n>(\n  payload: T,\n): PullRequestFromPayload<T> => {\n  const pullRequest: WebhookPr = (payload as any).pull_request;\n  if (pullRequest) {\n    return pullRequest as PullRequestFromPayload<T>;\n  }\n\n  const issue = (payload as any).issue;\n  if (issue?.pull_request) {\n    return {\n      ...issue,\n      ...issue.pull_request,\n    };\n  }\n\n  throw new Error('No pull_request in payload');\n};\n","import issueParser from 'issue-parser';\n\nconst parse = issueParser('github', { actions: {}, issuePrefixes: [] });\n\nexport const parseMentions = (body: string): readonly string[] => {\n  return parse(body).mentions.map((m) => m.user);\n};\n","import slackifyMarkdown from 'slackify-markdown';\n\nexport const slackifyCommentBody = (\n  body: string,\n  multipleLines: boolean,\n): string => {\n  return slackifyMarkdown(\n    body\n      .replace('```suggestion', '_Suggested change:_\\n```suggestion')\n      .replace(\n        '```suggestion\\r\\n```',\n        `_Suggestion to remove line${multipleLines ? 's' : ''}._\\n`,\n      ),\n  );\n};\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot, Context } from 'probot';\nimport type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { AppContext } from '../../context/AppContext';\nimport type { SlackMessage } from '../../context/slack/SlackMessage';\nimport type { PostSlackMessageResult } from '../../context/slack/TeamSlack';\nimport type { AccountEmbed } from '../../mongo';\nimport * as slackUtils from '../../slack/utils';\nimport { ExcludesFalsy, ExcludesNullish } from '../../utils/Excludes';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { createSlackMessageWithSecondaryBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport { fetchPr } from './utils/fetchPr';\nimport type { PullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { getPullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { checkIfUserIsBot, checkIfIsThisBot } from './utils/isBotUser';\nimport { parseMentions } from './utils/parseMentions';\nimport { slackifyCommentBody } from './utils/slackifyCommentBody';\n\nconst getDiscussion = async (\n  context: Context,\n  comment: any,\n): Promise<\n  RestEndpointMethodTypes['pulls']['listReviewComments']['response']['data']\n> => {\n  if (!comment.in_reply_to_id) return [comment];\n  return context.octokit.paginate(\n    context.octokit.pulls.listReviewComments,\n    context.pullRequest() as any,\n    ({ data }) => {\n      return data.filter(\n        (c) =>\n          c.in_reply_to_id === comment.in_reply_to_id ||\n          c.id === comment.in_reply_to_id,\n      );\n    },\n  );\n};\n\nconst getMentions = (\n  discussion: RestEndpointMethodTypes['pulls']['listReviewComments']['response']['data'],\n): string[] => {\n  const mentions = new Set<string>();\n\n  discussion.forEach((c) => {\n    parseMentions(c.body).forEach((m) => mentions.add(m));\n  });\n\n  return [...mentions];\n};\n\nconst getUsersInThread = (\n  discussion: RestEndpointMethodTypes['pulls']['listReviewComments']['response']['data'],\n): AccountInfo[] => {\n  const userIds = new Set<number>();\n  const users: AccountInfo[] = [];\n\n  discussion.forEach((c) => {\n    if (!c.user || userIds.has(c.user.id)) return;\n    userIds.add(c.user.id);\n    users.push({ id: c.user.id, login: c.user.login, type: c.user.type });\n  });\n\n  return users;\n};\n\nexport default function prCommentCreated(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  const saveInDb = async (\n    type: 'review-comment' | 'issue-comment',\n    commentId: number,\n    accountEmbed: AccountEmbed,\n    results: PostSlackMessageResult[],\n    message: SlackMessage,\n  ): Promise<void> => {\n    const filtered = results.filter(ExcludesNullish);\n    if (filtered.length === 0) return;\n\n    await appContext.mongoStores.slackSentMessages.insertOne({\n      type,\n      typeId: commentId,\n      message,\n      account: accountEmbed,\n      sentTo: filtered,\n    });\n  };\n\n  app.on(\n    [\n      'pull_request_review_comment.created',\n      // comments without review and without path are sent with issue_comment.created.\n      // createHandlerPullRequestChange checks if pull_request event is present, removing real issues comments.\n      'issue_comment.created',\n    ],\n    createPullRequestHandler<\n      | EventPayloads.WebhookPayloadPullRequestReviewComment\n      | EventPayloads.WebhookPayloadIssueComment,\n      | PullRequestFromPayload<\n          | EventPayloads.WebhookPayloadPullRequestReviewComment\n          | EventPayloads.WebhookPayloadIssueComment\n        >\n      | any\n    >(\n      appContext,\n      (payload, context) => {\n        if (checkIfIsThisBot(payload.comment.user)) {\n          // ignore comments from this bot\n          return null;\n        }\n        return getPullRequestFromPayload(payload);\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const pr = await fetchPr(context, pullRequest.number);\n        const prUser = pr.user;\n        if (!prUser) return;\n        const { comment } = context.payload;\n        const type = (comment as any).pull_request_review_id\n          ? 'review-comment'\n          : 'issue-comment';\n\n        const body = comment.body;\n        if (!body) return;\n\n        const commentByOwner = prUser.login === comment.user.login;\n        const [discussion, { reviewers }] = await Promise.all([\n          getDiscussion(context, comment),\n          getReviewersAndReviewStates(context, repoContext),\n        ]);\n\n        const followers: AccountInfo[] = reviewers.filter(\n          (u) => u.id !== prUser.id && u.id !== comment.user.id,\n        );\n\n        if (pr.requested_reviewers) {\n          followers.push(\n            ...pr.requested_reviewers\n              .filter((rr) => {\n                return (\n                  rr &&\n                  !followers.some((f) => f.id === rr.id) &&\n                  rr.id !== (comment.user && comment.user.id) &&\n                  rr.id !== prUser.id\n                );\n              })\n              .filter(ExcludesFalsy)\n              .map<AccountInfo>((rr) => ({\n                id: rr.id,\n                login: rr.login,\n                type: rr.type,\n              })),\n          );\n        }\n\n        const usersInThread = getUsersInThread(discussion).filter(\n          (u) =>\n            u.id !== prUser.id &&\n            u.id !== comment.user.id &&\n            !followers.some((f) => f.id === u.id),\n        );\n        const mentions = getMentions(discussion).filter(\n          (m) =>\n            m !== prUser.login &&\n            m !== comment.user.login &&\n            !followers.some((f) => f.login === m) &&\n            !usersInThread.some((u) => u.login === m),\n        );\n\n        const mention = repoContext.slack.mention(comment.user.login);\n        const prUrl = slackUtils.createPrLink(pr, repoContext);\n        const ownerMention = repoContext.slack.mention(prUser.login);\n        const commentLink = slackUtils.createLink(\n          comment.html_url,\n          (comment as any).in_reply_to_id ? 'replied' : 'commented',\n        );\n\n        const createMessage = (toOwner?: boolean): string => {\n          const ownerPart = toOwner\n            ? 'your PR'\n            : `${\n                (prUser && prUser.id) === comment.user.id\n                  ? 'his'\n                  : `${ownerMention}'s`\n              } PR`;\n          return `:speech_balloon: ${mention} ${commentLink} on ${ownerPart} ${prUrl}`;\n        };\n\n        const promisesOwner = [];\n        const promisesNotOwner = [];\n        const slackifiedBody = slackifyCommentBody(\n          comment.body,\n          (comment as any).start_line !== null,\n        );\n        const isBotUser = checkIfUserIsBot(repoContext, comment.user);\n\n        if (!commentByOwner) {\n          const slackMessage = createSlackMessageWithSecondaryBlock(\n            createMessage(true),\n            slackifiedBody,\n          );\n\n          promisesOwner.push(\n            repoContext.slack\n              .postMessage(\n                isBotUser ? 'pr-comment-bots' : 'pr-comment',\n                prUser,\n                slackMessage,\n              )\n              .then((res) =>\n                saveInDb(\n                  type,\n                  comment.id,\n                  repoContext.accountEmbed,\n                  [res],\n                  slackMessage,\n                ),\n              ),\n          );\n        }\n\n        const message = createSlackMessageWithSecondaryBlock(\n          createMessage(false),\n          slackifiedBody,\n        );\n\n        promisesNotOwner.push(\n          ...followers.map((follower) =>\n            repoContext.slack.postMessage(\n              isBotUser ? 'pr-comment-follow-bots' : 'pr-comment-follow',\n              follower,\n              message,\n            ),\n          ),\n          ...usersInThread.map((user) =>\n            repoContext.slack.postMessage('pr-comment-thread', user, message),\n          ),\n        );\n\n        if (mentions.length > 0) {\n          await appContext.mongoStores.users\n            .findAll({ login: { $in: mentions } })\n            .then((users) => {\n              promisesNotOwner.push(\n                ...users.map((u) =>\n                  repoContext.slack.postMessage(\n                    'pr-comment-mention',\n                    { id: u._id, login: u.login, type: u.type },\n                    message,\n                  ),\n                ),\n              );\n            });\n        }\n\n        await Promise.all([\n          Promise.all(promisesOwner),\n          Promise.all(promisesNotOwner).then((results) =>\n            saveInDb(\n              type,\n              comment.id,\n              repoContext.accountEmbed,\n              results,\n              message,\n            ),\n          ),\n        ]);\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport type { Options } from './utils/body/prOptions';\nimport { updateCommentOptions } from './utils/body/updateBody';\n\nconst updatePrCommentBody = async <\n  E extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  context: Context<E>,\n  reviewflowPrContext: ReviewflowPrContext,\n  newBody: string,\n): Promise<void> => {\n  await context.octokit.issues.updateComment(\n    context.repo({\n      comment_id: reviewflowPrContext.reviewflowPr.commentId,\n      body: newBody,\n    }),\n  );\n  reviewflowPrContext.commentBody = newBody;\n};\n\nexport const updatePrCommentBodyIfNeeded = async <\n  E extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  context: Context<E>,\n  reviewflowPrContext: ReviewflowPrContext,\n  newBody: string,\n): Promise<void> => {\n  if (reviewflowPrContext.commentBody !== newBody) {\n    await updatePrCommentBody(context, reviewflowPrContext, newBody);\n  }\n};\n\nexport const updatePrCommentBodyOptions = async <\n  E extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  updateOptions: Partial<Options>,\n): Promise<void> => {\n  const { commentBody: newBody } = updateCommentOptions(\n    context.payload.repository.html_url,\n    repoContext.config.labels.list,\n    reviewflowPrContext.commentBody,\n    repoContext.config.prDefaultOptions,\n    updateOptions,\n  );\n\n  await updatePrCommentBodyIfNeeded(context, reviewflowPrContext, newBody);\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { PullRequestWithDecentData } from 'events/pr-handlers/utils/PullRequestData';\nimport type { LabelResponse } from '../../../../context/initRepoLabels';\nimport hasLabelInPR from './hasLabelInPR';\n\ninterface SyncLabelOptions {\n  onRemove?: () => void | Promise<void>;\n  onAdd?: (prLabels: LabelResponse[]) => void | Promise<void>;\n}\n\nexport default async function syncLabel<\n  T extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<T>,\n  shouldHaveLabel: boolean,\n  label: LabelResponse,\n  prHasLabel = hasLabelInPR(pullRequest.labels, label),\n  { onRemove, onAdd }: SyncLabelOptions = {},\n): Promise<void> {\n  if (prHasLabel && !shouldHaveLabel) {\n    await context.octokit.issues.removeLabel(\n      context.issue({ name: label.name }),\n    );\n    if (onRemove) await onRemove();\n  }\n  if (shouldHaveLabel && !prHasLabel) {\n    const response = await context.octokit.issues.addLabels(\n      context.issue({ labels: [label.name] }),\n    );\n    if (onAdd) await onAdd(response.data);\n  }\n}\n","import type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type {\n  PullRequestFromRestEndpoint,\n  PullRequestWithDecentData,\n} from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { autoMergeIfPossible } from './autoMergeIfPossible';\nimport { updatePrCommentBodyIfNeeded } from './updatePrCommentBody';\nimport type { Options } from './utils/body/prOptions';\nimport { updateCommentOptions } from './utils/body/updateBody';\nimport hasLabelInPR from './utils/hasLabelInPR';\nimport syncLabel from './utils/syncLabel';\n\nexport const calcDefaultOptions = (\n  repoContext: RepoContext,\n  pullRequest: PullRequestWithDecentData,\n): Options => {\n  const automergeLabel = repoContext.labels['merge/automerge'];\n  const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n  const prHasSkipCiLabel = hasLabelInPR(pullRequest.labels, skipCiLabel);\n  const prHasAutoMergeLabel = hasLabelInPR(pullRequest.labels, automergeLabel);\n\n  return {\n    ...repoContext.config.prDefaultOptions,\n    autoMergeWithSkipCi: prHasSkipCiLabel,\n    autoMerge: prHasAutoMergeLabel,\n  };\n};\n\nexport const syncLabelsAfterCommentBodyEdited = async (\n  pullRequest: PullRequestFromRestEndpoint,\n  context: Context<any>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n): Promise<void> => {\n  const automergeLabel = repoContext.labels['merge/automerge'];\n  const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n  const prHasSkipCiLabel = hasLabelInPR(pullRequest.labels, skipCiLabel);\n  const prHasAutoMergeLabel = hasLabelInPR(pullRequest.labels, automergeLabel);\n\n  const { commentBody, options } = updateCommentOptions(\n    context.payload.repository.html_url,\n    repoContext.config.labels.list,\n    reviewflowPrContext.commentBody,\n    calcDefaultOptions(repoContext, pullRequest),\n  );\n\n  await updatePrCommentBodyIfNeeded(context, reviewflowPrContext, commentBody);\n\n  if (options && automergeLabel) {\n    await Promise.all([\n      skipCiLabel &&\n        syncLabel(\n          pullRequest,\n          context,\n          options.autoMergeWithSkipCi,\n          skipCiLabel,\n          prHasSkipCiLabel,\n        ),\n      automergeLabel &&\n        syncLabel(\n          pullRequest,\n          context,\n          options.autoMerge,\n          automergeLabel,\n          prHasAutoMergeLabel,\n          {\n            onAdd: async (prLabels) => {\n              await autoMergeIfPossible(\n                pullRequest,\n                context,\n                repoContext,\n                reviewflowPrContext,\n                prLabels,\n              );\n            },\n            onRemove: () => {\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pullRequest.number,\n                'label removed',\n              );\n            },\n          },\n        ),\n    ]);\n  }\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { syncLabelsAfterCommentBodyEdited } from './actions/syncLabelsAfterCommentBodyEdited';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { createMrkdwnSectionBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport { fetchPr } from './utils/fetchPr';\nimport type { PullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { getPullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { checkIfIsThisBot } from './utils/isBotUser';\nimport { slackifyCommentBody } from './utils/slackifyCommentBody';\n\nexport default function prCommentEditedOrDeleted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    [\n      'pull_request_review_comment.edited',\n      'pull_request_review_comment.deleted',\n      // comments without review and without path are sent with issue_comment.created.\n      // createHandlerPullRequestChange checks if pull_request event is present, removing real issues comments.\n      'issue_comment.edited',\n      'issue_comment.deleted',\n    ],\n    createPullRequestHandler<\n      | EventPayloads.WebhookPayloadPullRequestReviewComment\n      | EventPayloads.WebhookPayloadIssueComment,\n      | PullRequestFromPayload<\n          | EventPayloads.WebhookPayloadPullRequestReviewComment\n          | EventPayloads.WebhookPayloadIssueComment\n        >\n      | any\n    >(\n      appContext,\n      (payload) => {\n        if (checkIfIsThisBot(payload.sender)) {\n          // ignore edits made from this bot\n          return null;\n        }\n        return getPullRequestFromPayload(payload);\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const { comment } = context.payload;\n\n        if (\n          reviewflowPrContext !== null &&\n          context.payload.action === 'edited' &&\n          checkIfIsThisBot(comment.user)\n        ) {\n          const updatedPr = await fetchPr(context, pullRequest.number);\n          if (!updatedPr.closed_at) {\n            await syncLabelsAfterCommentBodyEdited(\n              updatedPr,\n              context,\n              repoContext,\n              reviewflowPrContext,\n            );\n          }\n          return;\n        }\n\n        const type = (comment as any).pull_request_review_id\n          ? 'review-comment'\n          : 'issue-comment';\n\n        const criteria = {\n          'account.id': repoContext.accountEmbed.id,\n          'account.type': repoContext.accountEmbed.type,\n          type,\n          typeId: comment.id,\n        };\n\n        const sentMessages =\n          await appContext.mongoStores.slackSentMessages.findAll(criteria);\n\n        if (sentMessages.length === 0) return;\n\n        if (context.payload.action === 'deleted') {\n          await Promise.all([\n            Promise.all(\n              sentMessages.map((sentMessage) =>\n                Promise.all(\n                  sentMessage.sentTo.map((sentTo) =>\n                    repoContext.slack.deleteMessage(\n                      sentMessage.account,\n                      sentTo.ts,\n                      sentTo.channel,\n                    ),\n                  ),\n                ),\n              ),\n            ),\n            appContext.mongoStores.slackSentMessages.deleteMany(criteria),\n          ]);\n        } else {\n          const secondaryBlocks = [\n            createMrkdwnSectionBlock(\n              slackifyCommentBody(\n                comment.body,\n                (comment as any).start_line !== null,\n              ),\n            ),\n          ];\n\n          await Promise.all([\n            Promise.all(\n              sentMessages.map((sentMessage) =>\n                Promise.all(\n                  sentMessage.sentTo.map((sentTo) =>\n                    repoContext.slack.updateMessage(\n                      sentMessage.account,\n                      sentTo.ts,\n                      sentTo.channel,\n                      {\n                        ...sentMessage.message,\n                        secondaryBlocks,\n                      },\n                    ),\n                  ),\n                ),\n              ),\n            ),\n            appContext.mongoStores.slackSentMessages.partialUpdateMany(\n              criteria,\n              { $set: { 'message.secondaryBlocks': secondaryBlocks } },\n            ),\n          ]);\n        }\n      },\n    ),\n  );\n}\n","import parse from '@commitlint/parse';\nimport type { CommitNote } from '@commitlint/types';\nimport type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { updatePrCommentBodyIfNeeded } from './updatePrCommentBody';\nimport { updateCommentBodyCommitsNotes } from './utils/body/updateBody';\nimport { readPullRequestCommits } from './utils/readPullRequestCommits';\nimport syncLabel from './utils/syncLabel';\n\ninterface BreakingChangesCommits {\n  commit: RestEndpointMethodTypes['pulls']['listCommits']['response']['data'][number];\n  breakingChangesNotes: CommitNote[];\n}\n\nexport const readCommitsAndUpdateInfos = async <\n  E extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  commentBody = reviewflowPrContext.commentBody,\n): Promise<void> => {\n  // tmp.data[0].sha\n  // tmp.data[0].commit.message\n\n  const commits = await readPullRequestCommits(context);\n\n  const conventionalCommits = await Promise.all(\n    commits.map((c) => parse(c.commit.message)),\n  );\n\n  const breakingChangesCommits: BreakingChangesCommits[] = [];\n  conventionalCommits.forEach((c, index) => {\n    const breakingChangesNotes = c.notes.filter(\n      (note) => note.title === 'BREAKING CHANGE',\n    );\n    if (breakingChangesNotes.length > 0) {\n      breakingChangesCommits.push({\n        commit: commits[index],\n        breakingChangesNotes,\n      });\n    }\n  });\n\n  const breakingChangesLabel = repoContext.labels['breaking-changes'];\n  const newCommentBody = updateCommentBodyCommitsNotes(\n    commentBody,\n    breakingChangesCommits.length === 0\n      ? ''\n      : `Breaking Changes:\\n${breakingChangesCommits\n          .map(({ commit, breakingChangesNotes }) =>\n            breakingChangesNotes.map(\n              (note) => `- ${note.text.replace('\\n', ' ')} (${commit.sha})`,\n            ),\n          )\n          .join('')}`,\n  );\n\n  await Promise.all([\n    syncLabel(\n      pullRequest,\n      context,\n      breakingChangesCommits.length > 0,\n      breakingChangesLabel,\n    ),\n    updatePrCommentBodyIfNeeded(context, reviewflowPrContext, newCommentBody),\n  ]);\n\n  // TODO auto update ! in front of : to signal a breaking change when https://github.com/conventional-changelog/commitlint/issues/658 is closed\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\n\ninterface UpdatePr {\n  title?: string;\n  body?: string;\n}\n\nconst cleanNewLines = (text: string | null): string =>\n  !text ? '' : text.replace(/\\r\\n/g, '\\n');\nconst checkIfHasDiff = (text1: string | null, text2: string): boolean =>\n  cleanNewLines(text1) !== cleanNewLines(text2);\n\nexport const updatePrIfNeeded = async <\n  E extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  update: UpdatePr,\n): Promise<void> => {\n  const hasDiffInTitle = update.title && pullRequest.title !== update.title;\n  const hasDiffInBody =\n    update.body && checkIfHasDiff(pullRequest.body, update.body);\n\n  if (hasDiffInTitle || hasDiffInBody) {\n    const diff: Partial<Record<'title' | 'body', string>> = {};\n    if (hasDiffInTitle) {\n      diff.title = update.title;\n      pullRequest.title = update.title!;\n    }\n    if (hasDiffInBody) {\n      diff.body = update.body;\n      pullRequest.body = update.body!;\n    }\n\n    await context.octokit.pulls.update(\n      context.repo({\n        pull_number: pullRequest.number,\n        ...diff,\n      }),\n    );\n  }\n};\n","export const cleanTitle = (title: string): string =>\n  title\n    .trim()\n    .replace(\n      /[\\s-]+\\[?\\s*([A-Za-z][\\dA-Za-z]+)[ -](\\d+)\\s*]?\\s*$/,\n      (s, arg1, arg2) => ` ${arg1.toUpperCase()}-${arg2}`,\n    )\n    .replace(/^([A-Za-z]+)[/:]\\s*/, (s, arg1) => `${arg1.toLowerCase()}: `)\n    .replace(/^Revert \"([^\"]+)\"$/, 'revert: $1')\n    .replace(/\\s+[[\\]]\\s*no\\s*issue\\s*[[\\]]$/i, ' [no issue]')\n    .replace(/^(revert:.*)(\\s+\\(#\\d+\\))$/, '$1');\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { StatusInfo } from '../../../accountConfigs/types';\nimport { getKeys } from '../../../context/utils';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { checkIfUserIsBot } from '../utils/isBotUser';\nimport { readCommitsAndUpdateInfos } from './readCommitsAndUpdateInfos';\nimport { calcDefaultOptions } from './syncLabelsAfterCommentBodyEdited';\nimport { updatePrIfNeeded } from './updatePr';\nimport { updatePrCommentBodyIfNeeded } from './updatePrCommentBody';\nimport {\n  updateCommentBodyInfos,\n  defaultCommentBody,\n  createCommentBody,\n  removeDeprecatedReviewflowInPrBody,\n} from './utils/body/updateBody';\nimport { cleanTitle } from './utils/cleanTitle';\nimport createStatus from './utils/createStatus';\n\ninterface Status {\n  name: string;\n  status: StatusInfo;\n}\n\nexport const editOpenedPR = async <\n  E extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  shouldUpdateCommentBodyInfos: boolean,\n  previousSha?: string,\n): Promise<void> => {\n  const title = repoContext.config.trimTitle\n    ? cleanTitle(pullRequest.title)\n    : pullRequest.title;\n\n  const parsePRValue = {\n    title,\n    head: pullRequest.head.ref,\n    base: pullRequest.base.ref,\n  };\n\n  const isPrFromBot = !pullRequest.user\n    ? false\n    : checkIfUserIsBot(repoContext, pullRequest.user);\n\n  const statuses: Status[] = [];\n  let errorStatus: StatusInfo | undefined;\n\n  getKeys(repoContext.config.parsePR).forEach((parsePRKey) => {\n    const rules = repoContext.config.parsePR[parsePRKey];\n    if (!rules) return;\n\n    const value = parsePRValue[parsePRKey];\n    rules.forEach((rule) => {\n      if (rule.bot === false && isPrFromBot) return;\n\n      const match = rule.regExp.exec(value);\n      const status = rule.createStatusInfo(match, parsePRValue, isPrFromBot);\n\n      if (status !== null) {\n        if (rule.status) {\n          statuses.push({ name: rule.status, status });\n        } else if (status.type === 'failure') {\n          if (!errorStatus) {\n            errorStatus = status;\n          }\n        }\n      }\n    });\n  });\n\n  const date = new Date().toISOString();\n\n  const hasLintPrCheck = (\n    await context.octokit.checks.listForRef(\n      context.repo({\n        ref: pullRequest.head.sha,\n      }),\n    )\n  ).data.check_runs.find(\n    (check): boolean => check.name === `${process.env.REVIEWFLOW_NAME}/lint-pr`,\n  );\n\n  const promises: Promise<unknown>[] = [\n    ...statuses.map(\n      ({ name, status }): Promise<void> =>\n        createStatus(\n          context,\n          name,\n          pullRequest.head.sha,\n          status.type,\n          status.title,\n          status.url,\n        ),\n    ),\n    ...(previousSha\n      ? statuses\n          .filter(({ status }) => status.type === 'failure')\n          .map(({ name }): Promise<void> | undefined =>\n            createStatus(\n              context,\n              name,\n              previousSha,\n              'success',\n              'New commits have been pushed',\n            ),\n          )\n      : []),\n    hasLintPrCheck &&\n      context.octokit.checks.create(\n        context.repo({\n          name: `${process.env.REVIEWFLOW_NAME}/lint-pr`,\n          head_sha: pullRequest.head.sha,\n          status: 'completed',\n          conclusion: errorStatus ? 'failure' : 'success',\n          started_at: date,\n          completed_at: date,\n          output: errorStatus\n            ? {\n                title: errorStatus.title,\n                summary: errorStatus.summary,\n              }\n            : {\n                title: '✓ PR is valid',\n                summary: '',\n              },\n        }),\n      ),\n    !hasLintPrCheck && previousSha && errorStatus\n      ? createStatus(\n          context,\n          'lint-pr',\n          previousSha,\n          'success',\n          'New commits have been pushed',\n        )\n      : undefined,\n    !hasLintPrCheck &&\n      createStatus(\n        context,\n        'lint-pr',\n        pullRequest.head.sha,\n        errorStatus ? 'failure' : 'success',\n        errorStatus ? errorStatus.title : '✓ PR is valid',\n        errorStatus ? errorStatus.url : undefined,\n      ),\n  ].filter(ExcludesFalsy);\n\n  const body = removeDeprecatedReviewflowInPrBody(pullRequest.body);\n  promises.push(updatePrIfNeeded(pullRequest, context, { title, body }));\n\n  const commentBodyInfos: StatusInfo[] = statuses\n    .filter((status) => status.status.inBody)\n    .map((status) => status.status);\n\n  if (\n    // not a bot\n    !isPrFromBot &&\n    // should not happen, but ts needs it\n    pullRequest.user?.login &&\n    // belongs to the organization\n    repoContext.getReviewerGroup(pullRequest.user.login) &&\n    // has not connected its slack account yet\n    repoContext.slack.shouldShowLoginMessage(pullRequest.user.login)\n  ) {\n    commentBodyInfos.push({\n      type: 'failure',\n      title: `@${pullRequest.user.login} Connect your account to Slack to get notifications for your PRs !`,\n      url: `${process.env.REVIEWFLOW_APP_URL}/org/${context.payload.repository.owner.login}`,\n      summary: '',\n    });\n  }\n\n  const shouldCreateCommentBody =\n    reviewflowPrContext.commentBody === defaultCommentBody;\n\n  const newBody = shouldCreateCommentBody\n    ? createCommentBody(\n        context.payload.repository.html_url,\n        repoContext.config.labels.list,\n        calcDefaultOptions(repoContext, pullRequest),\n        commentBodyInfos,\n      )\n    : updateCommentBodyInfos(reviewflowPrContext.commentBody, commentBodyInfos);\n\n  if (shouldCreateCommentBody || shouldUpdateCommentBodyInfos) {\n    promises.push(\n      readCommitsAndUpdateInfos(\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n        newBody,\n      ),\n    );\n  } else {\n    promises.push(\n      updatePrCommentBodyIfNeeded(context, reviewflowPrContext, newBody),\n    );\n  }\n\n  await Promise.all(promises);\n};\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\nimport { checkIfIsThisBot } from './utils/isBotUser';\n\nexport default function edited(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.edited',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        if (reviewflowPrContext == null) return;\n\n        const sender = context.payload.sender;\n        if (checkIfIsThisBot(sender)) {\n          return;\n        }\n\n        const updatedPullRequest = await fetchPr(\n          context,\n          context.payload.pull_request.number,\n        );\n\n        await editOpenedPR(\n          updatedPullRequest,\n          context,\n          repoContext,\n          reviewflowPrContext,\n          false,\n        );\n        await autoMergeIfPossible(\n          updatedPullRequest,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { updateBranch } from './actions/updateBranch';\nimport { updatePrCommentBodyOptions } from './actions/updatePrCommentBody';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { updateStatusCheckFromLabels } from './actions/updateStatusCheckFromLabels';\nimport hasLabelInPR from './actions/utils/hasLabelInPR';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nconst isFromRenovate = (\n  payload: EventPayloads.WebhookPayloadPullRequest,\n): boolean => {\n  const sender = payload.sender;\n  return (\n    sender.type === 'Bot' &&\n    sender.login === 'renovate[bot]' &&\n    payload.pull_request.head.ref.startsWith('renovate/')\n  );\n};\n\nexport default function labelsChanged(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    ['pull_request.labeled', 'pull_request.unlabeled'],\n    createPullRequestHandler<\n      EventPayloads.WebhookPayloadPullRequest,\n      EventPayloads.WebhookPayloadPullRequest['pull_request']\n    >(\n      appContext,\n      (payload, context, repoContext) => {\n        if (payload.sender.type === 'Bot' && !isFromRenovate(payload)) {\n          return null;\n        }\n\n        if (repoContext.shouldIgnore) return null;\n\n        return payload.pull_request;\n      },\n      async (pullRequest, context, repoContext, reviewflowPrContext) => {\n        if (reviewflowPrContext === null) return;\n\n        const fromRenovate = isFromRenovate(context.payload);\n        const updatedPr = await fetchPr(context, pullRequest.number);\n\n        const label = (context.payload as any).label;\n        if (fromRenovate) {\n          const codeApprovedLabel = repoContext.labels['code/approved'];\n          const codeNeedsReviewLabel = repoContext.labels['code/needs-review'];\n          const autoMergeLabel = repoContext.labels['merge/automerge'];\n          const autoMergeSkipCiLabel = repoContext.labels['merge/skip-ci'];\n          if (context.payload.action === 'labeled') {\n            if (codeApprovedLabel && label.id === codeApprovedLabel.id) {\n              // const { data: reviews } = await context.octokit.pulls.listReviews(\n              //   context.pullRequest({ per_page: 1 }),\n              // );\n              // if (reviews.length !== 0) {\n              await context.octokit.pulls.createReview(\n                context.pullRequest({ event: 'APPROVE' }),\n              );\n\n              let labels = updatedPr.labels;\n              const autoMergeWithSkipCi =\n                autoMergeSkipCiLabel &&\n                repoContext.config.autoMergeRenovateWithSkipCi;\n              if (autoMergeWithSkipCi) {\n                const result = await context.octokit.issues.addLabels(\n                  context.issue({\n                    labels: [autoMergeSkipCiLabel.name],\n                  }),\n                );\n                labels = result.data;\n              }\n              if (hasLabelInPR(labels, codeNeedsReviewLabel)) {\n                await updateReviewStatus(\n                  updatedPr,\n                  context,\n                  repoContext,\n                  'dev',\n                  {\n                    remove: ['needsReview'],\n                  },\n                );\n              } else {\n                await updateStatusCheckFromLabels(\n                  updatedPr,\n                  context,\n                  repoContext,\n                  labels,\n                );\n              }\n\n              await updatePrCommentBodyOptions(\n                context,\n                repoContext,\n                reviewflowPrContext,\n                {\n                  autoMergeWithSkipCi,\n                  // force label to avoid racing events (when both events are sent in the same time, reviewflow treats them one by one but the second event wont have its body updated)\n                  autoMerge: hasLabelInPR(labels, autoMergeLabel)\n                    ? true\n                    : repoContext.config.prDefaultOptions.autoMerge,\n                },\n              );\n              // }\n            } else if (autoMergeLabel && label.id === autoMergeLabel.id) {\n              await updatePrCommentBodyOptions(\n                context,\n                repoContext,\n                reviewflowPrContext,\n                {\n                  autoMerge: true,\n                  // force label to avoid racing events (when both events are sent in the same time, reviewflow treats them one by one but the second event wont have its body updated)\n                  // Note: si c'est renovate qui ajoute le label autoMerge, le label codeApprovedLabel n'aurait pu etre ajouté que par renovate également (on est a quelques secondes de l'ouverture de la pr par renovate)\n                  autoMergeWithSkipCi: hasLabelInPR(\n                    pullRequest.labels,\n                    autoMergeSkipCiLabel,\n                  )\n                    ? true\n                    : repoContext.config.prDefaultOptions.autoMergeWithSkipCi,\n                },\n              );\n            }\n            await autoMergeIfPossible(\n              updatedPr,\n              context,\n              repoContext,\n              reviewflowPrContext,\n            );\n          }\n          return;\n        }\n\n        if (repoContext.protectedLabelIds.includes(label.id)) {\n          if (context.payload.action === 'labeled') {\n            await context.octokit.issues.removeLabel(\n              context.issue({ name: label.name }),\n            );\n          } else {\n            await context.octokit.issues.addLabels(\n              context.issue({ labels: [label.name] }),\n            );\n          }\n          return;\n        }\n\n        await updateStatusCheckFromLabels(updatedPr, context, repoContext);\n\n        const updateBranchLabel = repoContext.labels['merge/update-branch'];\n        const automergeLabel = repoContext.labels['merge/automerge'];\n        const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n        const option = (() => {\n          if (automergeLabel && label.id === automergeLabel.id) {\n            return 'autoMerge';\n          }\n          if (skipCiLabel && label.id === skipCiLabel.id) {\n            return 'autoMergeWithSkipCi';\n          }\n          return null;\n        })();\n\n        if (option) {\n          await updatePrCommentBodyOptions(\n            context,\n            repoContext,\n            reviewflowPrContext,\n            {\n              [option]: context.payload.action === 'labeled',\n            },\n          );\n        } // not an else if\n        if (automergeLabel && label.id === automergeLabel.id) {\n          if (context.payload.action === 'labeled') {\n            await autoMergeIfPossible(\n              updatedPr,\n              context,\n              repoContext,\n              reviewflowPrContext,\n            );\n          } else {\n            repoContext.removePrFromAutomergeQueue(\n              context,\n              pullRequest.number,\n              'automerge label removed',\n            );\n          }\n        }\n        if (updateBranchLabel && label.id === updateBranchLabel.id) {\n          if (context.payload.action === 'labeled') {\n            await updateBranch(\n              updatedPr,\n              context,\n              context.payload.sender.login,\n            );\n            await context.octokit.issues.removeLabel(\n              context.issue({ name: label.name }),\n            );\n          }\n        }\n      },\n    ),\n  );\n}\n","import type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { PullRequestFromRestEndpoint } from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { autoMergeIfPossible } from './autoMergeIfPossible';\nimport hasLabelInPR from './utils/hasLabelInPR';\n\nexport const autoApproveAndAutoMerge = async (\n  pullRequest: PullRequestFromRestEndpoint,\n  context: Context<any>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n): Promise<boolean> => {\n  // const autoMergeLabel = repoContext.labels['merge/automerge'];\n  const codeApprovedLabel = repoContext.labels['code/approved'];\n  if (hasLabelInPR(pullRequest.labels, codeApprovedLabel)) {\n    await context.octokit.pulls.createReview(\n      context.pullRequest({ event: 'APPROVE' }),\n    );\n    await autoMergeIfPossible(\n      pullRequest,\n      context,\n      repoContext,\n      reviewflowPrContext,\n    );\n    return true;\n  }\n\n  return false;\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { PullRequestFromRestEndpoint } from '../utils/PullRequestData';\n\nexport const autoAssignPRToCreator = async <\n  E extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  pullRequest: E['pull_request'] | PullRequestFromRestEndpoint,\n  context: Context<E>,\n  repoContext: RepoContext,\n): Promise<void> => {\n  if (!repoContext.config.autoAssignToCreator) return;\n  if (!pullRequest.assignees || pullRequest.assignees.length > 0) return;\n  if (!pullRequest.user || pullRequest.user.type === 'Bot') return;\n\n  await context.octokit.issues.addAssignees(\n    context.issue({\n      assignees: [pullRequest.user.login],\n    }),\n  );\n};\n","import type { Probot } from 'probot';\nimport type { AppContext } from 'context/AppContext';\nimport { autoApproveAndAutoMerge } from './actions/autoApproveAndAutoMerge';\nimport { autoAssignPRToCreator } from './actions/autoAssignPRToCreator';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function opened(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.opened',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (pullRequest, context, repoContext, reviewflowPrContext) => {\n        if (reviewflowPrContext === null) return;\n        const fromRenovate = pullRequest.head.ref.startsWith('renovate/');\n\n        await Promise.all<unknown>([\n          autoAssignPRToCreator(pullRequest, context, repoContext),\n          editOpenedPR(\n            pullRequest,\n            context,\n            repoContext,\n            reviewflowPrContext,\n            true,\n          ),\n          fromRenovate\n            ? fetchPr(context, pullRequest.number).then((updatedPr) =>\n                autoApproveAndAutoMerge(\n                  updatedPr,\n                  context,\n                  repoContext,\n                  reviewflowPrContext,\n                ).then(async (approved: boolean): Promise<void> => {\n                  if (!approved) {\n                    await updateReviewStatus(\n                      pullRequest,\n                      context,\n                      repoContext,\n                      'dev',\n                      {\n                        add: ['needsReview'],\n                      },\n                    );\n                  }\n                }),\n              )\n            : updateReviewStatus(pullRequest, context, repoContext, 'dev', {\n                add: repoContext.config.requiresReviewRequest\n                  ? ['needsReview']\n                  : [],\n                remove: ['approved', 'changesRequested'],\n              }),\n        ]);\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { getRolesFromPullRequestAndReviewers } from './utils/getRolesFromPullRequestAndReviewers';\n\nexport default function reopened(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.reopened',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        return payload.pull_request;\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        /* if repo is not ignored */\n        if (reviewflowPrContext) {\n          await Promise.all([\n            updateReviewStatus(pullRequest, context, repoContext, 'dev', {\n              add: ['needsReview'],\n              remove: ['approved'],\n            }),\n            editOpenedPR(\n              pullRequest,\n              context,\n              repoContext,\n              reviewflowPrContext,\n              true,\n            ),\n          ]);\n        }\n\n        /* update slack home */\n        if (pullRequest.requested_reviewers) {\n          pullRequest.requested_reviewers.forEach((requestedReviewer) => {\n            repoContext.slack.updateHome(requestedReviewer.login);\n          });\n        }\n\n        if (pullRequest.requested_teams) {\n          await Promise.all(\n            pullRequest.requested_teams.map(async (team) => {\n              const members = await repoContext.getMembersForTeam(team.id);\n              members.forEach((member) => {\n                repoContext.slack.updateHome(member.login);\n              });\n            }),\n          );\n        }\n\n        if (pullRequest.assignees) {\n          pullRequest.assignees.forEach((assignee) => {\n            repoContext.slack.updateHome(assignee.login);\n          });\n        }\n\n        /* send notifications to assignees and followers */\n        const { reviewers } = await getReviewersAndReviewStates(\n          context,\n          repoContext,\n        );\n        const { owner, assignees, followers } =\n          getRolesFromPullRequestAndReviewers(pullRequest, reviewers);\n\n        const senderMention = repoContext.slack.mention(\n          context.payload.sender.login,\n        );\n        const ownerMention = repoContext.slack.mention(owner.login);\n        const prLink = slackUtils.createPrLink(pullRequest, repoContext);\n\n        const createMessage = (to: AccountInfo): string => {\n          const ownerPart = slackUtils.createOwnerPart(\n            ownerMention,\n            pullRequest,\n            to,\n          );\n\n          return `:recycle: ${senderMention} reopened ${ownerPart} ${prLink}\\n> ${pullRequest.title}`;\n        };\n\n        assignees.map((assignee) => {\n          if (context.payload.sender.id === assignee.id) return;\n          return repoContext.slack.postMessage('pr-lifecycle', assignee, {\n            text: createMessage(assignee),\n          });\n        });\n\n        followers.map((follower) => {\n          if (context.payload.sender.id === follower.id) return;\n          return repoContext.slack.postMessage(\n            'pr-lifecycle-follow',\n            follower,\n            {\n              text: createMessage(follower),\n            },\n          );\n        });\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\n\nexport default function reviewDismissed(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request_review.dismissed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const sender = context.payload.sender;\n        const reviewer = context.payload.review.user;\n        const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          const updatedPr = await fetchPr(context, pullRequest.number);\n\n          const { reviewStates } = await getReviewersAndReviewStates(\n            context,\n            repoContext,\n          );\n\n          const hasChangesRequestedInReviews =\n            reviewStates[reviewerGroup].changesRequested !== 0;\n          const hasApprovals = reviewStates[reviewerGroup].approved !== 0;\n          const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n            reviewerGroup,\n            updatedPr,\n            { includesReviewerGroup: true },\n          );\n\n          await updateReviewStatus(\n            updatedPr,\n            context,\n            repoContext,\n            reviewerGroup,\n            {\n              add: [\n                !hasApprovals && 'needsReview',\n                hasApprovals &&\n                  !hasRequestedReviewsForGroup &&\n                  !hasChangesRequestedInReviews &&\n                  'approved',\n              ],\n              remove: [\n                !hasRequestedReviewsForGroup &&\n                  !hasChangesRequestedInReviews &&\n                  'requested',\n                !hasChangesRequestedInReviews && 'changesRequested',\n                !hasApprovals && 'approved',\n              ],\n            },\n          );\n\n          if (updatedPr.assignees) {\n            updatedPr.assignees.forEach((assignee) => {\n              if (assignee) {\n                repoContext.slack.updateHome(assignee.login);\n              }\n            });\n          }\n          if (\n            !updatedPr.assignees ||\n            !updatedPr.assignees.some(\n              (assignee) => assignee && assignee.login === reviewer.login,\n            )\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n        }\n\n        if (repoContext.slack) {\n          if (sender.login === reviewer.login) {\n            pullRequest.assignees.forEach((assignee) => {\n              repoContext.slack.postMessage('pr-review', assignee, {\n                text: `:recycle: ${repoContext.slack.mention(\n                  reviewer.login,\n                )} dismissed his review on ${slackUtils.createPrLink(\n                  pullRequest,\n                  repoContext,\n                )}`,\n              });\n            });\n          } else {\n            repoContext.slack.postMessage('pr-review', reviewer, {\n              text: `:recycle: ${repoContext.slack.mention(\n                sender.login,\n              )} dismissed your review on ${slackUtils.createPrLink(\n                pullRequest,\n                repoContext,\n              )}`,\n            });\n          }\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\n\nexport default function reviewRequestRemoved(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request.review_request_removed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const sender = context.payload.sender;\n        const requestedReviewer = (context.payload as any).requested_reviewer;\n        const requestedTeam = (context.payload as any).requested_team;\n        const requestedReviewers = requestedReviewer\n          ? [requestedReviewer]\n          : await repoContext.getMembersForTeam(requestedTeam.id);\n\n        const reviewerGroup = requestedReviewer\n          ? repoContext.getReviewerGroup(requestedReviewer.login)\n          : repoContext.getTeamGroup(requestedTeam.name);\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n            reviewerGroup,\n            pullRequest,\n            {\n              includesReviewerGroup: true,\n            },\n          );\n\n          const { reviewStates } = await getReviewersAndReviewStates(\n            context,\n            repoContext,\n          );\n\n          const hasChangesRequestedInReviews =\n            reviewStates[reviewerGroup].changesRequested !== 0;\n\n          const hasApprovedInReviews =\n            reviewStates[reviewerGroup].approved !== 0;\n\n          const approved =\n            !hasRequestedReviewsForGroup &&\n            !hasChangesRequestedInReviews &&\n            hasApprovedInReviews;\n\n          await updateReviewStatus(\n            pullRequest,\n            context,\n            repoContext,\n            reviewerGroup,\n            {\n              add: [\n                // if changes requested by the one which requests was removed (should still be in changed requested anyway, but we never know)\n                hasChangesRequestedInReviews && 'changesRequested',\n                // if was already approved by another member in the group and has no other requests waiting\n                approved && 'approved',\n              ],\n              // remove labels if has no other requests waiting\n              remove: [\n                approved && 'needsReview',\n                !hasRequestedReviewsForGroup && 'requested',\n              ],\n            },\n          );\n\n          const assigneesLogins: string[] = [];\n          if (pullRequest.assignees) {\n            pullRequest.assignees.forEach((assignee) => {\n              assigneesLogins.push(assignee.login);\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n\n          requestedReviewers.forEach((potentialReviewer) => {\n            if (assigneesLogins.includes(potentialReviewer)) return;\n            repoContext.slack.updateHome(potentialReviewer.login);\n          });\n        }\n\n        if (repoContext.slack) {\n          if (requestedReviewers.some((rr) => rr.login === sender.login)) {\n            requestedReviewers.forEach((potentialReviewer) => {\n              if (potentialReviewer.login === sender.login) return;\n              repoContext.slack.postMessage('pr-review', potentialReviewer, {\n                text: `:skull_and_crossbones: ${repoContext.slack.mention(\n                  sender.login,\n                )} removed the request for your team _${\n                  requestedTeam.name\n                }_ review on ${slackUtils.createPrLink(\n                  pullRequest,\n                  repoContext,\n                )}`,\n              });\n            });\n          } else {\n            requestedReviewers.forEach((potentialReviewer) => {\n              repoContext.slack.postMessage('pr-review', potentialReviewer, {\n                text: `:skull_and_crossbones: ${repoContext.slack.mention(\n                  sender.login,\n                )} removed the request for  ${\n                  requestedTeam ? `your team _${requestedTeam.name}_` : 'your'\n                } review on ${slackUtils.createPrLink(\n                  pullRequest,\n                  repoContext,\n                )}`,\n              });\n            });\n          }\n\n          await Promise.all(\n            requestedReviewers.map(async (potentialReviewer) => {\n              const sentMessageRequestedReview =\n                await appContext.mongoStores.slackSentMessages.findOne({\n                  'account.id': repoContext.accountEmbed.id,\n                  'account.type': repoContext.accountEmbed.type,\n                  type: 'review-requested',\n                  typeId: `${pullRequest.id}_${\n                    requestedTeam ? `${requestedTeam.id}_` : ''\n                  }${potentialReviewer.id}`,\n                });\n\n              if (sentMessageRequestedReview) {\n                const sentTo = sentMessageRequestedReview.sentTo[0];\n                const message = sentMessageRequestedReview.message;\n                await Promise.all([\n                  repoContext.slack.updateMessage(\n                    sentMessageRequestedReview.account,\n                    sentTo.ts,\n                    sentTo.channel,\n                    {\n                      ...message,\n                      text: message.text\n                        .split('\\n')\n                        .map((l) => `~${l}~`)\n                        .join('\\n'),\n                    },\n                  ),\n                  repoContext.slack.addReaction(\n                    sentMessageRequestedReview.account,\n                    sentTo.ts,\n                    sentTo.channel,\n                    'skull_and_crossbones',\n                  ),\n                  appContext.mongoStores.slackSentMessages.deleteOne(\n                    sentMessageRequestedReview,\n                  ),\n                ]);\n              }\n            }),\n          );\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\n\nexport default function reviewRequested(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request.review_requested',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const sender = context.payload.sender;\n\n        const requestedReviewer = (context.payload as any).requested_reviewer;\n        const requestedTeam = (context.payload as any).requested_team;\n        const requestedReviewers = requestedReviewer\n          ? [requestedReviewer]\n          : await repoContext.getMembersForTeam(requestedTeam.id);\n\n        const reviewerGroup = requestedReviewer\n          ? repoContext.getReviewerGroup(requestedReviewer.login)\n          : repoContext.getTeamGroup(requestedTeam.name);\n        const shouldWait = false;\n        // repoContext.approveShouldWait(reviewerGroup, pr.requested_reviewers, { includesWaitForGroups: true });\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          await updateReviewStatus(\n            pullRequest,\n            context,\n            repoContext,\n            reviewerGroup,\n            {\n              add: ['needsReview', !shouldWait && 'requested'],\n              remove: ['approved'],\n            },\n          );\n\n          const assigneesLogins: string[] = [];\n          if (pullRequest.assignees) {\n            pullRequest.assignees.forEach((assignee) => {\n              assigneesLogins.push(assignee.login);\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n\n          requestedReviewers.forEach((potentialReviewer) => {\n            if (assigneesLogins.includes(potentialReviewer)) return;\n            repoContext.slack.updateHome(potentialReviewer.login);\n          });\n        }\n\n        if (!shouldWait && repoContext.slack) {\n          const text = `:eyes: ${repoContext.slack.mention(\n            sender.login,\n          )} requests ${\n            requestedReviewer ? 'your' : `your team _${requestedTeam.name}_`\n          } review on ${slackUtils.createPrLink(\n            pullRequest,\n            repoContext,\n          )} !\\n> ${pullRequest.title}`;\n          const message = { text };\n\n          await Promise.all(\n            requestedReviewers.map(async (potentialReviewer) => {\n              if (sender.login === potentialReviewer.login) return;\n\n              const result = await repoContext.slack.postMessage(\n                'pr-review',\n                potentialReviewer,\n                message,\n              );\n              if (result) {\n                await appContext.mongoStores.slackSentMessages.insertOne({\n                  type: 'review-requested',\n                  typeId: `${pullRequest.id}_${\n                    requestedTeam ? `${requestedTeam.id}_` : ''\n                  }${potentialReviewer.id}`,\n                  message,\n                  account: repoContext.accountEmbed,\n                  sentTo: [result],\n                });\n              }\n            }),\n          );\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport slackifyMarkdown from 'slackify-markdown';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { createSlackMessageWithSecondaryBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport { fetchPr } from './utils/fetchPr';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { getRolesFromPullRequestAndReviewers } from './utils/getRolesFromPullRequestAndReviewers';\n\nconst getEmojiFromState = (state: string): string => {\n  switch (state) {\n    case 'changes_requested':\n      return 'x';\n    case 'approved':\n      return 'white_check_mark';\n    default:\n      return 'speech_balloon';\n  }\n};\n\nexport default function reviewSubmitted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request_review.submitted',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const { payload } = context;\n\n        const {\n          user: reviewer,\n          state,\n          body,\n          html_url: reviewUrl,\n        } = payload.review;\n\n        const { reviewers, reviewStates } = await getReviewersAndReviewStates(\n          context,\n          repoContext,\n        );\n        const { owner, assignees, followers } =\n          getRolesFromPullRequestAndReviewers(pullRequest, reviewers);\n        const isReviewByOwner = owner.login === reviewer.login;\n\n        const filteredFollowers = followers.filter(\n          (follower) => follower.id !== reviewer.id,\n        );\n\n        if (!isReviewByOwner) {\n          const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n          let merged: boolean;\n\n          if (\n            reviewflowPrContext &&\n            !repoContext.shouldIgnore &&\n            reviewerGroup &&\n            repoContext.config.labels.review[reviewerGroup]\n          ) {\n            const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n              reviewerGroup,\n              pullRequest,\n              {\n                includesReviewerGroup: true,\n                // TODO reenable this when accepted can notify request review to slack (dev accepted => design requested) and flag to disable for label (approved design ; still waiting for dev ?)\n                // includesWaitForGroups: true,\n              },\n            );\n\n            const hasChangesRequestedInReviews =\n              reviewStates[reviewerGroup].changesRequested !== 0;\n\n            const approved =\n              !hasRequestedReviewsForGroup &&\n              !hasChangesRequestedInReviews &&\n              state === 'approved';\n\n            const updatedPr = await fetchPr(context, pullRequest.number);\n\n            const newLabels = await updateReviewStatus(\n              updatedPr,\n              context,\n              repoContext,\n              reviewerGroup,\n              {\n                add: [\n                  approved && 'approved',\n                  state === 'changes_requested' && 'needsReview',\n                  state === 'changes_requested' && 'changesRequested',\n                ],\n                remove: [\n                  approved && 'needsReview',\n                  !hasRequestedReviewsForGroup && 'requested',\n                  state === 'approved' &&\n                    !hasChangesRequestedInReviews &&\n                    'changesRequested',\n                  state === 'changes_requested' && 'approved',\n                ],\n              },\n            );\n\n            if (approved && !hasChangesRequestedInReviews) {\n              merged = await autoMergeIfPossible(\n                updatedPr,\n                context,\n                repoContext,\n                reviewflowPrContext,\n                newLabels,\n              );\n            }\n          }\n\n          if (assignees) {\n            assignees.forEach((assignee) => {\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n          if (\n            !assignees.some((assignee) => assignee.login === reviewer.login)\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n\n          const sentMessageRequestedReview =\n            await appContext.mongoStores.slackSentMessages.findOne({\n              'account.id': repoContext.accountEmbed.id,\n              'account.type': repoContext.accountEmbed.type,\n              type: 'review-requested',\n              typeId: `${pullRequest.id}_${reviewer.id}`,\n            });\n\n          const emoji = getEmojiFromState(state);\n\n          if (sentMessageRequestedReview) {\n            const sentTo = sentMessageRequestedReview.sentTo[0];\n            const message = sentMessageRequestedReview.message;\n            await Promise.all([\n              repoContext.slack.updateMessage(\n                sentMessageRequestedReview.account,\n                sentTo.ts,\n                sentTo.channel,\n                {\n                  ...message,\n                  text: message.text\n                    .split('\\n')\n                    .map((l) => `~${l}~`)\n                    .join('\\n'),\n                },\n              ),\n              repoContext.slack.addReaction(\n                sentMessageRequestedReview.account,\n                sentTo.ts,\n                sentTo.channel,\n                emoji,\n              ),\n              appContext.mongoStores.slackSentMessages.deleteOne(\n                sentMessageRequestedReview,\n              ),\n            ]);\n          }\n\n          if (!body && state !== 'changes_requested' && state !== 'approved') {\n            return;\n          }\n\n          const mention = repoContext.slack.mention(reviewer.login);\n          const prUrl = slackUtils.createPrLink(pullRequest, repoContext);\n          const ownerMention = repoContext.slack.mention(owner.login);\n\n          const createMessage = (\n            toOwner?: boolean,\n            isAssignedTo?: boolean,\n          ): string => {\n            const ownerPart = toOwner\n              ? 'your PR'\n              : `${ownerMention}'s PR${\n                  isAssignedTo ? \" you're assigned to\" : ''\n                }`;\n\n            if (state === 'changes_requested') {\n              return `:${emoji}: ${mention} requests changes on ${ownerPart} ${prUrl}`;\n            }\n            if (state === 'approved') {\n              return `${\n                toOwner ? ':clap: ' : ''\n              }:${emoji}: ${mention} approves ${ownerPart} ${prUrl}${\n                merged ? ' and PR is merged :tada:' : ''\n              }`;\n            }\n\n            const commentLink = slackUtils.createLink(reviewUrl, 'commented');\n            return `:${emoji}: ${mention} ${commentLink} on ${ownerPart} ${prUrl}`;\n          };\n\n          const slackifiedBody = slackifyMarkdown(body as unknown as string);\n\n          assignees.forEach((assignee) => {\n            repoContext.slack.postMessage(\n              'pr-review',\n              assignee,\n              createSlackMessageWithSecondaryBlock(\n                createMessage(assignee.id === owner.id, true),\n                slackifiedBody,\n              ),\n            );\n          });\n\n          const message = createSlackMessageWithSecondaryBlock(\n            createMessage(false),\n            slackifiedBody,\n          );\n\n          filteredFollowers.forEach((follower) => {\n            repoContext.slack.postMessage(\n              'pr-review-follow',\n              follower,\n              message,\n            );\n          });\n        } else if (body) {\n          const mention = repoContext.slack.mention(reviewer.login);\n          const prUrl = slackUtils.createPrLink(pullRequest, repoContext);\n          const commentLink = slackUtils.createLink(reviewUrl, 'commented');\n\n          const message = createSlackMessageWithSecondaryBlock(\n            `:speech_balloon: ${mention} ${commentLink} on his PR ${prUrl}`,\n            body,\n          );\n\n          filteredFollowers.forEach((follower) => {\n            repoContext.slack.postMessage(\n              'pr-review-follow',\n              follower,\n              message,\n            );\n          });\n        }\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot, Context } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport type { LockedMergePr } from '../../context/repoContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\n\nconst isSameBranch = (\n  payload: Context<EventPayloads.WebhookPayloadStatus>['payload'],\n  lockedPr: LockedMergePr,\n): boolean => {\n  if (!lockedPr) return false;\n  return !!payload.branches.some((b) => b.name === lockedPr.branch);\n};\n\nexport default function status(app: Probot, appContext: AppContext): void {\n  app.on(\n    'status',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext): LockedMergePr[] => {\n        if (repoContext.shouldIgnore) return [];\n\n        const lockedPr = repoContext.getMergeLockedPr();\n        if (!lockedPr) return [];\n\n        if (payload.state !== 'loading' && isSameBranch(payload, lockedPr)) {\n          return [lockedPr];\n        }\n\n        return [];\n      },\n      (pr, context, repoContext): void => {\n        const lockedPr = repoContext.getMergeLockedPr();\n        // check if changed\n        if (isSameBranch(context.payload, lockedPr)) {\n          repoContext.reschedule(context, lockedPr);\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateStatusCheckFromLabels } from './actions/updateStatusCheckFromLabels';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function synchronize(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.synchronize',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        if (!reviewflowPrContext) return;\n\n        const updatedPr = await fetchPr(context, pullRequest.number);\n        // old and new sha\n        // const { before, after } = context.payload;\n        const previousSha = (context.payload as any).before as string;\n\n        await Promise.all([\n          editOpenedPR(\n            updatedPr,\n            context,\n            repoContext,\n            reviewflowPrContext,\n            true,\n            previousSha,\n          ),\n          // addStatusCheckToLatestCommit\n          updateStatusCheckFromLabels(\n            updatedPr,\n            context,\n            repoContext,\n            updatedPr.labels,\n            previousSha,\n          ),\n        ]);\n\n        // call autoMergeIfPossible to re-add to the queue when push is fixed\n        await autoMergeIfPossible(\n          updatedPr,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { obtainRepoContext } from '../../context/repoContext';\nimport { getEmojiFromRepoDescription } from '../../context/utils';\nimport { createHandlerOrgChange } from '../account-handlers/utils/handler';\n\nexport default function repoEdited(app: Probot, appContext: AppContext): void {\n  app.on(\n    'repository.edited',\n    createHandlerOrgChange(\n      appContext,\n      async (context, orgContext): Promise<void> => {\n        const repoContext = await obtainRepoContext(appContext, context);\n        if (!repoContext) return;\n        const repo = context.payload.repository;\n        repoContext.repoFullName = repo.full_name;\n        repoContext.repoEmoji = getEmojiFromRepoDescription(repo.description);\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\n// import commands from 'probot-commands';\nimport type { AppContext } from './context/AppContext';\nimport membershipChanged from './events/account-handlers/membershipChanged';\nimport orgMemberAddedOrRemoved from './events/account-handlers/orgMemberAddedOrRemoved';\nimport teamChanged from './events/account-handlers/teamChanged';\nimport checkrunCompleted from './events/pr-handlers/checkrunCompleted';\nimport checksuiteCompleted from './events/pr-handlers/checksuiteCompleted';\nimport closedHandler from './events/pr-handlers/closed';\nimport commentCreated from './events/pr-handlers/commentCreated';\nimport commentEditedOrDeleted from './events/pr-handlers/commentEditedOrDeleted';\nimport editedHandler from './events/pr-handlers/edited';\nimport labelsChanged from './events/pr-handlers/labelsChanged';\nimport openedHandler from './events/pr-handlers/opened';\nimport reopenedHandler from './events/pr-handlers/reopened';\nimport reviewDismissedHandler from './events/pr-handlers/reviewDismissed';\nimport reviewRequestRemovedHandler from './events/pr-handlers/reviewRequestRemoved';\nimport reviewRequestedHandler from './events/pr-handlers/reviewRequested';\nimport reviewSubmittedHandler from './events/pr-handlers/reviewSubmitted';\nimport status from './events/pr-handlers/status';\nimport synchronizeHandler from './events/pr-handlers/synchronize';\nimport repoEdited from './events/repository-handlers/repoEdited';\n\nexport default function initApp(app: Probot, appContext: AppContext): void {\n  // Account\n  /* https://developer.github.com/webhooks/event-payloads/#organization */\n  /* https://developer.github.com/webhooks/event-payloads/#team */\n  /* https://developer.github.com/webhooks/event-payloads/#membership */\n  orgMemberAddedOrRemoved(app, appContext);\n  teamChanged(app, appContext);\n  membershipChanged(app, appContext);\n\n  // Repo\n  /* https://developer.github.com/webhooks/event-payloads/#repository */\n  repoEdited(app, appContext);\n\n  // PR\n  /* https://developer.github.com/webhooks/event-payloads/#pull_request */\n  openedHandler(app, appContext);\n  editedHandler(app, appContext);\n  closedHandler(app, appContext);\n  reopenedHandler(app, appContext);\n\n  reviewRequestedHandler(app, appContext);\n  reviewRequestRemovedHandler(app, appContext);\n  reviewSubmittedHandler(app, appContext);\n  reviewDismissedHandler(app, appContext);\n  labelsChanged(app, appContext);\n  synchronizeHandler(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#pull_request_review_comment */\n  /* https://developer.github.com/webhooks/event-payloads/#issue_comment */\n  commentCreated(app, appContext);\n  commentEditedOrDeleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#check_run */\n  checkrunCompleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#check_suite */\n  checksuiteCompleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#status */\n  status(app, appContext);\n\n  /* commands */\n  // commands(app, 'update-branch', () => {});\n}\n","/* eslint-disable @typescript-eslint/no-floating-promises */\nimport type { MongoBaseModel } from 'liwi-mongo';\nimport { MongoStore, MongoConnection } from 'liwi-mongo';\nimport type { SlackMessage } from './context/slack/SlackMessage';\nimport type { MessageCategory } from './dm/MessageCategory';\n\n// export interface PrEventsModel extends MongoModel {\n//   owner: string;\n//   repo: string;\n//   prId: string;\n//   prNumber: string;\n//   event: string;\n// }\n\nexport type AccountType = 'Organization' | 'User';\n\nexport interface AccountEmbed {\n  id: number;\n  login: string;\n  type: AccountType;\n}\n\ninterface RepoEmbed {\n  id: number;\n  name: string;\n}\n\ninterface PrEmbed {\n  number: number;\n}\n\nexport type AccountEmbedWithoutType = Omit<AccountEmbed, 'type'>;\n\nexport interface UserDmSettings extends MongoBaseModel {\n  userId: number;\n  orgId: number;\n  settings: Record<MessageCategory, boolean>;\n}\n\ninterface BaseAccount extends MongoBaseModel<number> {\n  login: string;\n  installationId?: number;\n}\n\nexport interface User extends BaseAccount {\n  type: string;\n}\n\ninterface OrgSlack {\n  id: string;\n  accessToken?: string;\n  scope?: string[];\n  teamId?: string;\n}\ninterface OrgConfig {\n  canUseExternalSlack?: boolean;\n}\n\nexport interface Org extends BaseAccount {\n  slack?: OrgSlack;\n  /** @deprecated */\n  slackToken?: string;\n  config: OrgConfig;\n}\n\nexport interface OrgTeam extends MongoBaseModel<number> {\n  org: AccountEmbedWithoutType;\n  name: string;\n  slug: string;\n  description: string | null;\n}\n\nexport interface OrgTeamEmbed {\n  id: OrgTeam['_id'];\n  name: OrgTeam['name'];\n  slug: OrgTeam['slug'];\n}\n\ninterface OrgMemberSlack {\n  id: string;\n  email?: string;\n  accessToken?: string;\n  scope?: string[];\n  teamId?: string;\n}\n\nexport interface OrgMember extends MongoBaseModel {\n  org: AccountEmbedWithoutType;\n  user: AccountEmbedWithoutType;\n  slack?: OrgMemberSlack;\n  teams: OrgTeamEmbed[];\n}\n\nexport type SlackMessageType =\n  | 'review-comment'\n  | 'issue-comment'\n  | 'review-submitted'\n  | 'review-requested';\n\nexport interface SlackSentMessage extends MongoBaseModel {\n  type: SlackMessageType;\n  typeId: number | string;\n  account: AccountEmbed;\n  message: SlackMessage;\n  sentTo: {\n    channel: string;\n    ts: string;\n  }[];\n}\n\nexport interface AutomergeLog extends MongoBaseModel {\n  account: AccountEmbed;\n  repoFullName: string;\n  pr: {\n    id: number;\n    number: number;\n    isRenovate: boolean;\n    mergeableState: string;\n  };\n  type:\n    | 'rebase-renovate'\n    | 'unknown mergeable_state'\n    | 'blocked mergeable_state'\n    | 'behind mergeable_state'\n    | 'not mergeable'\n    | 'failed status or checks'\n    | 'already merged';\n  action: 'remove' | 'reschedule' | 'wait' | 'update branch';\n}\n\nexport interface ReviewflowPr extends MongoBaseModel {\n  account: AccountEmbed;\n  repo: RepoEmbed;\n  pr: PrEmbed;\n  commentId: number;\n}\n\nexport interface MongoStores {\n  connection: MongoConnection;\n  userDmSettings: MongoStore<UserDmSettings>;\n  users: MongoStore<User>;\n  orgs: MongoStore<Org>;\n  orgMembers: MongoStore<OrgMember>;\n  orgTeams: MongoStore<OrgTeam>;\n  slackSentMessages: MongoStore<SlackSentMessage>;\n  automergeLogs: MongoStore<AutomergeLog>;\n  prs: MongoStore<ReviewflowPr>;\n  // prEvents: MongoStore<PrEventsModel>;\n}\n\nif (!process.env.MONGO_DB) {\n  throw new Error('MONGO_DB is missing in process.env');\n}\n\nexport default function init(): MongoStores {\n  const config = new Map([\n    ['host', process.env.MONGO_HOST || 'localhost'],\n    ['port', process.env.MONGO_PORT || '27017'],\n    ['database', process.env.MONGO_DB!],\n  ]);\n  if (process.env.MONGO_USER) {\n    config.set('user', process.env.MONGO_USER);\n    config.set('password', process.env.MONGO_PASSWORD!);\n  }\n  const connection = new MongoConnection(config);\n\n  // const prEvents = new MongoStore<PrEventsModel>(connection, 'prEvents');\n  // prEvents.collection.then((coll) => {\n  //   coll.createIndex({ owner: 1, repo: 1, ???: 1 });\n  // });\n\n  const userDmSettings = new MongoStore<UserDmSettings>(\n    connection,\n    'userDmSettings',\n  );\n  userDmSettings.collection.then((coll) => {\n    coll.createIndex({ userId: 1, orgId: 1 }, { unique: true });\n  });\n\n  const users = new MongoStore<User>(connection, 'users');\n  users.collection.then((coll) => {\n    coll.createIndex({ login: 1 }, { unique: true });\n  });\n\n  const orgs = new MongoStore<Org>(connection, 'orgs');\n  orgs.collection.then((coll) => {\n    coll.createIndex({ login: 1 }, { unique: true });\n  });\n\n  const orgMembers = new MongoStore<OrgMember>(connection, 'orgMembers');\n  orgMembers.collection.then((coll) => {\n    coll.createIndex({ 'user.id': 1, 'org.id': 1 }, { unique: true });\n    coll.createIndex(\n      { 'org.id': 1, 'user.id': 1, 'teams.id': 1 },\n      { unique: true },\n    );\n    coll.createIndex({ 'org.id': 1, 'teams.id': 1 });\n  });\n\n  const orgTeams = new MongoStore<OrgTeam>(connection, 'orgTeams');\n  orgTeams.collection.then((coll) => {\n    coll.createIndex({ 'org.id': 1 });\n  });\n\n  const slackSentMessages = new MongoStore<SlackSentMessage>(\n    connection,\n    'slackSentMessages',\n  );\n  slackSentMessages.collection.then((coll) => {\n    coll.createIndex({\n      'account.id': 1,\n      'account.type': 1,\n      type: 1,\n      typeId: 1,\n    });\n    // remove older than 14 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  const automergeLogs = new MongoStore<AutomergeLog>(\n    connection,\n    'automergeLogs',\n  );\n  automergeLogs.collection.then((coll) => {\n    coll.createIndex({\n      repoFullName: 1,\n      type: 1,\n    });\n    coll.createIndex({\n      repoFullName: 1,\n      'pr.number': 1,\n    });\n    // remove older than 30 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  const prs = new MongoStore<ReviewflowPr>(connection, 'prs');\n  prs.collection.then((coll) => {\n    coll.createIndex(\n      {\n        'account.id': 1,\n        'repo.id': 1,\n        'pr.number': 1,\n      },\n      { unique: true },\n    );\n    // remove older than 12 * 30 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 12 * 30 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  // return { connection, prEvents };\n  return {\n    connection,\n    userDmSettings,\n    users,\n    orgs,\n    orgMembers,\n    orgTeams,\n    slackSentMessages,\n    automergeLogs,\n    prs,\n  };\n}\n","import { WebClient } from '@slack/web-api';\nimport type { MongoStores, Org, OrgMember } from '../mongo';\nimport type { Octokit } from '../octokit';\nimport { createLink } from './utils';\n\ninterface QueueItem {\n  github: Octokit;\n  slackClient: WebClient;\n  member: OrgMember;\n}\n\nexport const createSlackHomeWorker = (mongoStores: MongoStores) => {\n  const updateMember = async (\n    octokit: Octokit,\n    slackClient: WebClient,\n    member: OrgMember,\n  ): Promise<void> => {\n    if (!member.slack?.id) return;\n    // console.log('update member', member.org.login, member.user.login);\n\n    /* search limit: 30 requests per minute = 7 update/min max */\n    const [\n      prsWithRequestedReviews,\n      prsToMerge,\n      prsWithRequestedChanges,\n      prsInDraft,\n    ] = await Promise.all([\n      octokit.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open review-requested:${member.user.login} `,\n        sort: 'created',\n        order: 'desc',\n      }),\n      octokit.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} label:\":ok_hand: code/approved\"`,\n        sort: 'created',\n        order: 'desc',\n      }),\n      octokit.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} label:\":ok_hand: code/changes-requested\"`,\n        sort: 'created',\n        order: 'desc',\n      }),\n      octokit.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} draft:true`,\n        sort: 'created',\n        order: 'desc',\n        per_page: 5,\n      }),\n    ]);\n\n    const blocks: any[] = [\n      {\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: `Configure your ${\n            process.env.REVIEWFLOW_NAME\n          } settings ${createLink(\n            `${process.env.REVIEWFLOW_APP_URL}/${member.org.login}`,\n            'here',\n          )}.`,\n        },\n      },\n      {\n        type: 'header',\n        text: {\n          type: 'plain_text',\n          text: 'PRs requesting your attention',\n        },\n      },\n    ];\n\n    const buildBlocks = (title: string, results: any) => {\n      if (!results.total_count) return;\n\n      blocks.push(\n        {\n          type: 'section',\n          text: {\n            type: 'mrkdwn',\n            text: `*${title}*`,\n          },\n        },\n        {\n          type: 'divider',\n        },\n        ...results.items\n          .map((pr: any) => {\n            const repoName = pr.repository_url.slice(\n              'https://api.github.com/repos/'.length,\n            );\n            const prFullName = `${repoName}#${pr.number}`;\n\n            return [\n              {\n                type: 'section',\n                text: {\n                  type: 'mrkdwn',\n                  text: `*${createLink(pr.html_url, pr.title)}*`,\n                  //  ${pr.labels.map((l) => `{${l.name}}`).join(' · ')}\n                },\n              },\n              {\n                type: 'context',\n                elements: [\n                  {\n                    type: 'mrkdwn',\n                    text: `${createLink(pr.html_url, prFullName)} ${\n                      pr.draft ? '· _Draft_' : ''\n                    }`,\n                  },\n                  {\n                    type: 'image',\n                    image_url: pr.user.avatar_url,\n                    alt_text: pr.user.login,\n                  },\n                  {\n                    type: 'mrkdwn',\n                    text: `${pr.user.login}`,\n                  },\n                ],\n              },\n            ];\n          })\n          .flat(),\n        {\n          type: 'context',\n          elements: [\n            {\n              type: 'image',\n              image_url:\n                'https://api.slack.com/img/blocks/bkb_template_images/placeholder.png',\n              alt_text: 'placeholder',\n            },\n          ],\n        },\n      );\n    };\n\n    buildBlocks(':eyes: Requested Reviews', prsWithRequestedReviews.data);\n    buildBlocks(':white_check_mark: Ready to Merge', prsToMerge.data);\n    buildBlocks(':x: Changes Requested', prsWithRequestedChanges.data);\n    buildBlocks(':construction: Drafts', prsInDraft.data);\n\n    if (blocks.length === 2) {\n      blocks.push({\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: \":tada: It looks like you don't have any PR to review!\",\n        },\n      });\n    }\n\n    slackClient.views.publish({\n      user_id: member.slack.id,\n      view: {\n        type: 'home',\n        blocks,\n      },\n    });\n  };\n\n  let workerInterval: ReturnType<typeof setInterval> | undefined;\n  const queueKeys = new Set<string>();\n  const queue: QueueItem[] = [];\n\n  const stop = (): void => {\n    if (workerInterval !== undefined) {\n      clearInterval(workerInterval);\n      workerInterval = undefined;\n    }\n  };\n\n  const start = (): void => {\n    if (workerInterval !== undefined) return;\n    workerInterval = setInterval(() => {\n      const item = queue.shift();\n      if (!item) {\n        stop();\n        return;\n      }\n\n      const { github, slackClient, member } = item;\n      const memberId = member.slack?.id;\n\n      const key = `${member.org.id}_${memberId}`;\n      queueKeys.delete(key);\n\n      updateMember(github, slackClient, member);\n    }, 9000); // 7/min 60s 1min = 1 ttes les 8.5s max\n  };\n\n  const scheduleUpdateMember = (\n    github: Octokit,\n    slackClient: WebClient,\n    member: OrgMember,\n  ): void => {\n    const memberId = member.slack?.id;\n    if (!memberId) return;\n\n    const key = `${member.org.id}_${memberId}`;\n\n    if (!queueKeys.has(key)) {\n      queueKeys.add(key);\n      queue.push({\n        github,\n        slackClient,\n        member,\n      });\n      start();\n    }\n  };\n\n  const scheduleUpdateOrg = async (\n    github: Octokit,\n    org: Org,\n    slackClient = new WebClient(org.slackToken),\n  ): Promise<void> => {\n    const cursor = await mongoStores.orgMembers.cursor();\n    cursor.forEach((member) => {\n      scheduleUpdateMember(github, slackClient, member);\n    });\n  };\n\n  const scheduleUpdateAllOrgs = async (\n    auth: (installationId: number) => Promise<Octokit>,\n  ): Promise<void> => {\n    const cursor = await mongoStores.orgs.cursor();\n    cursor.forEach(async (org) => {\n      if (!org.slackToken || !org.installationId) return;\n      const github = await auth(org.installationId);\n      await scheduleUpdateOrg(github, org);\n    });\n  };\n\n  return {\n    scheduleUpdateMember,\n    scheduleUpdateOrg,\n    scheduleUpdateAllOrgs,\n  };\n};\n","/* eslint-disable @typescript-eslint/no-floating-promises */\nimport 'dotenv/config';\nimport { run } from 'probot';\nimport appRouter from './appRouter';\nimport type { AppContext } from './context/AppContext';\nimport initApp from './initApp';\nimport mongoInit from './mongo';\nimport { createSlackHomeWorker } from './slack/home';\n\nif (!process.env.REVIEWFLOW_NAME) process.env.REVIEWFLOW_NAME = 'reviewflow';\n\n// eslint-disable-next-line no-console\nconsole.log({ name: process.env.REVIEWFLOW_NAME });\n\n// const getConfig = require('probot-config')\n// const { MongoClient } = require('mongodb');\n\n// const connect = MongoClient.connect(process.env.MONGO_URL);\n// const db = connect.then(client => client.db(process.env.MONGO_DB));\n\n// let config = await getConfig(context, 'reviewflow.yml');\n\nrun((app, { getRouter }) => {\n  const mongoStores = mongoInit();\n  const slackHome = createSlackHomeWorker(mongoStores);\n  const appContext: AppContext = { mongoStores, slackHome };\n  appRouter(app, getRouter, appContext);\n  initApp(app, appContext);\n  slackHome.scheduleUpdateAllOrgs((id: number) => app.auth(id));\n});\n"],"names":["process","env","GITHUB_CLIENT_ID","Error","GITHUB_CLIENT_SECRET","oauth2","AuthorizationCode","client","id","secret","auth","tokenHost","tokenPath","authorizePath","Layout","lang","title","REVIEWFLOW_NAME","children","React","padding","AUTH_SECRET_KEY","signPromisified","promisify","sign","verifyPromisified","verify","secure","SECURE_COOKIE","createRedirectUri","req","host","hostname","PORT","readAuthCookie","strategy","cookie","cookies","algorithm","audience","headers","getAuthInfoFromCookie","res","authInfo","clearCookie","undefined","createApi","accessToken","Octokit","getUser","redirect","api","router","get","next","redirectUri","githubAuth","authorizeURL","redirect_uri","scope","err","httpOnly","send","renderToStaticMarkup","query","error","error_description","code","getToken","token","access_token","user","users","getAuthenticated","data","login","time","Date","now","expiresIn","home","orgs","listForAuthenticatedUser","display","flexGrow","map","org","config","autoAssignToCreator","trimTitle","requiresReviewRequest","prDefaultOptions","autoMerge","autoMergeWithSkipCi","deleteAfterMerge","parsePR","regExp","createStatusInfo","match","type","summary","groups","dev","christophehurpeau","tilap","waitForGroups","teams","labels","list","name","color","review","ci","inProgress","succeeded","failed","needsReview","requested","changesRequested","approved","ignoreRepoPattern","autoMergeRenovateWithSkipCi","status","prInfo","isPrFromBot","issue","inBody","url","head","bot","idealBranchName","replace","base","botUsers","design","groupsGithubTeams","ops","githubTeamName","logins","backends","frontends","description","duplicate","documentation","rfc","bug","enhancement","question","wontfix","chrisconfig","accountConfigs","ornikar","reviewflow","ExcludesFalsy","Boolean","ExcludesNullish","syncOrg","mongoStores","octokit","installationId","orgInStore","upsertOne","_id","orgEmbed","memberIds","paginate","iterator","listMembers","Promise","all","member","push","orgMembers","deleteMany","$not","$in","syncTeamMembers","team","listMembersInOrg","team_slug","slug","currentIterationMemberIds","filter","partialUpdateMany","memberId","$ne","$push","$pull","syncTeams","teamEmbeds","teamIds","orgTeams","syncTeamsAndTeamMembers","syncUser","github","userInfo","getOrCreateAccount","accountInfo","findByKey","defaultDmSettings","cache","Map","getDefaultDmSettings","accountConfig","defaultConfig","updateCache","userId","newSettings","orgCache","set","getUserDmSettings","orgId","orgDefaultDmSettings","userDmSettingsConfig","userDmSettings","findOne","settings","getKeys","o","Object","keys","emojiRegex","createEmojiRegex","getEmojiFromRepoDescription","startsWith","emoji","exec","voidTeamSlack","mention","postMessage","resolve","updateMessage","deleteMessage","addReaction","updateHome","updateSlackMember","shouldShowLoginMessage","getSlackAccountFromAccount","account","slackToken","slack","initTeamSlack","slackHome","context","githubLoginToSlackEmail","reduce","acc","groupName","assign","slackEmails","values","orgSlackClient","WebClient","membersInDb","findAll","members","foundEmailMembers","entries","forEach","email","find","m","im","length","missingEmails","includes","memberEmailToGithubLogin","memberEmailToMemberId","page","profile","partialUpdateByKey","$set","membersMap","has","teamId","getSlackClient","canUseExternalSlack","openConversation","slackClient","conversations","open","channel","log","githubLogin","endsWith","slice","category","toAccount","message","debug","DRY_RUN","result","chat","username","text","blocks","attachments","secondaryBlocks","thread_ts","ts","ok","update","delete","reactions","add","timestamp","scheduleUpdateMember","userLogin","getTeamsAndGroups","some","teamNames","teamName","initAccountContext","appContext","payload","installation","initSlack","slackPromise","githubLoginToGroup","githubTeamNameToGroup","githubLoginToTeams","updateGithubTeamMembers","getReviewerGroups","githubLogins","Set","getGithubTeamsGroups","githubTeamNames","lock","Lock","accountEmbed","callback","reject","logInfos","info","createReleaseCallback","release","getReviewerGroup","getTeamGroup","getTeamsForLogin","getMembersForTeam","cursor","limit","toArray","approveShouldWait","reviewerGroup","pullRequest","includesReviewerGroup","includesWaitForGroups","requested_reviewers","requested_teams","requestedReviewerGroups","request","group","accountContextsPromise","accountContexts","getExistingAccountContext","existingAccountContext","existingPromise","obtainAccountContext","existingAccountContextPromise","promise","then","accountContext","dmMessages","orgSettings","octokitApp","params","authenticatedUserOrgs","orgInDb","apps","getOrgInstallation","catch","orgMember","teamsAndGroups","marginTop","encodeURIComponent","join","width","key","__html","patch","bodyParser","json","body","collection","updateOne","value","updated","$setOnInsert","created","upsert","repository","repos","per_page","repo","owner","permissions","admin","data2","getRepoInstallation","SLACK_CLIENT_ID","SLACK_CLIENT_SECRET","createSlackOAuth2","apiVersion","slackOAuth2","parseJSONSafe","string","JSON","parse","slackConnect","Number","orgLogin","state","stringify","isInstall","partialUpdateOne","user_id","split","team_id","identity","userSettings","u","getUserInstallation","appRouter","app","getRouter","use","cookieParser","handlerOrgChange","organization","createHandlerOrgChange","membershipChanged","on","orgMemberAddedOrRemoved","teamChanged","checkIfUserIsBot","repoContext","checkIfIsThisBot","areCommitsAllMadeByBots","commits","every","c","author","updateBranch","ref","merge","sha","issues","createComment","issue_number","number","options","optionsRegexps","option","regexp","RegExp","optionsDescriptions","labelKey","icon","parseOptions","content","defaultOptions","parseCommitNotes","commitNotes","trim","parseBody","hasLabelInPR","prLabels","label","l","readPullRequestCommits","pr","pull_request","pulls","listCommits","pull_number","hasFailedStatusOrChecks","checks","listForRef","failedChecks","check_runs","check","conclusion","combinedStatus","getCombinedStatusForRef","failedStatuses","statuses","autoMergeIfPossible","reviewflowPrContext","autoMergeLabel","removePrFromAutomergeQueue","isRenovatePr","createMergeLockPrFromPr","branch","addLog","action","repoFullName","full_name","automergeLogs","insertOne","isRenovate","mergeableState","mergeable_state","hasNeedsReview","hasRequestedReview","lockedPr","getMergeLockedPr","String","prId","prNumber","lockedPrNumber","pushAutomergeQueue","addMergeLockPr","mergeable","prResult","merged","reschedule","renovateRebaseBody","parsedBody","commentBody","mergeResult","merge_method","commit_title","commit_message","errorMessage","defaultCommentBody","toMarkdownOptions","repoLink","labelsConfig","iconValue","checkboxWithId","labelDescription","labelLink","toMarkdownInfos","infos","getReplacement","updateOptions","optionsToUpdate","internalUpdateBodyOptionsAndInfos","infosAndCommitNotesParagraph","createCommentBody","updateCommentOptions","updatedOptions","updateCommentBodyInfos","updateCommentBodyCommitsNotes","removeDeprecatedReviewflowInPrBody","prBody","createReviewflowComment","pullRequestNumber","getReviewflowCommentById","commentId","getComment","comment_id","getReviewflowPrContext","reviewflowCommentPromise","prEmbed","comment","reviewflowPr","prs","repoEmbed","existing","fetchPr","getLabelsForRepo","listLabelsForRepo","initRepoLabels","finalLabels","labelConfig","labelColor","existingLabel","createLabel","current_name","updateLabel","new_name","shouldIgnoreRepo","repoName","ignoreRepoRegexp","test","createGetReviewLabelIds","shouldIgnore","reviewGroupNames","initRepoContext","fullName","repoEmoji","create","getReviewLabelIds","needsReviewLabelIds","requestedReviewLabelIds","changesRequestedLabelIds","approvedReviewLabelIds","protectedLabelIds","labelIdToGroupName","reviewGroupLabels","lockMergePr","automergeQueue","lockPR","prOrPrIssueId","setTimeout","hasChangesRequestedReview","hasApprovesReview","getNeedsReviewGroupNames","console","reason","shift","previousLength","p","lockPullRequest","repoContextsPromise","repoContexts","obtainRepoContext","existingRepoContext","createRepoHandler","createPullRequestHandler","getPullRequestInPayload","callbackPr","callbackBeforeLock","createPullRequestsHandler","getPrs","checkrunCompleted","check_run","pull_requests","updatedPr","checksuiteCompleted","check_suite","createLink","createPrLink","html_url","createOwnerPart","ownerMention","sendTo","isAssignedTo","assignees","a","createStatus","createCommitStatus","target_url","addStatusCheck","previousSha","hasPrCheck","head_sha","started_at","created_at","completed_at","toISOString","output","updateStatusCheckFromLabels","createFailedStatusCheck","rr","rt","needsReviewGroupNames","updateReviewStatus","reviewGroup","labelsToAdd","remove","labelsToRemove","newLabelNames","toAdd","toAddNames","toDelete","toDeleteNames","getLabelFromKey","reviewConfig","prLabel","size","addLabels","toDeleteName","removeLabel","warn","newLabelNamesArray","oldLabels","setLabels","getReviewersAndReviewStates","userIds","reviewers","reviewStatesByUser","listReviews","reviews","toUpperCase","reviewStates","dismissed","reviewer","getRolesFromPullRequestAndReviewers","assigneeIds","followers","requestedReviewers","isRequestedByName","requestedByTeams","f","closed","isNotFork","git","deleteRef","requestedReviewer","assignee","senderMention","sender","prLink","slackUtils","createMessage","to","ownerPart","follower","createMrkdwnSectionBlock","createSlackMessageWithSecondaryBlock","secondaryBlockText","getPullRequestFromPayload","issueParser","actions","issuePrefixes","parseMentions","mentions","slackifyCommentBody","multipleLines","slackifyMarkdown","getDiscussion","in_reply_to_id","listReviewComments","getMentions","discussion","getUsersInThread","prCommentCreated","saveInDb","results","filtered","slackSentMessages","typeId","sentTo","prUser","pull_request_review_id","commentByOwner","usersInThread","prUrl","commentLink","toOwner","promisesOwner","promisesNotOwner","slackifiedBody","start_line","isBotUser","slackMessage","updatePrCommentBody","newBody","updateComment","updatePrCommentBodyIfNeeded","updatePrCommentBodyOptions","syncLabel","shouldHaveLabel","prHasLabel","onRemove","onAdd","response","calcDefaultOptions","automergeLabel","skipCiLabel","prHasSkipCiLabel","prHasAutoMergeLabel","syncLabelsAfterCommentBodyEdited","prCommentEditedOrDeleted","closed_at","criteria","sentMessages","sentMessage","readCommitsAndUpdateInfos","conventionalCommits","commit","breakingChangesCommits","index","breakingChangesNotes","notes","note","breakingChangesLabel","newCommentBody","cleanNewLines","checkIfHasDiff","text1","text2","updatePrIfNeeded","hasDiffInTitle","hasDiffInBody","diff","cleanTitle","s","arg1","arg2","toLowerCase","editOpenedPR","shouldUpdateCommentBodyInfos","parsePRValue","errorStatus","parsePRKey","rules","rule","date","hasLintPrCheck","promises","commentBodyInfos","REVIEWFLOW_APP_URL","shouldCreateCommentBody","edited","updatedPullRequest","isFromRenovate","labelsChanged","fromRenovate","codeApprovedLabel","codeNeedsReviewLabel","autoMergeSkipCiLabel","createReview","event","updateBranchLabel","autoApproveAndAutoMerge","autoAssignPRToCreator","addAssignees","opened","reopened","reviewDismissed","hasChangesRequestedInReviews","hasApprovals","hasRequestedReviewsForGroup","reviewRequestRemoved","requested_reviewer","requestedTeam","requested_team","hasApprovedInReviews","assigneesLogins","potentialReviewer","sentMessageRequestedReview","deleteOne","reviewRequested","getEmojiFromState","reviewSubmitted","reviewUrl","isReviewByOwner","filteredFollowers","newLabels","isSameBranch","branches","b","synchronize","before","repoEdited","initApp","openedHandler","editedHandler","closedHandler","reopenedHandler","reviewRequestedHandler","reviewRequestRemovedHandler","reviewSubmittedHandler","reviewDismissedHandler","synchronizeHandler","commentCreated","commentEditedOrDeleted","MONGO_DB","init","MONGO_HOST","MONGO_PORT","MONGO_USER","MONGO_PASSWORD","connection","MongoConnection","MongoStore","coll","createIndex","unique","$lt","createSlackHomeWorker","updateMember","prsWithRequestedReviews","prsToMerge","prsWithRequestedChanges","prsInDraft","search","issuesAndPullRequests","q","sort","order","buildBlocks","total_count","items","repository_url","prFullName","elements","draft","image_url","avatar_url","alt_text","flat","views","publish","view","workerInterval","queueKeys","queue","stop","clearInterval","start","setInterval","item","scheduleUpdateOrg","scheduleUpdateAllOrgs","run","mongoInit"],"mappings":"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"}