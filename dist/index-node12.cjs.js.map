{"version":3,"file":"index-node12.cjs.js","sources":["../src/auth/github.ts","../src/views/Layout.tsx","../src/app/auth.tsx","../src/app/home.tsx","../src/accountConfigs/christophehurpeau.ts","../src/accountConfigs/defaultConfig.ts","../src/accountConfigs/ornikar.ts","../src/accountConfigs/reviewflow.ts","../src/accountConfigs/index.ts","../src/utils/Excludes.ts","../src/events/account-handlers/actions/syncOrg.ts","../src/events/account-handlers/actions/syncTeamMembers.ts","../src/events/account-handlers/actions/syncTeams.ts","../src/events/account-handlers/actions/syncUser.ts","../src/context/getOrCreateAccount.ts","../src/dm/defaultDmSettings.ts","../src/dm/getUserDmSettings.ts","../src/context/utils.ts","../src/context/slack/voidTeamSlack.ts","../src/context/slack/initTeamSlack.ts","../src/context/accountContext.ts","../src/app/org-settings.tsx","../src/app/repository.tsx","../src/auth/slack.ts","../src/app/slack-connect.tsx","../src/app/user-settings.tsx","../src/appRouter.tsx","../src/events/account-handlers/utils/handler.ts","../src/events/account-handlers/membershipChanged.ts","../src/events/account-handlers/orgMemberAddedOrRemoved.ts","../src/events/account-handlers/teamChanged.ts","../src/events/pr-handlers/utils/isBotUser.ts","../src/events/pr-handlers/actions/updateBranch.ts","../src/events/pr-handlers/actions/utils/body/prOptions.ts","../src/events/pr-handlers/actions/utils/body/parseBody.ts","../src/events/pr-handlers/actions/utils/hasLabelInPR.ts","../src/events/pr-handlers/actions/utils/readPullRequestCommits.ts","../src/events/pr-handlers/actions/autoMergeIfPossible.ts","../src/events/pr-handlers/actions/utils/body/updateBody.ts","../src/events/pr-handlers/utils/reviewflowComment.ts","../src/events/pr-handlers/utils/createPullRequestContext.ts","../src/events/pr-handlers/utils/fetchPr.ts","../src/context/initRepoLabels.ts","../src/context/repoContext.ts","../src/events/repository-handlers/utils/createRepoHandler.ts","../src/events/pr-handlers/utils/createPullRequestHandler.ts","../src/events/pr-handlers/checkrunCompleted.ts","../src/events/pr-handlers/checksuiteCompleted.ts","../src/slack/utils.ts","../src/events/pr-handlers/actions/utils/createStatus.ts","../src/events/pr-handlers/actions/updateStatusCheckFromLabels.ts","../src/events/pr-handlers/actions/updateReviewStatus.ts","../src/events/pr-handlers/utils/getReviewersAndReviewStates.ts","../src/events/pr-handlers/utils/getRolesFromPullRequestAndReviewers.ts","../src/events/pr-handlers/closed.ts","../src/events/pr-handlers/utils/createSlackMessageWithSecondaryBlock.ts","../src/events/pr-handlers/utils/getPullRequestFromPayload.ts","../src/events/pr-handlers/utils/parseMentions.ts","../src/events/pr-handlers/utils/slackifyCommentBody.ts","../src/events/pr-handlers/commentCreated.ts","../src/events/pr-handlers/actions/updatePrCommentBody.ts","../src/events/pr-handlers/actions/utils/syncLabel.ts","../src/events/pr-handlers/actions/syncLabelsAfterCommentBodyEdited.ts","../src/events/pr-handlers/commentEditedOrDeleted.ts","../src/events/pr-handlers/actions/readCommitsAndUpdateInfos.ts","../src/events/pr-handlers/actions/updatePr.ts","../src/events/pr-handlers/actions/utils/cleanTitle.ts","../src/events/pr-handlers/actions/editOpenedPR.ts","../src/events/pr-handlers/edited.ts","../src/events/pr-handlers/labelsChanged.ts","../src/events/pr-handlers/actions/autoApproveAndAutoMerge.ts","../src/events/pr-handlers/actions/autoAssignPRToCreator.ts","../src/events/pr-handlers/opened.ts","../src/events/pr-handlers/reopened.ts","../src/events/pr-handlers/reviewDismissed.ts","../src/events/pr-handlers/reviewRequestRemoved.ts","../src/events/pr-handlers/reviewRequested.ts","../src/events/pr-handlers/reviewSubmitted.ts","../src/events/pr-handlers/status.ts","../src/events/pr-handlers/synchronize.ts","../src/events/repository-handlers/repoEdited.ts","../src/initApp.ts","../src/mongo.ts","../src/slack/home.ts","../src/index.ts"],"sourcesContent":["import { AuthorizationCode } from 'simple-oauth2';\n\nif (!process.env.GITHUB_CLIENT_ID) {\n  throw new Error('Missing env variable: GITHUB_CLIENT_ID');\n}\n\nif (!process.env.GITHUB_CLIENT_SECRET) {\n  throw new Error('Missing env variable: GITHUB_CLIENT_SECRET');\n}\n\nexport const oauth2 = new AuthorizationCode({\n  client: {\n    id: process.env.GITHUB_CLIENT_ID,\n    secret: process.env.GITHUB_CLIENT_SECRET,\n  },\n  auth: {\n    tokenHost: 'https://github.com',\n    tokenPath: '/login/oauth/access_token',\n    authorizePath: '/login/oauth/authorize',\n  },\n});\n","import type { ReactElement, ReactNode } from 'react';\nimport React from 'react';\n\ninterface LayoutProps {\n  lang?: string;\n  title?: string;\n  children: ReactNode;\n}\n\nexport default function Layout({\n  lang = 'en',\n  title = process.env.REVIEWFLOW_NAME,\n  children,\n}: LayoutProps): ReactElement {\n  return (\n    <html lang={lang}>\n      <head>\n        <meta charSet=\"UTF-8\" />\n        <meta name=\"robots\" content=\"noindex\" />\n        <title>{title}</title>\n        <link\n          rel=\"stylesheet\"\n          type=\"text/css\"\n          href=\"https://christophe.hurpeau.com/index.css\"\n        />\n        <style>{`html,body,html body\n            #container{height:100%} footer{position:absolute;bottom:5px;left:0;right:0;}`}</style>\n      </head>\n      <body>\n        <div style={{ padding: '24px 48px' }}>\n          <div>\n            <h1>{process.env.REVIEWFLOW_NAME}</h1>\n            {children}\n          </div>\n        </div>\n      </body>\n    </html>\n  );\n}\n","import { promisify } from 'util';\nimport { Octokit } from '@octokit/rest';\nimport type { Router, Request, Response } from 'express';\nimport { sign, verify } from 'jsonwebtoken';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport * as githubAuth from '../auth/github';\nimport Layout from '../views/Layout';\n\nif (!process.env.AUTH_SECRET_KEY) {\n  throw new Error('Missing env variable: AUTH_SECRET_KEY');\n}\n\nconst AUTH_SECRET_KEY: string = process.env.AUTH_SECRET_KEY;\n\nconst signPromisified: any = promisify(sign);\nconst verifyPromisified: any = promisify(verify);\n\nconst secure =\n  !!process.env.SECURE_COOKIE && process.env.SECURE_COOKIE !== 'false';\n\nconst createRedirectUri = (req: Request): string => {\n  const host = `http${secure ? 's' : ''}://${req.hostname}${\n    req.hostname === 'localhost' ? `:${process.env.PORT || 3000}` : ''\n  }`;\n  return `${host}/app/login-response`;\n};\n\ninterface AuthInfo {\n  id: number;\n  login: string;\n  accessToken: string;\n  time: number;\n}\n\nconst readAuthCookie = (\n  req: Request,\n  strategy: string,\n): undefined | Promise<undefined | AuthInfo> => {\n  const cookie = req.cookies[`auth_${strategy}`];\n  if (!cookie) return;\n\n  return verifyPromisified(cookie, AUTH_SECRET_KEY, {\n    algorithm: 'HS512',\n    audience: req.headers['user-agent'],\n  });\n};\n\nconst getAuthInfoFromCookie = async (\n  req: Request,\n  res: Response,\n): Promise<undefined | AuthInfo> => {\n  const strategy = 'gh'; // req.params.strategy\n  try {\n    const authInfo = await readAuthCookie(req, strategy);\n\n    if (authInfo?.id) {\n      return authInfo;\n    }\n  } catch {}\n\n  res.clearCookie(`auth_${strategy}`);\n  return undefined;\n};\n\nfunction createApi(accessToken: string): Octokit {\n  return new Octokit({ auth: accessToken });\n}\n\nexport const getUser = async (\n  req: Request,\n  res: Response,\n): Promise<{\n  authInfo: AuthInfo;\n  api: Octokit;\n} | null> => {\n  const authInfo = await getAuthInfoFromCookie(req, res);\n  if (!authInfo) {\n    res.redirect('/app/login');\n    return null;\n  }\n\n  const api = createApi(authInfo.accessToken);\n\n  return {\n    authInfo,\n    api,\n  };\n};\n\nexport default function auth(router: Router): void {\n  router.get(\n    '/login',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req: Request, res: Response, next) => {\n      try {\n        if (await getAuthInfoFromCookie(req, res)) {\n          res.redirect('/app');\n          return;\n        }\n\n        // const state = await randomHex(8);\n        // res.cookie(`auth_${strategy}_${state}`, strategy, {\n        //   maxAge: 10 * 60 * 1000,\n        //   httpOnly: true,\n        //   secure,\n        // });\n\n        const redirectUri = githubAuth.oauth2.authorizeURL({\n          redirect_uri: createRedirectUri(req),\n          scope: 'read:user,repo',\n          // state,\n          // grant_type: options.grantType,\n          // access_type: options.accessType,\n          // login_hint: req.query.loginHint,\n          // include_granted_scopes: options.includeGrantedScopes,\n        });\n\n        // console.log(redirectUri);\n\n        res.redirect(redirectUri);\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n\n  router.get('/logout', (req, res, next) => {\n    try {\n      const strategy = 'gh';\n      res.clearCookie(`auth_${strategy}`, {\n        httpOnly: true,\n        secure,\n      });\n      res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              Logout successful. <a href=\"/app/login\">Login</a>\n            </div>\n          </Layout>,\n        ),\n      );\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  router.get(\n    '/login-response',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next) => {\n      try {\n        if (req.query.error) {\n          res.send(req.query.error_description);\n          return;\n        }\n\n        const strategy = 'gh';\n        const code: string = req.query.code as string;\n        // const state = req.query.state;\n        // const cookieName = `auth_${strategy}_${state}`;\n        // const cookie = req.cookies && req.cookies[cookieName];\n        // if (!cookie) {\n        //   // res.redirect(`/${strategy}/login`);\n        //   res.send(\n        //     '<html><body>No cookie for this state. <a href=\"/app/login\">Retry ?</a></body></html>',\n        //   );\n        //   return;\n        // }\n        // res.clearCookie(cookieName);\n\n        const accessToken = await githubAuth.oauth2.getToken({\n          code,\n          redirect_uri: createRedirectUri(req),\n        });\n\n        if (!accessToken) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>\n                <div>\n                  Could not get access token. <a href=\"/app/login\">Retry ?</a>\n                </div>\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        const api = createApi(accessToken.token.access_token);\n        const user = await api.users.getAuthenticated({});\n        const id = user.data.id;\n        const login = user.data.login;\n\n        const authInfo: AuthInfo = {\n          id,\n          login,\n          accessToken: accessToken.token.access_token,\n          time: Date.now(),\n        };\n        const token = await signPromisified(authInfo, AUTH_SECRET_KEY, {\n          algorithm: 'HS512',\n          audience: req.headers['user-agent'],\n          expiresIn: '10 days',\n        });\n\n        res.cookie(`auth_${strategy}`, token, {\n          httpOnly: true,\n          secure,\n        });\n\n        res.redirect('/app');\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n}\n","import type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function home(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n  mongoStores: MongoStores,\n): void {\n  router.get(\n    '/',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return;\n\n        const orgs = await user.api.orgs.listForAuthenticatedUser();\n\n        res.send(\n          renderToStaticMarkup(\n            <Layout>\n              <div style={{ display: 'flex' }}>\n                <div style={{ flexGrow: 1 }}>\n                  <h4>Choose your account</h4>\n                  <ul>\n                    <li>\n                      <a href=\"/app/user\">{user.authInfo.login}</a>\n                    </li>\n                    {orgs.data.map((org) => (\n                      <li key={org.id}>\n                        <a href={`/app/org/${org.login}`}>{org.login}</a>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </Layout>,\n          ),\n        );\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n}\n","import type { Config } from './types';\n\nconst config: Config<'dev', never> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  requiresReviewRequest: false,\n  prDefaultOptions: {\n    autoMerge: false,\n    autoMergeWithSkipCi: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [\n      {\n        regExp:\n          // eslint-disable-next-line unicorn/no-unsafe-regex\n          /^(?<revert>revert: )?(?<type>build|chore|ci|docs|feat|fix|perf|refactor|style|test)(?<scope>\\([/a-z-]+\\)?((?=:\\s)|(?=!:\\s)))?(?<breaking>!)?(?<subject>:\\s.*)$/,\n        createStatusInfo: (match) => {\n          if (match) {\n            return null;\n          }\n\n          return {\n            type: 'failure',\n            title: 'Title does not match commitlint conventional',\n            summary:\n              'https://www.npmjs.com/package/@commitlint/config-conventional',\n          };\n        },\n      },\n    ],\n  },\n  groups: {\n    dev: {\n      christophehurpeau: 'christophe@hurpeau.com',\n      tilap: 'jlavinh@gmail.com',\n    },\n  },\n  waitForGroups: {\n    dev: [],\n  },\n  teams: {},\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* code */\n      'code/needs-review': {\n        name: ':ok_hand: code/needs-review',\n        color: '#FFD57F',\n      },\n      'code/review-requested': {\n        name: ':ok_hand: code/review-requested',\n        color: '#B2E1FF',\n      },\n      'code/changes-requested': {\n        name: ':ok_hand: code/changes-requested',\n        color: '#e11d21',\n      },\n      'code/approved': {\n        name: ':ok_hand: code/approved',\n        color: '#64DD17',\n      },\n\n      /* auto merge */\n      'merge/automerge': {\n        name: ':vertical_traffic_light: automerge',\n        color: '#64DD17',\n      },\n      'merge/skip-ci': {\n        name: ':vertical_traffic_light: skip-ci',\n        color: '#e1e8ed',\n      },\n      'merge/update-branch': {\n        name: ':arrows_counterclockwise: update branch',\n        color: '#64DD17',\n      },\n\n      /* feature-branch */\n      'feature-branch': {\n        name: 'feature-branch',\n        color: '#7FCEFF',\n      },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        color: '#ef7934',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n      dev: {\n        needsReview: 'code/needs-review',\n        requested: 'code/review-requested',\n        changesRequested: 'code/changes-requested',\n        approved: 'code/approved',\n      },\n    },\n  },\n};\n\nexport default config;\n","import type { Config } from './types';\n\nconst config: Config<never, never> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  requiresReviewRequest: false,\n  prDefaultOptions: {\n    autoMerge: false,\n    autoMergeWithSkipCi: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [],\n  },\n  groups: {},\n  waitForGroups: {},\n  teams: {},\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        color: '#ef7934',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n    },\n  },\n};\n\nexport default config;\n","import type { Config } from './types';\n\nconst config: Config<'dev' | 'design', 'ops' | 'frontends' | 'backends'> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  ignoreRepoPattern: '(infra-.*|devenv)',\n  requiresReviewRequest: true,\n  autoMergeRenovateWithSkipCi: false,\n  prDefaultOptions: {\n    autoMergeWithSkipCi: false,\n    autoMerge: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [\n      {\n        regExp:\n          // eslint-disable-next-line unicorn/no-unsafe-regex\n          /^(?<revert>revert: )?(?<type>build|chore|ci|docs|feat|fix|perf|refactor|style|test)(?<scope>\\([/A-Za-z-]+\\)?((?=:\\s)|(?=!:\\s)))?(?<breaking>!)?(?<subject>:\\s.*)$/,\n        createStatusInfo: (match) => {\n          if (match) {\n            return null;\n          }\n\n          return {\n            type: 'failure',\n            title: 'Title does not match commitlint conventional',\n            summary:\n              'https://www.npmjs.com/package/@commitlint/config-conventional',\n          };\n        },\n      },\n      {\n        regExp: /\\s([A-Z][\\dA-Z]+-(\\d+)|\\[no issue])$/,\n        status: 'jira-issue',\n        createStatusInfo: (match, prInfo, isPrFromBot) => {\n          if (match) {\n            const issue = match[1];\n            if (issue === '[no issue]') {\n              return {\n                type: 'success',\n                title: '✓ No issue',\n                summary: '',\n              };\n            }\n            return {\n              type: 'success',\n              inBody: true,\n              title: `✓ JIRA issue: ${issue}`,\n              summary: `[${issue}](https://ornikar.atlassian.net/browse/${issue})`,\n              url: `https://ornikar.atlassian.net/browse/${issue}`,\n            };\n          }\n\n          if (isPrFromBot) {\n            return {\n              type: 'success',\n              title: 'Title does not have Jira issue but PR created by bot',\n              summary: '',\n            };\n          }\n\n          return {\n            type: 'failure',\n            title: 'Title does not have Jira issue',\n            summary: 'The PR title should end with ONK-0000, or [no issue]',\n          };\n        },\n      },\n    ],\n    head: [\n      {\n        bot: false,\n        regExp:\n          // eslint-disable-next-line unicorn/no-unsafe-regex\n          /^(?<revert>revert-\\d+-)?(?<type>build|chore|ci|docs|feat|fix|perf|refactor|style|test)(?<scope>\\/[a-z-]+)?\\/(?<breaking>!)?(?<subject>.*)(?:-(?<jiraIssue>[A-Z][\\dA-Z]+-(\\d+)))?$/,\n        status: 'branch-name',\n        createStatusInfo: (match, { title }) => {\n          const idealBranchName = title\n            .replace(/\\s*\\[no issue]$/, '')\n            .replace(/\\s*(\\(|\\):|:)\\s*/g, '/')\n            .replace(/[\\s,_-]+/g, '-');\n\n          if (!match) {\n            return {\n              type: 'failure',\n              title: `Suggested branch name: \"${idealBranchName}\"`,\n              summary: '',\n            };\n          }\n\n          if (match[0] === idealBranchName) {\n            return {\n              type: 'success',\n              title: '✓ The branch name matches PR title',\n              summary: '',\n            };\n          }\n\n          return {\n            type: 'success',\n            title: '✓ The branch name is valid',\n            summary: '',\n          };\n        },\n      },\n    ],\n    base: [\n      {\n        regExp: /^(master|main)$/,\n        createStatusInfo: (match) => {\n          if (match) {\n            return null;\n          }\n\n          return {\n            type: 'failure',\n            title: 'PR to branches other than main is not recommended',\n            summary: '',\n            url: 'https://ornikar.atlassian.net/wiki/spaces/TECH/pages/2221900272/Should+I+make+a+feature-branch+or+not',\n          };\n        },\n      },\n    ],\n  },\n\n  botUsers: ['michael-robot'],\n\n  groups: {\n    dev: {},\n    design: {},\n  },\n\n  groupsGithubTeams: {\n    dev: ['ops', 'dev', 'backend', 'frontend', 'frontend-architects'],\n    design: ['design'],\n  },\n\n  teams: {\n    ops: {\n      githubTeamName: 'ops',\n      logins: ['JulienBreux', 'TheR3aLp3nGuinJM', 'AymenBac'],\n      labels: ['teams/ops'],\n    },\n\n    backends: {\n      githubTeamName: 'backend',\n      logins: [\n        'abarreir',\n        'arthurflachs',\n        'damienorny',\n        'Thierry-girod',\n        'darame07',\n        'Pixy',\n        'machartier',\n        'camillebaronnet',\n        'olivier-martinez',\n        'tnesztler',\n      ],\n      labels: ['teams/backend'],\n    },\n\n    frontends: {\n      githubTeamName: 'frontend',\n      logins: [\n        'christophehurpeau',\n        'HugoGarrido',\n        'LentnerStefan',\n        'CorentinAndre',\n        'Mxime',\n        'vlbr',\n        'budet-b',\n        'mdcarter',\n        'ChibiBlasphem',\n        'PSniezak',\n        'aenario',\n        'Goldiggy',\n      ],\n      labels: ['teams/frontend'],\n    },\n  },\n\n  waitForGroups: {\n    dev: [],\n    design: ['dev'],\n  },\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* code */\n      'code/needs-review': {\n        name: ':ok_hand: code/needs-review',\n        color: '#FFC44C',\n      },\n      'code/review-requested': {\n        name: ':ok_hand: code/review-requested',\n        color: '#DAE1E6',\n      },\n      'code/changes-requested': {\n        name: ':ok_hand: code/changes-requested',\n        color: '#e11d21',\n      },\n      'code/approved': {\n        name: ':ok_hand: code/approved',\n        color: '#64DD17',\n      },\n\n      /* design */\n      'design/needs-review': {\n        name: ':art: design/needs-review',\n        color: '#FFC44C',\n      },\n      'design/review-requested': {\n        name: ':art: design/review-requested',\n        color: '#DAE1E6',\n      },\n      'design/changes-requested': {\n        name: ':art: design/changes-requested',\n        color: '#e11d21',\n      },\n      'design/approved': {\n        name: ':art: design/approved',\n        color: '#64DD17',\n      },\n\n      /* teams */\n      'teams/ops': {\n        name: 'ops',\n        color: '#003b55',\n      },\n      'teams/backend': {\n        name: 'backend',\n        color: '#6ad8cb',\n      },\n      'teams/frontend': {\n        name: 'frontend',\n        color: '#8a5abc',\n      },\n\n      /* auto merge */\n      'merge/automerge': {\n        name: ':soon: automerge',\n        color: '#64DD17',\n      },\n      'merge/skip-ci': {\n        name: ':vertical_traffic_light: skip-ci',\n        color: '#e1e8ed',\n      },\n      'merge/update-branch': {\n        name: ':arrows_counterclockwise: update branch',\n        color: '#e1e8ed',\n      },\n\n      /* feature-branch */\n      'feature-branch': {\n        name: 'feature-branch',\n        color: '#7FCEFF',\n      },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        description: 'This issue or pull request will need a new major version',\n        color: '#FF6F00',\n      },\n      duplicate: {\n        name: 'duplicate',\n        description: 'This issue or pull request already exists',\n        color: '#ECEFF1',\n      },\n      documentation: {\n        name: 'documentation',\n        description: 'Improvements or additions to documentation',\n        color: '#7FCEFF',\n      },\n      rfc: {\n        name: 'RFC',\n        description: 'Request For Comments',\n        color: '#FFD3B2',\n      },\n      bug: {\n        name: 'bug',\n        description: \"Something isn't working\",\n        color: '#FF3D00',\n      },\n      enhancement: {\n        name: 'enhancement',\n        description: 'New feature or request',\n        color: '#7FCEFF',\n      },\n      'help-wanted': {\n        name: 'help wanted',\n        description: 'Extra attention is needed',\n        color: '#B1EE8B',\n      },\n      question: {\n        name: 'question',\n        description: 'Further information is requested',\n        color: '#F860A4',\n      },\n      wontfix: {\n        name: 'wontfix',\n        description: 'This will not be worked on',\n        color: '#ECEFF1',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n      dev: {\n        needsReview: 'code/needs-review',\n        requested: 'code/review-requested',\n        changesRequested: 'code/changes-requested',\n        approved: 'code/approved',\n      },\n      design: {\n        needsReview: 'design/needs-review',\n        requested: 'design/review-requested',\n        changesRequested: 'design/changes-requested',\n        approved: 'design/approved',\n      },\n    },\n  },\n};\n\nexport default config;\n","import chrisconfig from './christophehurpeau';\n// import ornikarconfig from './ornikar';\nimport type { Config } from './types';\n\nconst config: Config<'dev', never> = {\n  ...chrisconfig,\n  requiresReviewRequest: true,\n  groups: {\n    dev: {\n      christophehurpeau: 'christophe@hurpeau.com',\n      'chris-reviewflow': 'christophe.hurpeau+reviewflow@gmail.com',\n    },\n  },\n  // parsePR: ornikarconfig.parsePR,\n};\nexport default config;\n","import christophehurpeau from './christophehurpeau';\nimport defaultConfig from './defaultConfig';\nimport ornikar from './ornikar';\nimport reviewflow from './reviewflow';\nimport type { Config as ConfigType } from './types';\n\nexport type Config<\n  GroupNames extends string = any,\n  TeamNames extends string = any,\n> = ConfigType<GroupNames, TeamNames>;\n\nexport const accountConfigs: Record<string, Config> = {\n  ornikar,\n  christophehurpeau,\n  reviewflow,\n};\n\nexport { defaultConfig };\n\n// flat requires node 11\n// export const getMembers = <GroupNames extends string = any>(\n//   groups: Record<GroupNames, Group>,\n// ): string[] => {\n//   return Object.values(groups).flat(1);\n// };\n","export const ExcludesFalsy = Boolean as any as <T>(\n  x: T | false | null | undefined,\n) => x is T;\n\nexport const ExcludesNullish = ((res: any) => res !== null) as any as <T>(\n  x: T | null,\n) => x is T;\n","import type { MongoStores, Org } from '../../../mongo';\nimport type { Octokit } from '../../../octokit';\n\ninterface OrgInfo {\n  login: string;\n  id: number;\n}\n\nexport const syncOrg = async <T extends Octokit>(\n  mongoStores: MongoStores,\n  octokit: T,\n  installationId: number,\n  org: OrgInfo,\n): Promise<Org> => {\n  const orgInStore = await mongoStores.orgs.upsertOne({\n    _id: org.id,\n    login: org.login,\n    installationId,\n  });\n\n  const orgEmbed = { id: org.id, login: org.login };\n\n  const memberIds: number[] = [];\n\n  for await (const { data } of octokit.paginate.iterator(\n    octokit.orgs.listMembers,\n    { org: org.login },\n  )) {\n    await Promise.all(\n      data.map(async (member) => {\n        if (!member) return;\n        memberIds.push(member.id);\n        return Promise.all([\n          mongoStores.orgMembers.upsertOne<'teams'>(\n            {\n              _id: `${org.id}_${member.id}`,\n              org: orgEmbed,\n              user: {\n                id: member.id,\n                login: member.login,\n              },\n            },\n            {\n              teams: [], // teams is synced in syncTeamMembers\n            },\n          ),\n          mongoStores.users.upsertOne({\n            _id: member.id,\n            login: member.login,\n            type: member.type,\n          }),\n        ]);\n      }),\n    );\n  }\n\n  await mongoStores.orgMembers.deleteMany({\n    'org.id': org.id,\n    'user.id': { $not: { $in: memberIds } },\n  });\n\n  return orgInStore;\n};\n","import type { MongoStores, OrgTeamEmbed } from '../../../mongo';\nimport type { Octokit } from '../../../octokit';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\n\nexport const syncTeamMembers = async (\n  mongoStores: MongoStores,\n  octokit: Octokit,\n  org: { login: string; id: number },\n  team: OrgTeamEmbed,\n): Promise<void> => {\n  const memberIds: number[] = [];\n  for await (const { data } of octokit.paginate.iterator(\n    octokit.teams.listMembersInOrg,\n    {\n      org: org.login,\n      team_slug: team.slug,\n    },\n  )) {\n    const currentIterationMemberIds = data\n      .filter(ExcludesFalsy)\n      .map((member) => member.id);\n    memberIds.push(...currentIterationMemberIds);\n\n    await mongoStores.orgMembers.partialUpdateMany(\n      {\n        _id: {\n          $in: currentIterationMemberIds.map(\n            (memberId) => `${org.id}_${memberId}`,\n          ),\n        },\n        'org.id': org.id,\n        'teams.id': { $ne: team.id },\n      },\n      { $push: { teams: team } },\n    );\n  }\n\n  await mongoStores.orgMembers.partialUpdateMany(\n    {\n      'org.id': org.id,\n      'user.id': { $not: { $in: memberIds } },\n    },\n    { $pull: { teams: { id: team.id } } },\n  );\n};\n\nexport const syncTeamMembersWithTeamParents = async (\n  mongoStores: MongoStores,\n  octokit: Octokit,\n  org: { login: string; id: number },\n  team: OrgTeamEmbed,\n): Promise<void> => {};\n","import type { MongoStores, OrgTeamEmbed } from '../../../mongo';\nimport type { Octokit } from '../../../octokit';\nimport { syncTeamMembers } from './syncTeamMembers';\n\nexport const syncTeams = async (\n  mongoStores: MongoStores,\n  octokit: Octokit,\n  org: { login: string; id: number },\n): Promise<OrgTeamEmbed[]> => {\n  const orgEmbed = { id: org.id, login: org.login };\n\n  const teamEmbeds: OrgTeamEmbed[] = [];\n  const teamIds: number[] = [];\n\n  for await (const { data } of octokit.paginate.iterator(octokit.teams.list, {\n    org: org.login,\n  })) {\n    await Promise.all(\n      data.map(async (team) => {\n        teamIds.push(team.id);\n        teamEmbeds.push({\n          id: team.id,\n          name: team.name,\n          slug: team.slug,\n        });\n        return mongoStores.orgTeams.upsertOne({\n          _id: team.id,\n          org: orgEmbed,\n          name: team.name,\n          slug: team.slug,\n          description: team.description,\n        });\n      }),\n    );\n  }\n\n  await Promise.all([\n    mongoStores.orgTeams.deleteMany({\n      'org.id': org.id,\n      _id: { $not: { $in: teamIds } },\n    }),\n\n    mongoStores.orgMembers.partialUpdateMany(\n      {\n        'org.id': org.id,\n      },\n      { $pull: { teams: { id: { $not: { $in: teamIds } } } } },\n    ),\n  ]);\n\n  return teamEmbeds;\n};\n\nexport const syncTeamsAndTeamMembers = async (\n  mongoStores: MongoStores,\n  octokit: Octokit,\n  org: { login: string; id: number },\n): Promise<void> => {\n  const teams = await syncTeams(mongoStores, octokit, org);\n  for (const team of teams) {\n    await syncTeamMembers(mongoStores, octokit, org, team);\n  }\n};\n","import type { MongoStores, User } from '../../../mongo';\nimport type { Octokit } from '../../../octokit';\n\ninterface UserInfo {\n  login: string;\n  id: number;\n}\n\nexport const syncUser = async (\n  mongoStores: MongoStores,\n  github: Octokit,\n  installationId: number,\n  userInfo: UserInfo,\n): Promise<User> => {\n  const user = await mongoStores.users.upsertOne({\n    _id: userInfo.id,\n    login: userInfo.login,\n    type: 'User',\n    installationId,\n  });\n\n  return user;\n};\n","import { syncOrg } from '../events/account-handlers/actions/syncOrg';\nimport { syncTeamsAndTeamMembers } from '../events/account-handlers/actions/syncTeams';\nimport { syncUser } from '../events/account-handlers/actions/syncUser';\nimport type { Org, User } from '../mongo';\nimport type { Octokit } from '../octokit';\nimport type { AppContext } from './AppContext';\n\nexport interface AccountInfo {\n  id: number;\n  login: string;\n  type: string;\n}\n\nexport const getOrCreateAccount = async (\n  { mongoStores }: AppContext,\n  github: Octokit,\n  installationId: number,\n  accountInfo: AccountInfo,\n): Promise<Org | User> => {\n  switch (accountInfo.type) {\n    case 'Organization': {\n      let org = await mongoStores.orgs.findByKey(accountInfo.id);\n      if (org?.installationId) return org;\n\n      // TODO diff org vs user...\n      org = await syncOrg(mongoStores, github, installationId, accountInfo);\n      await syncTeamsAndTeamMembers(mongoStores, github, accountInfo);\n      return org;\n    }\n\n    case 'User': {\n      let user = await mongoStores.users.findByKey(accountInfo.id);\n      if (user?.installationId) return user;\n\n      user = await syncUser(mongoStores, github, installationId, accountInfo);\n      return user;\n    }\n\n    default:\n      throw new Error(`Account type not supported ${accountInfo.type}`);\n  }\n};\n","import type { MessageCategory } from './MessageCategory';\n\nexport const defaultDmSettings: Record<MessageCategory, boolean> = {\n  'pr-lifecycle': true,\n  'pr-lifecycle-follow': true,\n  'pr-review': true,\n  'pr-review-follow': true,\n  'pr-comment': true,\n  'pr-comment-bots': true,\n  'pr-comment-follow': true,\n  'pr-comment-follow-bots': false,\n  'pr-comment-mention': true,\n  'pr-comment-thread': true,\n  'pr-merge-conflicts': true,\n  'issue-comment-mention': true,\n};\n","import { accountConfigs, defaultConfig } from '../accountConfigs';\nimport type { MongoStores } from '../mongo';\nimport type { MessageCategory } from './MessageCategory';\nimport { defaultDmSettings } from './defaultDmSettings';\n\nexport type UserDmSettings = Record<MessageCategory, boolean>;\nconst cache = new Map<string, Map<number, UserDmSettings>>();\n\nconst getDefaultDmSettings = (org: string): UserDmSettings => {\n  const accountConfig = accountConfigs[org] || defaultConfig;\n  return accountConfig.defaultDmSettings\n    ? { ...defaultDmSettings, ...accountConfig.defaultDmSettings }\n    : defaultDmSettings;\n};\n\nexport const updateCache = (\n  org: string,\n  userId: number,\n  newSettings: Partial<UserDmSettings>,\n): void => {\n  let orgCache = cache.get(org);\n  if (!orgCache) {\n    orgCache = new Map();\n    cache.set(org, orgCache);\n  }\n  orgCache.set(userId, { ...getDefaultDmSettings(org), ...newSettings });\n};\n\nexport const getUserDmSettings = async (\n  mongoStores: MongoStores,\n  org: string,\n  orgId: number,\n  userId: number,\n): Promise<UserDmSettings> => {\n  const orgDefaultDmSettings = getDefaultDmSettings(org);\n\n  const userDmSettingsConfig = await mongoStores.userDmSettings.findOne({\n    orgId,\n    userId,\n  });\n\n  const config = userDmSettingsConfig\n    ? {\n        ...orgDefaultDmSettings,\n        ...userDmSettingsConfig.settings,\n      }\n    : orgDefaultDmSettings;\n\n  updateCache(org, userId, config);\n  return config;\n};\n","import createEmojiRegex from 'emoji-regex';\n\nexport const getKeys = <T>(o: T): (keyof T)[] => Object.keys(o) as (keyof T)[];\n\nconst emojiRegex = createEmojiRegex();\n\nexport const getEmojiFromRepoDescription = (\n  description: string | null,\n): string => {\n  if (!description) return '';\n  if (description.startsWith(':')) {\n    const [, emoji] = /^(:\\w+:)/.exec(description) || [];\n    return emoji || '';\n  }\n  const match = emojiRegex.exec(description);\n  if (match && description.startsWith(match[0])) return match[0];\n  return '';\n};\n","import type { TeamSlack } from './TeamSlack';\n\nexport const voidTeamSlack = (): TeamSlack => ({\n  mention: (): string => '',\n  postMessage: (): Promise<null> => Promise.resolve(null),\n  updateMessage: (): Promise<null> => Promise.resolve(null),\n  deleteMessage: (): Promise<undefined> => Promise.resolve(undefined),\n  addReaction: (): Promise<undefined> => Promise.resolve(undefined),\n  updateHome: (): void => undefined,\n  updateSlackMember: (): Promise<undefined> => Promise.resolve(undefined),\n  shouldShowLoginMessage: (): boolean => false,\n});\n","import { WebClient } from '@slack/web-api';\nimport type { Context } from 'probot';\nimport type { Config } from '../../accountConfigs';\nimport type { MessageCategory } from '../../dm/MessageCategory';\nimport { getUserDmSettings } from '../../dm/getUserDmSettings';\nimport type { Org, User, MongoStores } from '../../mongo';\nimport type { AppContext } from '../AppContext';\nimport type { AccountInfo } from '../getOrCreateAccount';\nimport { getKeys } from '../utils';\nimport type { SlackMessage } from './SlackMessage';\nimport type { TeamSlack, PostSlackMessageResult } from './TeamSlack';\nimport { voidTeamSlack } from './voidTeamSlack';\n\nexport type { TeamSlack };\n\nasync function getSlackAccountFromAccount(\n  mongoStores: MongoStores,\n  account: Org | User,\n): Promise<string | undefined> {\n  // This is first for legacy org using their own slackToken and slack app. Keep using them.\n  if ('slackToken' in account) return account.slackToken;\n  if ('slackTeamId' in account) {\n    const slackTeam = await mongoStores.slackTeams.findByKey(\n      account.slackTeamId,\n    );\n    return slackTeam?.botAccessToken;\n  }\n  return undefined;\n}\n\ninterface MemberObject {\n  member: {\n    id: string;\n    teamId?: string;\n  };\n  slackClient?: WebClient;\n  im: any;\n}\n\nexport const initTeamSlack = async <GroupNames extends string>(\n  { mongoStores, slackHome }: AppContext,\n  context: Context<any>,\n  config: Config<GroupNames>,\n  account: Org | User,\n): Promise<TeamSlack> => {\n  const slackToken = await getSlackAccountFromAccount(mongoStores, account);\n\n  if (!slackToken) {\n    return voidTeamSlack();\n  }\n\n  // eslint-disable-next-line unicorn/no-array-reduce, unicorn/prefer-object-from-entries -- this will be removed soon\n  const githubLoginToSlackEmail = getKeys(config.groups).reduce<\n    Record<string, string>\n  >((acc, groupName) => {\n    Object.assign(acc, config.groups[groupName]);\n    return acc;\n  }, {});\n\n  const slackEmails = Object.values(githubLoginToSlackEmail);\n  const orgSlackClient = new WebClient(slackToken);\n\n  const membersInDb = await mongoStores.orgMembers.findAll({\n    'org.id': account._id,\n  });\n\n  const members: [string, MemberObject][] = [];\n  const foundEmailMembers: string[] = [];\n\n  Object.entries(githubLoginToSlackEmail).forEach(([login, email]) => {\n    const member = membersInDb.find((m) => m.user.login === login);\n    if (member?.slack?.id) {\n      foundEmailMembers.push(email);\n      members.push([login, { member: { id: member.slack.id }, im: undefined }]);\n    }\n  });\n\n  if (foundEmailMembers.length !== slackEmails.length) {\n    const missingEmails = slackEmails.filter(\n      (email) => !foundEmailMembers.includes(email),\n    );\n\n    const memberEmailToGithubLogin = new Map<string, string>(\n      Object.entries(githubLoginToSlackEmail).map(([login, email]) => [\n        email,\n        login,\n      ]),\n    );\n    const memberEmailToMemberId = new Map<string, string>(\n      Object.entries(githubLoginToSlackEmail).map(([login, email]) => [\n        email,\n        membersInDb.find((m) => m.user.login === login)?._id as any,\n      ]),\n    );\n\n    await orgSlackClient.paginate('users.list', {}, (page: any) => {\n      page.members.forEach((member: any) => {\n        const email = member.profile?.email;\n        if (email && missingEmails.includes(email)) {\n          const login = memberEmailToGithubLogin.get(email);\n          if (!login) return;\n          members.push([login, { member, im: undefined }]);\n          const memberId = memberEmailToMemberId.get(email);\n          if (memberId) {\n            mongoStores.orgMembers.partialUpdateByKey(memberId, {\n              $set: { slack: { id: member.id, email } },\n            });\n          }\n        }\n      });\n      return false;\n    });\n  }\n\n  const membersMap = new Map(members);\n\n  // User added its email but not linked to a slack account yet\n  // Temporary transition before login with slack in the settings\n  membersInDb.forEach((member) => {\n    if (member?.slack?.id && !membersMap.has(member.user.login)) {\n      membersMap.set(member.user.login, {\n        member: { id: member.slack.id, teamId: member.slack.teamId },\n        im: undefined,\n      });\n    }\n  });\n\n  const getSlackClient = (teamId?: string): WebClient | undefined => {\n    if (\n      !teamId ||\n      !('slackTeamId' in account) ||\n      !account.slackTeamId ||\n      account.slackTeamId === teamId\n    ) {\n      return orgSlackClient;\n    }\n\n    if (!account.config.canUseExternalSlack) {\n      return undefined;\n    }\n\n    // TODO support external slack\n    return undefined;\n  };\n\n  const openConversation = async (\n    slackClient: WebClient,\n    userId: string,\n  ): Promise<any> => {\n    try {\n      const im: any = await slackClient.conversations.open({\n        users: userId,\n      });\n      return im.channel;\n    } catch (err) {\n      context.log('could create im', { err });\n    }\n  };\n\n  for (const user of membersMap.values()) {\n    const slackClient = getSlackClient(user.member.teamId);\n    if (slackClient) {\n      user.slackClient = slackClient;\n      const im = await openConversation(slackClient, user.member.id);\n      if (im) user.im = im;\n    }\n  }\n\n  return {\n    mention: (githubLogin: string): string => {\n      // TODO pass AccountInfo instead\n      if (githubLogin.endsWith('[bot]')) {\n        return `:robot_face: ${githubLogin.slice(0, -'[bot]'.length)}`;\n      }\n      const user = membersMap.get(githubLogin);\n      if (!user) return githubLogin;\n      return `<@${user.member.id}>`;\n    },\n    postMessage: async (\n      category: MessageCategory,\n      toAccount: AccountInfo,\n      message: SlackMessage,\n    ): Promise<PostSlackMessageResult> => {\n      context.log.debug(\n        {\n          category,\n          toAccount,\n          message,\n        },\n        'slack: post message',\n      );\n      if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return null;\n\n      const userDmSettings = await getUserDmSettings(\n        mongoStores,\n        account.login,\n        account._id,\n        toAccount.id,\n      );\n\n      if (!userDmSettings[category]) return null;\n\n      const user = membersMap.get(toAccount.login);\n      if (!user || !user.slackClient || !user.im) return null;\n\n      const result = await user.slackClient.chat.postMessage({\n        username: process.env.REVIEWFLOW_NAME,\n        channel: user.im.id,\n        text: message.text,\n        blocks: message.blocks,\n        attachments: message.secondaryBlocks\n          ? [{ blocks: message.secondaryBlocks }]\n          : undefined,\n        thread_ts: message.ts,\n      });\n      if (!result.ok) return null;\n      return { ts: result.ts as string, channel: result.channel as string };\n    },\n    updateMessage: async (\n      toAccount: AccountInfo,\n      ts: string,\n      channel: string,\n      message: SlackMessage,\n    ): Promise<PostSlackMessageResult> => {\n      context.log.debug({ ts, channel, message }, 'slack: update message');\n      if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return null;\n\n      const user = membersMap.get(toAccount.login);\n      if (!user || !user.slackClient || !user.im) return null;\n\n      const result = await user.slackClient.chat.update({\n        ts,\n        channel,\n        text: message.text,\n        blocks: message.blocks,\n        attachments: message.secondaryBlocks\n          ? [{ blocks: message.secondaryBlocks }]\n          : undefined,\n      });\n      if (!result.ok) return null;\n      return { ts: result.ts as string, channel: result.channel as string };\n    },\n    deleteMessage: async (\n      toAccount: AccountInfo,\n      ts: string,\n      channel: string,\n    ): Promise<void> => {\n      context.log.debug({ ts, channel }, 'slack: delete message');\n\n      const user = membersMap.get(toAccount.login);\n      if (!user || !user.slackClient || !user.im) return;\n\n      await user.slackClient.chat.delete({\n        ts,\n        channel,\n      });\n    },\n    addReaction: async (\n      toAccount: AccountInfo,\n      ts: string,\n      channel: string,\n      name: string,\n    ): Promise<void> => {\n      context.log.debug({ ts, channel, name }, 'slack: add reaction');\n\n      const user = membersMap.get(toAccount.login);\n      if (!user || !user.slackClient || !user.im) return;\n\n      await user.slackClient.reactions.add({\n        timestamp: ts,\n        channel,\n        name,\n      });\n    },\n    updateHome: (githubLogin: string): void => {\n      context.log.debug({ githubLogin }, 'update slack home');\n\n      const user = membersMap.get(githubLogin);\n      if (!user || !user.slackClient || !user.member) return;\n\n      slackHome.scheduleUpdateMember(context.octokit, user.slackClient, {\n        user: { id: null, login: githubLogin },\n        org: { id: account._id, login: account.login },\n        slack: { id: user.member.id },\n      } as any);\n    },\n\n    updateSlackMember: async (userId, userLogin): Promise<void> => {\n      // delete existing member if existing\n      membersMap.delete(userLogin);\n\n      const member = await mongoStores.orgMembers.findOne({\n        'org.id': account._id,\n        'user.id': userId,\n      });\n\n      if (!member || !member.slack) return;\n\n      const slackClient = getSlackClient(member.slack.teamId);\n      if (slackClient) {\n        const im = await openConversation(slackClient, member.slack.id);\n        membersMap.set(userLogin, {\n          member: { id: member.slack.id },\n          slackClient,\n          im,\n        });\n      }\n    },\n    shouldShowLoginMessage: (githubLogin: string) => {\n      return !membersMap.has(githubLogin);\n    },\n  };\n};\n","import { Lock } from 'lock';\nimport type { Context } from 'probot';\nimport type {\n  PullRequestWithDecentData,\n  PullRequestWithDecentDataFromWebhook,\n} from 'events/pr-handlers/utils/PullRequestData';\nimport type { Config } from '../accountConfigs';\nimport type {\n  Org,\n  User,\n  AccountEmbed,\n  AccountType,\n  AccountEmbedWithoutType,\n  OrgMember,\n} from '../mongo';\nimport { ExcludesFalsy } from '../utils/Excludes';\nimport type { AppContext } from './AppContext';\nimport type { AccountInfo } from './getOrCreateAccount';\nimport { getOrCreateAccount } from './getOrCreateAccount';\nimport type { TeamSlack } from './slack/initTeamSlack';\nimport { initTeamSlack } from './slack/initTeamSlack';\nimport { getKeys } from './utils';\n\nexport interface AccountContext<\n  GroupNames extends string = any,\n  TeamNames extends string = any,\n> {\n  config: Config<GroupNames, TeamNames>;\n  accountEmbed: AccountEmbed;\n  slack: TeamSlack;\n  /** init slack after installation in webapp */\n  initSlack: () => Promise<void>;\n  getReviewerGroup: (githubLogin: string) => GroupNames | undefined;\n  getReviewerGroups: (githubLogins: string[]) => GroupNames[];\n  getTeamGroup: (teamName: string) => GroupNames | undefined;\n  getGithubTeamsGroups: (teamNames: string[]) => GroupNames[];\n  getMembersForTeam: (teamId: string) => Promise<AccountEmbedWithoutType[]>;\n  getTeamsForLogin: (githubLogin: string) => TeamNames[];\n  updateGithubTeamMembers: () => Promise<void>;\n  approveShouldWait: (\n    reviewerGroup: GroupNames | undefined,\n    pullRequest: PullRequestWithDecentData,\n    {\n      includesReviewerGroup,\n      includesWaitForGroups,\n    }: { includesReviewerGroup?: boolean; includesWaitForGroups?: boolean },\n  ) => boolean;\n\n  lock: (callback: () => Promise<void> | void) => Promise<void>;\n}\n\ninterface TeamsAndGroups {\n  groupName?: string;\n  teamNames: string[];\n}\n\nexport const getTeamsAndGroups = (\n  config: Config,\n  member: OrgMember,\n): TeamsAndGroups => {\n  const { groupsGithubTeams, teams } = config;\n\n  const groupName = !groupsGithubTeams\n    ? undefined\n    : (getKeys(groupsGithubTeams).find((groupName) => {\n        return member.teams.some((team) => {\n          return groupsGithubTeams[groupName].includes(team.name);\n        });\n      }) as string);\n\n  const teamNames = getKeys(teams).filter((teamName) => {\n    const githubTeamName = teams[teamName].githubTeamName;\n    if (!githubTeamName) {\n      return teams[teamName].logins.includes(member.user.login);\n    }\n    return member.teams.some((team) => team.name === teamName);\n  });\n  return { groupName, teamNames };\n};\n\nconst initAccountContext = async (\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config,\n  accountInfo: AccountInfo,\n): Promise<AccountContext> => {\n  const account = await getOrCreateAccount(\n    appContext,\n    context.octokit,\n    context.payload.installation.id,\n    accountInfo,\n  );\n  const initSlack = (account: Org | User): ReturnType<typeof initTeamSlack> =>\n    initTeamSlack(appContext, context, config, account);\n  const slackPromise = initSlack(account);\n\n  const githubLoginToGroup = new Map<string, string>();\n  const githubTeamNameToGroup = new Map<string, string>();\n  const githubLoginToTeams = new Map<string, string[]>();\n  // TODO const githubLoginToSlackId = new Map<string, string>();\n\n  for (const groupName of getKeys(config.groups)) {\n    Object.keys(config.groups[groupName]).forEach((login) => {\n      githubLoginToGroup.set(login, groupName);\n    });\n  }\n\n  if (config.groupsGithubTeams) {\n    for (const groupName of getKeys(config.groupsGithubTeams)) {\n      config.groupsGithubTeams[groupName].forEach((teamName) => {\n        githubTeamNameToGroup.set(teamName, groupName);\n      });\n    }\n  }\n\n  const updateGithubTeamMembers = async (): Promise<void> => {\n    if (accountInfo.type !== 'Organization') {\n      return;\n    }\n\n    const members = await appContext.mongoStores.orgMembers.findAll({\n      'org.id': accountInfo.id,\n    });\n\n    members.forEach((member) => {\n      const { groupName, teamNames } = getTeamsAndGroups(config, member);\n      if (groupName) {\n        githubLoginToGroup.set(member.user.login, groupName);\n      }\n      githubLoginToTeams.set(member.user.login, teamNames);\n    });\n  };\n\n  await updateGithubTeamMembers();\n\n  const getReviewerGroups = (githubLogins: string[]): string[] => [\n    ...new Set(\n      githubLogins\n        .map((githubLogin) => githubLoginToGroup.get(githubLogin))\n        .filter(ExcludesFalsy),\n    ),\n  ];\n  const getGithubTeamsGroups = (githubTeamNames: string[]): string[] => [\n    ...new Set(\n      githubTeamNames\n        .map((teamName) => githubTeamNameToGroup.get(teamName))\n        .filter(ExcludesFalsy),\n    ),\n  ];\n\n  const lock = Lock();\n\n  return {\n    config,\n    accountEmbed: {\n      id: accountInfo.id,\n      login: accountInfo.login,\n      type: accountInfo.type as AccountType,\n    },\n    lock: (callback: () => Promise<void> | void): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const logInfos = { account: accountInfo.login };\n        context.log.info(logInfos, 'lock: try to lock account');\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        lock('_', async (createReleaseCallback) => {\n          const release = createReleaseCallback(() => {});\n          context.log.info(logInfos, 'lock: lock account acquired');\n          try {\n            await callback();\n          } catch (err) {\n            context.log.info(logInfos, 'lock: release account (with error)');\n            release();\n            reject(err);\n            return;\n          }\n          context.log.info(logInfos, 'lock: release account');\n          release();\n          resolve();\n        });\n      });\n    },\n    getReviewerGroup: (githubLogin): string | undefined =>\n      githubLoginToGroup.get(githubLogin),\n    getReviewerGroups,\n    getTeamGroup: (githubTeamName): string | undefined =>\n      githubTeamNameToGroup.get(githubTeamName),\n    getGithubTeamsGroups,\n\n    getTeamsForLogin: (githubLogin): string[] =>\n      githubLoginToTeams.get(githubLogin) || [],\n\n    getMembersForTeam: async (teamId): Promise<AccountEmbedWithoutType[]> => {\n      if (accountInfo.type !== 'Organization') {\n        throw new Error(\n          `Invalid account type \"${accountInfo.type}\" for getMembersForTeam`,\n        );\n      }\n      const cursor = await appContext.mongoStores.orgMembers.cursor<\n        Pick<OrgMember, 'user'>\n      >({\n        'org.id': account._id,\n        'teams.id': teamId,\n      });\n      await cursor.limit(100);\n      const orgMembers = await cursor.toArray();\n      return orgMembers.map((member) => member.user);\n    },\n    updateGithubTeamMembers,\n\n    approveShouldWait: (\n      reviewerGroup,\n      pullRequest,\n      { includesReviewerGroup, includesWaitForGroups },\n    ): boolean => {\n      if (\n        !reviewerGroup ||\n        !pullRequest.requested_reviewers ||\n        !pullRequest.requested_teams\n      ) {\n        return false;\n      }\n\n      const requestedReviewerGroups = [\n        ...new Set([\n          ...getReviewerGroups(\n            (\n              pullRequest.requested_reviewers as PullRequestWithDecentDataFromWebhook['requested_reviewers']\n            ).map((request) => request.login),\n          ),\n          ...(!pullRequest.requested_teams\n            ? []\n            : getGithubTeamsGroups(\n                (\n                  pullRequest.requested_teams as PullRequestWithDecentDataFromWebhook['requested_teams']\n                ).map((team) => team.name),\n              )),\n        ]),\n      ];\n\n      // contains another request of a reviewer in the same group\n      if (\n        includesReviewerGroup &&\n        requestedReviewerGroups.includes(reviewerGroup)\n      ) {\n        return true;\n      }\n\n      // contains a request from a dependent group\n      if (config.waitForGroups && includesWaitForGroups) {\n        const waitForGroups = config.waitForGroups;\n        return requestedReviewerGroups.some((group) =>\n          waitForGroups[reviewerGroup].includes(group),\n        );\n      }\n\n      return false;\n    },\n\n    slack: await slackPromise,\n\n    async initSlack(): Promise<void> {\n      // get latest account\n      const account = await getOrCreateAccount(\n        appContext,\n        context.octokit,\n        context.payload.installation.id,\n        accountInfo,\n      );\n      const slack = await initSlack(account);\n      (this as AccountContext).slack = slack;\n    },\n  };\n};\n\nconst accountContextsPromise = new Map();\nconst accountContexts = new Map();\n\nexport const getExistingAccountContext = (\n  accountInfo: AccountInfo,\n): Promise<AccountContext> | null => {\n  const existingAccountContext = accountContexts.get(accountInfo.login);\n  if (existingAccountContext) return Promise.resolve(existingAccountContext);\n\n  const existingPromise = accountContextsPromise.get(accountInfo.login);\n  if (existingPromise) return Promise.resolve(existingPromise);\n\n  return null;\n};\n\nexport const obtainAccountContext = (\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config,\n  accountInfo: AccountInfo,\n): Promise<AccountContext> => {\n  const existingAccountContextPromise = getExistingAccountContext(accountInfo);\n  if (existingAccountContextPromise) return existingAccountContextPromise;\n\n  const promise = initAccountContext(appContext, context, config, accountInfo);\n  accountContextsPromise.set(accountInfo.login, promise);\n\n  return promise.then((accountContext) => {\n    accountContextsPromise.delete(accountInfo.login);\n    accountContexts.set(accountInfo.login, accountContext);\n    return accountContext;\n  });\n};\n","import bodyParser from 'body-parser';\nimport type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { accountConfigs } from '../accountConfigs';\nimport { getTeamsAndGroups } from '../context/accountContext';\nimport type { MessageCategory } from '../dm/MessageCategory';\nimport { getUserDmSettings, updateCache } from '../dm/getUserDmSettings';\nimport { syncOrg } from '../events/account-handlers/actions/syncOrg';\nimport { syncTeamsAndTeamMembers } from '../events/account-handlers/actions/syncTeams';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nconst dmMessages: Record<MessageCategory, string> = {\n  'pr-lifecycle': 'Your PR is closed, merged, reopened',\n  'pr-lifecycle-follow':\n    \"Someone closed, merged, reopened a PR you're reviewing\",\n  'pr-review': 'You are assigned to a review, someone reviewed your PR',\n  'pr-review-follow': \"Someone reviewed a PR you're also reviewing\",\n  'pr-comment': 'Someone commented on your PR',\n  'pr-comment-bots': 'A bot commented on your PR',\n  'pr-comment-follow': \"Someone commented on a PR you're reviewing\",\n  'pr-comment-follow-bots': \"A bot commented on a PR you're reviewing\",\n  'pr-comment-mention': 'Someone mentioned you in a PR',\n  'pr-comment-thread': \"Someone replied to a discussion you're in\",\n  'pr-merge-conflicts': 'Your PR has a merge conflict (not implemented)',\n  'issue-comment-mention':\n    'Someone mentioned you in an issue (not implemented)',\n};\n\nexport default function orgSettings(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n  mongoStores: MongoStores,\n): void {\n  router.get(\n    '/org/:org/force-sync',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return;\n\n        const orgs = await user.api.orgs.listForAuthenticatedUser();\n        const org = orgs.data.find((o) => o.login === req.params.org);\n        if (!org) {\n          res.redirect('/app');\n          return;\n        }\n\n        const o = await mongoStores.orgs.findByKey(org.id);\n        if (!o) {\n          res.redirect('/app');\n          return;\n        }\n\n        await syncOrg(mongoStores, user.api, o.installationId!, org);\n        await syncTeamsAndTeamMembers(mongoStores, user.api, org);\n\n        res.redirect(`/app/org/${req.params.org}`);\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n\n  router.get(\n    '/org/:org',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next): Promise<void> => {\n      const user = await getUser(req, res);\n      try {\n        if (!user) return;\n\n        const authenticatedUserOrgs =\n          await user.api.orgs.listForAuthenticatedUser();\n        const org = authenticatedUserOrgs.data.find(\n          (o) => o.login === req.params.org,\n        );\n        if (!org) {\n          res.redirect('/app');\n          return;\n        }\n\n        const [installation, orgInDb] = await Promise.all([\n          octokitApp.apps\n            .getOrgInstallation({ org: org.login })\n            .catch((err) => {\n              return { status: err.status, data: undefined };\n            }),\n          mongoStores.orgs.findByKey(org.id),\n        ]);\n\n        if (!orgInDb) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>\n                <div>\n                  {process.env.REVIEWFLOW_NAME}\n                  {\" isn't correctly installed. Contact support.\"}\n                </div>\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        const slackTeam = orgInDb.slackTeamId\n          ? await mongoStores.slackTeams.findByKey(orgInDb.slackTeamId)\n          : undefined;\n\n        if (!installation) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>\n                <div>\n                  {process.env.REVIEWFLOW_NAME}{' '}\n                  {\"isn't installed for this user. Go to \"}\n                  <a\n                    href={`https://github.com/settings/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n                  >\n                    Github Configuration\n                  </a>{' '}\n                  to install it.\n                </div>\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        const accountConfig = accountConfigs[org.login];\n        const [orgMember, userDmSettings] = await Promise.all([\n          mongoStores.orgMembers.findOne({\n            'org.id': org.id,\n            'user.id': user.authInfo.id,\n          }),\n          getUserDmSettings(mongoStores, org.login, org.id, user.authInfo.id),\n        ]);\n        const teamsAndGroups = orgMember\n          ? getTeamsAndGroups(accountConfig, orgMember)\n          : { groupName: undefined, teamNames: [] };\n\n        res.send(\n          renderToStaticMarkup(\n            <Layout>\n              <div>\n                <div style={{ display: 'flex' }}>\n                  <h2 style={{ flexGrow: 1 }}>{org.login}</h2>\n                  <a href=\"/app\">Switch account</a>\n                </div>\n\n                <div style={{ display: 'flex' }}>\n                  <div style={{ flexGrow: 1 }}>\n                    <h4>Account Config</h4>\n                    {!accountConfig\n                      ? 'Default config is used: https://github.com/christophehurpeau/reviewflow/blob/master/src/accountConfigs/defaultConfig.ts'\n                      : `Custom config: https://github.com/christophehurpeau/reviewflow/blob/master/src/accountConfigs/${org.login}.ts`}\n\n                    <h4 style={{ marginTop: '1rem' }}>Slack Connection</h4>\n                    {!slackTeam && !orgInDb.slackToken ? (\n                      <>\n                        Slack account yet linked ! Install application to get\n                        notifications for your reviews.\n                        <br />\n                        <a\n                          href={`/app/slack-install?orgId=${encodeURIComponent(\n                            org.id,\n                          )}&orgLogin=${encodeURIComponent(org.login)}`}\n                        >\n                          <img\n                            alt=\"Add to Slack\"\n                            height=\"40\"\n                            width=\"139\"\n                            src=\"https://platform.slack-edge.com/img/add_to_slack.png\"\n                            srcSet=\"https://platform.slack-edge.com/img/add_to_slack.png 1x, https://platform.slack-edge.com/img/add_to_slack@2x.png 2x\"\n                          />\n                        </a>\n                      </>\n                    ) : !orgMember || !orgMember.slack ? (\n                      <>\n                        <div>Slack Team: {slackTeam?.teamName}</div>\n                        Slack account yet linked ! Sign in to get notifications\n                        for your reviews.\n                        <br />\n                        <a\n                          href={`/app/slack-connect?orgId=${encodeURIComponent(\n                            org.id,\n                          )}&orgLogin=${encodeURIComponent(org.login)}`}\n                        >\n                          <img\n                            src=\"https://api.slack.com/img/sign_in_with_slack.png\"\n                            alt=\"Sign in with Slack\"\n                          />\n                        </a>\n                      </>\n                    ) : (\n                      <div>\n                        {!orgInDb.slackToken\n                          ? null\n                          : '⚠ This account use a custom slack application.'}\n                        <div>\n                          Slack Team: {slackTeam?.teamName} (\n                          {orgMember.slack.teamId || slackTeam?._id})\n                        </div>\n                        <div>Slack User ID: {orgMember.slack.id}</div>\n                      </div>\n                    )}\n                    <h4 style={{ marginTop: '1rem' }}>User Information</h4>\n                    {!orgMember ? (\n                      <>User not found in database</>\n                    ) : (\n                      <>\n                        <div>\n                          Group Name: {teamsAndGroups.groupName || 'No groups'}\n                        </div>\n                        <div>\n                          Team Names:{' '}\n                          {teamsAndGroups.teamNames.join(', ') || 'No teams'}\n                        </div>\n                      </>\n                    )}\n                  </div>\n                  <div style={{ width: '380px' }}>\n                    <h4>My DM Settings</h4>\n                    {!orgMember || !orgMember.slack ? (\n                      <>Link your github account to unlock DM Settings</>\n                    ) : (\n                      Object.entries(dmMessages).map(([key, name]) => (\n                        <div key={key}>\n                          <label htmlFor={key}>\n                            <span\n                              // eslint-disable-next-line react/no-danger\n                              dangerouslySetInnerHTML={{\n                                __html: `<input id=\"${key}\" type=\"checkbox\" autocomplete=\"off\" ${\n                                  userDmSettings[key as MessageCategory]\n                                    ? 'checked=\"checked\" '\n                                    : ''\n                                }onclick=\"fetch(location.pathname, { method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ key: '${key}', value: event.currentTarget.checked }) })\" />`,\n                              }}\n                            />\n                            {name}\n                          </label>\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n              </div>\n            </Layout>,\n          ),\n        );\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n\n  router.patch('/org/:org', bodyParser.json(), async (req, res, next) => {\n    try {\n      if (!req.body) {\n        res.status(400).send('not ok');\n        return;\n      }\n\n      const user = await getUser(req, res);\n      if (!user) return;\n\n      const orgs = await user.api.orgs.listForAuthenticatedUser();\n      const org = orgs.data.find((o) => o.login === req.params.org);\n      if (!org) {\n        res.redirect('/app');\n        return;\n      }\n\n      (await mongoStores.userDmSettings.collection).updateOne(\n        {\n          _id: `${org.id}_${user.authInfo.id}`,\n        },\n        {\n          $set: {\n            [`settings.${req.body.key}`]: req.body.value,\n            updated: new Date(),\n          },\n          $setOnInsert: {\n            orgId: org.id,\n            userId: user.authInfo.id,\n            created: new Date(),\n          },\n        },\n        { upsert: true },\n      );\n\n      const userDmSettingsConfig = await mongoStores.userDmSettings.findOne({\n        orgId: org.id,\n        userId: user.authInfo.id,\n      });\n\n      if (userDmSettingsConfig) {\n        updateCache(org.login, user.authInfo.id, userDmSettingsConfig.settings);\n      }\n\n      res.send('ok');\n    } catch (err) {\n      next(err);\n    }\n  });\n}\n","import type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function repository(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n): void {\n  router.get(\n    '/repositories',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return;\n        const { data } = await user.api.repos.listForAuthenticatedUser({\n          per_page: 100,\n        });\n\n        res.send(\n          renderToStaticMarkup(\n            <Layout>\n              <div>\n                <h4>Your repositories</h4>\n                <ul>\n                  {data.map((repo: any) => (\n                    <li key={repo.id}>\n                      <a\n                        href={`/app/repository/${repo.owner.login}/${repo.name}`}\n                      >\n                        {repo.name}\n                      </a>\n                    </li>\n                  ))}\n                </ul>\n\n                {data.length === 100 && (\n                  <div>We currently have a limit to 100 repositories</div>\n                )}\n              </div>\n            </Layout>,\n          ),\n        );\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n\n  router.get(\n    '/repository/:owner/:repository',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return;\n        const { data } = await user.api.repos.get({\n          owner: req.params.owner,\n          repo: req.params.repository,\n        });\n\n        if (!data) {\n          res.status(404).send(\n            renderToStaticMarkup(\n              <Layout>\n                <div>repo not found</div>\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        if (!data.permissions || !data.permissions.admin) {\n          res.status(401).send(\n            renderToStaticMarkup(\n              <Layout>\n                <div>\n                  not authorized to see this repo, you need to have admin\n                  permission\n                </div>\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        const { data: data2 } = await octokitApp.apps\n          .getRepoInstallation({\n            owner: req.params.owner,\n            repo: req.params.repository,\n          })\n          .catch((err) => {\n            return { status: err.status, data: undefined };\n          });\n\n        if (!data2) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>\n                <div>\n                  {process.env.REVIEWFLOW_NAME}{' '}\n                  {\"isn't installed on this repo. Go to \"}\n                  <a\n                    href={`https://github.com/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n                  >\n                    Github Configuration\n                  </a>{' '}\n                  to add it.\n                </div>\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        res.send(\n          renderToStaticMarkup(\n            <Layout>\n              <div>\n                <h4>{req.params.repository}</h4>\n              </div>\n            </Layout>,\n          ),\n        );\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n}\n","import { AuthorizationCode } from 'simple-oauth2';\n\nif (!process.env.SLACK_CLIENT_ID) {\n  throw new Error('Missing env variable: SLACK_CLIENT_ID');\n}\n\nif (!process.env.SLACK_CLIENT_SECRET) {\n  throw new Error('Missing env variable: SLACK_CLIENT_SECRET');\n}\n\ninterface CreateSlackOAuth2Options {\n  id: string;\n  secret: string;\n  apiVersion?: string;\n}\n\nexport const createSlackOAuth2 = ({\n  id,\n  secret,\n  apiVersion = '',\n}: CreateSlackOAuth2Options): AuthorizationCode =>\n  new AuthorizationCode({\n    client: { id, secret },\n    auth: {\n      tokenHost: 'https://slack.com',\n      tokenPath: `/api/oauth.${apiVersion ? `${apiVersion}.` : ''}access`,\n      authorizePath: `/oauth/${apiVersion ? `${apiVersion}/` : ''}authorize`,\n    },\n  });\n\nexport const slackOAuth2 = createSlackOAuth2({\n  id: process.env.SLACK_CLIENT_ID,\n  secret: process.env.SLACK_CLIENT_SECRET,\n});\n\n// only for apps installation\n// doc: https://api.slack.com/authentication/oauth-v2\nexport const slackOAuth2Version2 = createSlackOAuth2({\n  id: process.env.SLACK_CLIENT_ID,\n  secret: process.env.SLACK_CLIENT_SECRET,\n  apiVersion: 'v2',\n});\n","import { WebClient } from '@slack/web-api';\nimport type { Router, Request, Response } from 'express';\nimport type { MongoInsertType } from 'liwi-mongo';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport type { SetRequired } from 'type-fest';\nimport { slackOAuth2, slackOAuth2Version2 } from '../auth/slack';\nimport { getExistingAccountContext } from '../context/accountContext';\nimport type { MongoStores, SlackTeam } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nif (!process.env.AUTH_SECRET_KEY) {\n  throw new Error('Missing env variable: AUTH_SECRET_KEY');\n}\n\nconst createRedirectUri = (req: Request): string => {\n  const host = `https://${req.hostname}${\n    req.hostname === 'localhost' ? `:${process.env.PORT || 3000}` : ''\n  }`;\n  return `${host}/app/slack-connect-response`;\n};\n\nconst parseJSONSafe = (string: string) => {\n  try {\n    return JSON.parse(string);\n  } catch {\n    return null;\n  }\n};\n\nexport default function slackConnect(\n  router: Router,\n  mongoStores: MongoStores,\n): void {\n  const slackConnectUserScope = 'identity.basic identity.email identity.avatar';\n\n  router.get(\n    '/slack-connect',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req: Request, res: Response, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return;\n\n        const orgId = Number(req.query.orgId);\n        const orgLogin = req.query.orgLogin as string;\n        if (!orgId || !orgLogin) {\n          res.redirect('/app');\n          return;\n        }\n\n        const org = await mongoStores.orgs.findByKey(orgId);\n\n        if (!org || !org.slackTeamId) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>Organization is not installed.</Layout>,\n            ),\n          );\n          return;\n        }\n\n        const redirectUri = slackOAuth2.authorizeURL({\n          redirect_uri: createRedirectUri(req),\n          scope: slackConnectUserScope,\n          state: JSON.stringify({ orgId, orgLogin }),\n          team: org.slackTeamId,\n        } as any);\n\n        // TODO team_id\n        res.redirect(redirectUri);\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n\n  // see url in https://app.slack.com/app-settings/T01495JH7RS/A023QGDUDQX/distribute for scopes\n  const slackInstallAppScopes =\n    'chat:write,im:history,im:read,im:write,mpim:history,mpim:read,mpim:write,reactions:read,reactions:write,team:read,users:read,users:read.email,users:write';\n\n  router.get(\n    '/slack-install',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req: Request, res: Response, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return;\n\n        const orgId = Number(req.query.orgId);\n        const orgLogin = req.query.orgLogin as string;\n        if (!orgId || !orgLogin) {\n          res.redirect('/app');\n          return;\n        }\n\n        const redirectUri = slackOAuth2Version2.authorizeURL({\n          redirect_uri: createRedirectUri(req),\n          scope: slackInstallAppScopes,\n          state: JSON.stringify({ orgId, orgLogin, isInstall: true }),\n        });\n\n        res.redirect(redirectUri);\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n\n  router.get(\n    '/slack-connect-response',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return;\n\n        if (req.query.error) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>\n                Could not get access token:{' '}\n                {req.query.error_description || req.query.error}.\n              </Layout>,\n            ),\n          );\n\n          return;\n        }\n\n        const code: string = req.query.code as string;\n        const state: string = req.query.state as string;\n        const { orgId, orgLogin, isInstall } = parseJSONSafe(state) || {};\n\n        const accessToken = await (isInstall\n          ? slackOAuth2Version2\n          : slackOAuth2\n        ).getToken({\n          code,\n          redirect_uri: createRedirectUri(req),\n          scope: isInstall ? slackInstallAppScopes : undefined,\n        });\n\n        if (!accessToken || !accessToken.token.ok) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>\n                Could not get access token (Error:{' '}\n                {accessToken?.token?.error || 'Unknown'}).\n                <div>\n                  <a href={`/app/org/${orgLogin || ''}`}>Back</a>\n                </div>\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        const org = await mongoStores.orgs.findByKey(orgId);\n\n        if (!org) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>\n                Organization is not installed.\n                <div>\n                  <a href={`/app/org/${orgLogin || ''}`}>Back</a>\n                </div>\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        // install slack, not login\n        if (isInstall) {\n          if (!accessToken.token?.team?.id) {\n            res.send(\n              renderToStaticMarkup(\n                <Layout>\n                  Invalid token: no team id.\n                  <div>\n                    <a href={`/app/org/${orgLogin || ''}`}>Back</a>\n                  </div>\n                </Layout>,\n              ),\n            );\n            return;\n          }\n\n          const slackTeam: SetRequired<MongoInsertType<SlackTeam>, '_id'> = {\n            _id: accessToken.token.team.id,\n            teamName: accessToken.token.team.name,\n            appId: accessToken.token.app_id,\n            installerUserId: accessToken.token.authed_user.id,\n            botUserId: accessToken.token.bot_user_id,\n            botAccessToken: accessToken.token.access_token,\n            scope: accessToken.token.scope\n              ? accessToken.token.scope.split(',')\n              : [],\n          };\n\n          await Promise.all([\n            mongoStores.slackTeams.insertOne(slackTeam),\n            mongoStores.slackTeamInstallations.insertOne({\n              ...slackTeam,\n              teamId: slackTeam._id,\n              _id: undefined,\n            }),\n            mongoStores.orgs.partialUpdateOne(org, {\n              $set: {\n                slackTeamId: slackTeam._id,\n              },\n            }),\n          ]);\n\n          const existingAccountContext = await getExistingAccountContext({\n            type: 'Organization',\n            id: orgId,\n            login: orgLogin,\n          });\n\n          if (existingAccountContext) {\n            existingAccountContext.initSlack();\n          }\n\n          res.redirect(`/app/org/${orgLogin || ''}`);\n          return;\n        }\n\n        const slackClient = new WebClient(accessToken.token.access_token);\n        const identity = await slackClient.users.identity();\n\n        if (!org.slackTeamId && !org.slackToken) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>\n                Organization is not linked to slack. Install it first.\n                <div>\n                  <a href={`/app/org/${orgLogin || ''}`}>Back</a>\n                </div>\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        if (\n          org?.slackTeamId &&\n          accessToken.token.team_id !== org?.slackTeamId\n        ) {\n          res.send(\n            renderToStaticMarkup(\n              <Layout>\n                Invalid slack team.{' '}\n                <a\n                  href={`/app/slack-connect?orgId=${encodeURIComponent(\n                    org._id,\n                  )}&orgLogin=${encodeURIComponent(org.login)}`}\n                >\n                  Retry ?\n                </a>\n              </Layout>,\n            ),\n          );\n          return;\n        }\n\n        await mongoStores.orgMembers.partialUpdateMany(\n          { 'user.id': user.authInfo.id, 'org.id': orgId },\n          {\n            $set: {\n              slack: {\n                id: accessToken.token.user_id,\n                accessToken: accessToken.token.access_token,\n                scope: accessToken.token.scope\n                  ? accessToken.token.scope.split(',')\n                  : [],\n                teamId: accessToken.token.team_id,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                email: (identity as any).user.email,\n              },\n            },\n          },\n        );\n\n        const existingAccountContext = await getExistingAccountContext({\n          type: 'Organization',\n          id: orgId,\n          login: orgLogin,\n        });\n\n        if (existingAccountContext) {\n          existingAccountContext.slack.updateSlackMember(\n            user.authInfo.id,\n            user.authInfo.login,\n          );\n        }\n\n        res.redirect(`/app/org/${orgLogin || ''}`);\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n}\n","import type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { syncUser } from '../events/account-handlers/actions/syncUser';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function userSettings(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n  mongoStores: MongoStores,\n): void {\n  router.get(\n    '/user/force-sync',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return;\n\n        // const { data: installation } = await api.apps\n        //   .getUserInstallation({\n        //     username: user.authInfo.login,\n        //   })\n        //   .catch((err) => {\n        //     return { status: err.status, data: undefined };\n        //   });\n\n        // console.log(installation);\n\n        const u = await mongoStores.users.findByKey(user.authInfo.id);\n        if (!u || !u.installationId) {\n          res.redirect('/app');\n          return;\n        }\n\n        await syncUser(mongoStores, user.api, u.installationId!, user.authInfo);\n\n        res.redirect('/app/user');\n      } catch (err) {\n        next(err);\n      }\n    },\n  );\n\n  router.get(\n    '/user',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res, next) => {\n      try {\n        const user = await getUser(req, res);\n        if (!user) return null;\n\n        const { data: installation } = await octokitApp.apps\n          .getUserInstallation({\n            username: user.authInfo.login,\n          })\n          .catch((err) => {\n            return { status: err.status, data: undefined };\n          });\n\n        if (!installation) {\n          return res.send(\n            renderToStaticMarkup(\n              <Layout>\n                <div>\n                  {process.env.REVIEWFLOW_NAME}{' '}\n                  {\"isn't installed for this user. Go to \"}\n                  <a\n                    href={`https://github.com/settings/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n                  >\n                    Github Configuration\n                  </a>{' '}\n                  to install it.\n                </div>\n              </Layout>,\n            ),\n          );\n        }\n\n        return res.send(\n          renderToStaticMarkup(\n            <Layout>\n              <div>\n                {process.env.REVIEWFLOW_NAME} is installed for this user\n              </div>\n            </Layout>,\n          ),\n        );\n      } catch (err) {\n        next(err);\n        return null;\n      }\n    },\n  );\n}\n","import cookieParser from 'cookie-parser';\nimport type { Probot, run } from 'probot';\nimport auth from './app/auth';\nimport home from './app/home';\nimport orgSettings from './app/org-settings';\nimport repository from './app/repository';\nimport slackConnect from './app/slack-connect';\nimport userSettings from './app/user-settings';\nimport type { AppContext } from './context/AppContext';\n\nexport default async function appRouter(\n  app: Probot,\n  getRouter: Parameters<\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    Extract<Parameters<typeof run>[0], Function>\n  >[1]['getRouter'],\n  { mongoStores }: AppContext,\n): Promise<void> {\n  const router = getRouter!('/app');\n  const octokitApp = await app.auth();\n\n  router.use(cookieParser());\n\n  auth(router);\n  repository(router, octokitApp);\n  home(router, octokitApp, mongoStores);\n  orgSettings(router, octokitApp, mongoStores);\n  userSettings(router, octokitApp, mongoStores);\n  slackConnect(router, mongoStores);\n}\n","import type { Context } from 'probot';\nimport { accountConfigs, defaultConfig } from '../../../accountConfigs';\nimport type { AppContext } from '../../../context/AppContext';\nimport type { AccountContext } from '../../../context/accountContext';\nimport { obtainAccountContext } from '../../../context/accountContext';\n\ntype CallbackContextAndAccountContext<T> = (\n  context: Context<T>,\n  accountContext: AccountContext,\n) => void | Promise<void>;\n\nexport const handlerOrgChange = async <\n  T extends { organization?: { id: number; login: string } },\n>(\n  appContext: AppContext,\n  context: Context<T>,\n  callback: CallbackContextAndAccountContext<T>,\n): Promise<void> => {\n  const org = context.payload.organization;\n  if (!org) return;\n  const config = accountConfigs[org.login] || defaultConfig;\n  const accountContext = await obtainAccountContext(\n    appContext,\n    context,\n    config,\n    { ...org, type: 'Organization' },\n  );\n  if (!accountContext) return;\n\n  return accountContext.lock(async () => {\n    await callback(context, accountContext);\n  });\n};\n\nexport const createHandlerOrgChange =\n  <T extends { organization?: { id: number; login: string } }>(\n    appContext: AppContext,\n    callback: CallbackContextAndAccountContext<T>,\n  ) =>\n  (context: Context<T>) => {\n    return handlerOrgChange(appContext, context, callback);\n  };\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { syncTeamsAndTeamMembers } from './actions/syncTeams';\nimport { createHandlerOrgChange } from './utils/handler';\n\nexport default function membershipChanged(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  /* https://developer.github.com/webhooks/event-payloads/#membership */\n  app.on(\n    ['membership.added', 'membership.removed'],\n    createHandlerOrgChange<EventPayloads.WebhookPayloadMembership>(\n      appContext,\n      async (context, accountContext) => {\n        // TODO: only sync team members and team parents members\n        // await syncTeamMembersWithTeamParents(\n        //   appContext.mongoStores,\n        //   context.octokit,\n        //   context.payload.organization,\n        //   {\n        //     id: context.payload.team.id,\n        //     name: context.payload.team.name,\n        //     slug: context.payload.team.slug,\n        //   },\n        // );\n        await syncTeamsAndTeamMembers(\n          appContext.mongoStores,\n          context.octokit,\n          context.payload.organization,\n        );\n        await accountContext.updateGithubTeamMembers();\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { syncOrg } from './actions/syncOrg';\nimport { createHandlerOrgChange } from './utils/handler';\n\nexport default function orgMemberAddedOrRemoved(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  /* https://developer.github.com/webhooks/event-payloads/#organization */\n  app.on(\n    ['organization.member_added', 'organization.member_removed'],\n    createHandlerOrgChange<EventPayloads.WebhookPayloadOrganization>(\n      appContext,\n      async (context, accountContext) => {\n        const o = await appContext.mongoStores.orgs.findByKey(\n          accountContext.accountEmbed.id,\n        );\n        if (!o || !o.installationId) return;\n\n        await syncOrg(\n          appContext.mongoStores,\n          context.octokit,\n          o.installationId,\n          context.payload.organization,\n        );\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { syncTeams } from './actions/syncTeams';\nimport { createHandlerOrgChange } from './utils/handler';\n\nexport default function teamChanged(app: Probot, appContext: AppContext): void {\n  /* https://developer.github.com/webhooks/event-payloads/#team */\n  app.on(\n    ['team.created', 'team.deleted', 'team.edited'],\n    createHandlerOrgChange<EventPayloads.WebhookPayloadTeam>(\n      appContext,\n      async (context, accountContext) => {\n        await syncTeams(\n          appContext.mongoStores,\n          context.octokit,\n          context.payload.organization,\n        );\n      },\n    ),\n  );\n}\n","import type { RestEndpointMethodTypes } from '@octokit/plugin-rest-endpoint-methods';\nimport type { RepoContext } from '../../../context/repoContext';\n\nexport const checkIfUserIsBot = (\n  repoContext: RepoContext,\n  user: { login: string; type: string },\n): boolean => {\n  if (user.type === 'Bot') return true;\n  if (repoContext.config.botUsers) {\n    return repoContext.config.botUsers.includes(user.login);\n  }\n  return false;\n};\n\nexport const checkIfIsThisBot = (user: {\n  login: string;\n  type: string;\n}): boolean => {\n  return (\n    user.type === 'Bot' && user.login === `${process.env.REVIEWFLOW_NAME}[bot]`\n  );\n};\n\nexport const areCommitsAllMadeByBots = (\n  repoContext: RepoContext,\n  commits: RestEndpointMethodTypes['pulls']['listCommits']['response']['data'],\n): boolean =>\n  commits.every((c) => c.author && checkIfUserIsBot(repoContext, c.author));\n","import type { Context } from 'probot';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\n\nexport const updateBranch = async (\n  pullRequest: PullRequestWithDecentData,\n  context: Context<any>,\n  login: string | null,\n): Promise<boolean> => {\n  context.log.info('update branch', {\n    head: pullRequest.head.ref,\n    base: pullRequest.base.ref,\n  });\n\n  const result = await context.octokit.repos\n    .merge({\n      owner: pullRequest.head.repo.owner.login,\n      repo: pullRequest.head.repo.name,\n      head: pullRequest.base.ref,\n      base: pullRequest.head.ref,\n    })\n    .catch((err) => ({ error: err } as any));\n\n  context.log.info(\n    {\n      status: result.status,\n      sha: result.data?.sha,\n      error: result.error,\n    },\n    'update branch result',\n  );\n\n  if (result.status === 204) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `${\n          login ? `@${login} ` : ''\n        }Could not update branch: base already contains the head, nothing to merge.`,\n      }),\n    );\n    return true;\n  } else if (result.status === 409) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `${\n          login ? `@${login} ` : ''\n        }Could not update branch: merge conflict. Please resolve manually.`,\n      }),\n    );\n    return false;\n  } else if (!result || !result.data || !result.data.sha) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `${\n          login ? `@${login} ` : ''\n        }Could not update branch (unknown error).`,\n      }),\n    );\n    return false;\n  } else if (login) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `${login ? `@${login} ` : ''}Branch updated: ${result.data.sha}`,\n      }),\n    );\n  }\n  return true;\n};\n","export type OptionsKeys =\n  | 'autoMerge'\n  | 'autoMergeWithSkipCi'\n  | 'deleteAfterMerge';\n\nexport type Options = Record<OptionsKeys, boolean>;\n\nexport const options: OptionsKeys[] = [\n  'autoMerge',\n  'autoMergeWithSkipCi',\n  'deleteAfterMerge',\n];\nexport const optionsRegexps: {\n  key: OptionsKeys;\n  regexp: RegExp;\n}[] = options.map((option) => ({\n  key: option,\n  regexp: new RegExp(`\\\\[([ xX]?)]\\\\s*<!-- reviewflow-${option} -->`),\n}));\n\ninterface OptionDisplay {\n  key: OptionsKeys;\n  labelKey?: string;\n  icon?: string;\n  description: string;\n}\n\nexport const optionsDescriptions: OptionDisplay[] = [\n  {\n    key: 'autoMerge',\n    labelKey: 'merge/automerge',\n    description:\n      'Automatically merge when this PR is ready and has no failed statuses. When the repository requires _branches to be up to date before merging_, it merges default branch, with a queue per repo to prevent multiple merges when several PRs are ready. A fail job prevents the merge.',\n  },\n  {\n    key: 'autoMergeWithSkipCi',\n    labelKey: 'merge/skip-ci',\n    description:\n      'Add `[skip ci]` on merge commit when merge is done with autoMerge.',\n  },\n  {\n    key: 'deleteAfterMerge',\n    icon: ':recycle:',\n    description: 'Automatically delete the branch after this PR is merged.',\n  },\n];\n","import { optionsRegexps } from './prOptions';\nimport type { Options } from './prOptions';\n\nexport type { Options } from './prOptions';\n\nexport const parseOptions = (\n  content: string,\n  defaultOptions: Options,\n): Options => {\n  const options: Partial<Options> = {};\n\n  optionsRegexps.forEach(({ key, regexp }) => {\n    const match = regexp.exec(content);\n    options[key] = !match\n      ? defaultOptions[key] || false\n      : match[1] === 'x' || match[1] === 'X';\n  });\n\n  return options as Options;\n};\n\nexport const parseCommitNotes = (content: string): string => {\n  const commitNotes = content.replace(\n    /^.*#### Commits Notes:(.*)#### Options:.*$/s,\n    '$1',\n  );\n\n  if (commitNotes === content) {\n    return '';\n  } else {\n    return commitNotes.trim();\n  }\n};\n\ninterface ParsedBody {\n  options: Options;\n  commitNotes: string;\n}\n\nexport const parseBody = (\n  content: string,\n  defaultOptions: Options,\n): ParsedBody => {\n  return {\n    options: parseOptions(content, defaultOptions),\n    commitNotes: parseCommitNotes(content),\n  };\n};\n","import type { PullRequestLabels } from 'events/pr-handlers/utils/PullRequestData';\nimport type { LabelResponse } from '../../../../context/initRepoLabels';\n\nexport default function hasLabelInPR(\n  prLabels: PullRequestLabels,\n  label: LabelResponse,\n): boolean {\n  if (!label) return false;\n  return prLabels.some((l): boolean => l.id === label.id);\n}\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { PullRequestData } from 'events/pr-handlers/utils/PullRequestData';\n\nexport function readPullRequestCommits<\n  E extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  context: Context<E>,\n  pr: PullRequestData = context.payload.pull_request,\n): Promise<\n  RestEndpointMethodTypes['pulls']['listCommits']['response']['data']\n> {\n  return context.octokit.paginate(\n    context.octokit.pulls.listCommits,\n    context.repo({\n      pull_number: pr.number,\n      // A custom page size up to 100. Default is 30.\n      per_page: 100,\n    }),\n    (res) => res.data,\n  );\n}\n","/* eslint-disable max-lines */\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { AutomergeLog } from 'mongo';\nimport type {\n  PullRequestData,\n  PullRequestFromRestEndpoint,\n  PullRequestLabels,\n} from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { areCommitsAllMadeByBots } from '../utils/isBotUser';\nimport { updateBranch } from './updateBranch';\nimport { parseBody } from './utils/body/parseBody';\nimport hasLabelInPR from './utils/hasLabelInPR';\nimport { readPullRequestCommits } from './utils/readPullRequestCommits';\n\nconst hasFailedStatusOrChecks = async (\n  pr: PullRequestData,\n  context: Context<any>,\n): Promise<boolean> => {\n  const checks = await context.octokit.checks.listForRef(\n    context.repo({\n      ref: pr.head.sha,\n      per_page: 100,\n    }),\n  );\n\n  const failedChecks = checks.data.check_runs.filter(\n    (check) => check.conclusion === 'failure',\n  );\n\n  if (failedChecks.length > 0) {\n    context.log.info(\n      {\n        checks: failedChecks.map((check) => check.name),\n      },\n      `automerge not possible: failed check pr ${pr.id}`,\n    );\n    return true;\n  }\n\n  const combinedStatus = await context.octokit.repos.getCombinedStatusForRef(\n    context.repo({\n      ref: pr.head.sha,\n      per_page: 100,\n    }),\n  );\n\n  if (combinedStatus.data.state === 'failure') {\n    const failedStatuses = combinedStatus.data.statuses.filter(\n      (status) => status.state === 'failure' || status.state === 'error',\n    );\n\n    context.log.info(\n      {\n        statuses: failedStatuses.map((status) => status.context),\n      },\n      `automerge not possible: failed status pr ${pr.id}`,\n    );\n\n    return true;\n  }\n\n  return false;\n};\n\nexport const autoMergeIfPossible = async (\n  pullRequest: PullRequestFromRestEndpoint,\n  context: Context<any>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  prLabels: PullRequestLabels = pullRequest.labels,\n): Promise<boolean> => {\n  if (reviewflowPrContext === null) return false;\n\n  const autoMergeLabel = repoContext.labels['merge/automerge'];\n\n  if (!hasLabelInPR(prLabels, autoMergeLabel)) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'no automerge label',\n    );\n    return false;\n  }\n\n  const isRenovatePr = pullRequest.head.ref.startsWith('renovate/');\n\n  const createMergeLockPrFromPr = () => ({\n    id: pullRequest.id,\n    number: pullRequest.number,\n    branch: pullRequest.head.ref,\n  });\n\n  if (pullRequest.state !== 'open') {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'pr is not opened',\n    );\n    return false;\n  }\n\n  const addLog = (\n    type: AutomergeLog['type'],\n    action: AutomergeLog['action'],\n  ): void => {\n    const repoFullName = pullRequest.head.repo.full_name;\n    context.log.info(`automerge: ${repoFullName}#${pullRequest.id} ${type}`);\n    repoContext.appContext.mongoStores.automergeLogs.insertOne({\n      account: repoContext.accountEmbed,\n      repoFullName,\n      pr: {\n        id: pullRequest.id,\n        number: pullRequest.number,\n        isRenovate: isRenovatePr,\n        mergeableState: pullRequest.mergeable_state,\n      },\n      type,\n      action,\n    });\n  };\n\n  if (\n    repoContext.hasNeedsReview(prLabels) ||\n    repoContext.hasRequestedReview(prLabels)\n  ) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'blocking labels',\n    );\n    return false;\n  }\n\n  if (\n    pullRequest.requested_reviewers &&\n    pullRequest.requested_reviewers.length > 0\n  ) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'still has requested reviewers',\n    );\n    return false;\n  }\n\n  if (pullRequest.requested_teams && pullRequest.requested_teams.length > 0) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'still has requested teams',\n    );\n    return false;\n  }\n\n  const lockedPr = repoContext.getMergeLockedPr();\n  if (lockedPr && String(lockedPr.number) !== String(pullRequest.number)) {\n    context.log.info(\n      {\n        prId: pullRequest.id,\n        prNumber: pullRequest.number,\n        lockedPrNumber: lockedPr.number,\n      },\n      'automerge not possible: locked pr',\n    );\n    repoContext.pushAutomergeQueue(createMergeLockPrFromPr());\n    return false;\n  }\n\n  repoContext.addMergeLockPr(createMergeLockPrFromPr());\n\n  if (pullRequest.mergeable == null) {\n    const prResult = await context.octokit.pulls.get(\n      context.repo({\n        pull_number: pullRequest.number,\n      }),\n    );\n    pullRequest = prResult.data;\n  }\n\n  if (pullRequest.merged) {\n    addLog('already merged', 'remove');\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'pr already merged',\n    );\n    return false;\n  }\n\n  context.log.info(\n    `automerge?: ${pullRequest.id}, #${pullRequest.number}, mergeable=${pullRequest.mergeable} state=${pullRequest.mergeable_state}`,\n  );\n\n  // https://github.com/octokit/octokit.net/issues/1763\n  if (\n    !(\n      pullRequest.mergeable_state === 'clean' ||\n      pullRequest.mergeable_state === 'has_hooks' ||\n      pullRequest.mergeable_state === 'unstable'\n    )\n  ) {\n    if (\n      !pullRequest.mergeable_state ||\n      pullRequest.mergeable_state === 'unknown'\n    ) {\n      addLog('unknown mergeable_state', 'reschedule');\n      // GitHub is determining whether the pull request is mergeable\n      repoContext.reschedule(context, createMergeLockPrFromPr());\n      return false;\n    }\n\n    if (isRenovatePr) {\n      if (\n        pullRequest.mergeable_state === 'behind' ||\n        pullRequest.mergeable_state === 'dirty'\n      ) {\n        const commits = await readPullRequestCommits(context, pullRequest);\n\n        // check if has commits not made by renovate or bots like https://github.com/ornikar/shared-configs/pull/47#issuecomment-445767120\n        if (!areCommitsAllMadeByBots(repoContext, commits)) {\n          addLog('rebase-renovate', 'update branch');\n          if (await updateBranch(pullRequest, context, null)) {\n            return false;\n          }\n\n          repoContext.removePrFromAutomergeQueue(\n            context,\n            pullRequest.number,\n            'update branch failed',\n          );\n          return false;\n        }\n\n        addLog('rebase-renovate', 'wait');\n        if (\n          pullRequest.body &&\n          pullRequest.body.includes('<!-- rebase-check -->')\n        ) {\n          if (pullRequest.body.includes('[x] <!-- rebase-check -->')) {\n            return false;\n          }\n\n          const renovateRebaseBody = pullRequest.body.replace(\n            '[ ] <!-- rebase-check -->',\n            '[x] <!-- rebase-check -->',\n          );\n          await context.octokit.issues.update(\n            context.repo({\n              issue_number: pullRequest.number,\n              body: renovateRebaseBody,\n            }),\n          );\n        } else if (!pullRequest.title.startsWith('rebase!')) {\n          await context.octokit.issues.update(\n            context.repo({\n              issue_number: pullRequest.number,\n              title: `rebase!${pullRequest.title}`,\n            }),\n          );\n        }\n        return false;\n      }\n\n      if (await hasFailedStatusOrChecks(pullRequest, context)) {\n        addLog('failed status or checks', 'remove');\n        repoContext.removePrFromAutomergeQueue(\n          context,\n          pullRequest.number,\n          'failed status or checks',\n        );\n        return false;\n      } else if (pullRequest.mergeable_state === 'blocked') {\n        addLog('blocked mergeable_state', 'wait');\n        // waiting for reschedule in status (pr-handler/status.ts)\n        return false;\n      }\n\n      context.log.info(\n        `automerge not possible: renovate with mergeable_state=${pullRequest.mergeable_state}`,\n      );\n      return false;\n    }\n\n    if (pullRequest.mergeable_state === 'blocked') {\n      if (await hasFailedStatusOrChecks(pullRequest, context)) {\n        addLog('failed status or checks', 'remove');\n        repoContext.removePrFromAutomergeQueue(\n          context,\n          pullRequest.number,\n          'failed status or checks',\n        );\n        return false;\n      } else {\n        addLog('blocked mergeable_state', 'wait');\n        // waiting for reschedule in status (pr-handler/status.ts)\n        return false;\n      }\n    }\n\n    if (pullRequest.mergeable_state === 'behind') {\n      addLog('behind mergeable_state', 'update branch');\n      if (await updateBranch(pullRequest, context, null)) {\n        return false;\n      }\n\n      repoContext.removePrFromAutomergeQueue(\n        context,\n        pullRequest.number,\n        'update branch failed',\n      );\n      return false;\n    }\n\n    addLog('not mergeable', 'remove');\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      `mergeable_state=${pullRequest.mergeable_state}`,\n    );\n    context.log.info(\n      `automerge not possible: not mergeable mergeable_state=${pullRequest.mergeable_state}`,\n    );\n    return false;\n  }\n\n  try {\n    context.log.info(`automerge pr #${pullRequest.number}`);\n\n    const parsedBody = parseBody(\n      reviewflowPrContext.commentBody,\n      repoContext.config.prDefaultOptions,\n    );\n    const options = parsedBody?.options || repoContext.config.prDefaultOptions;\n\n    const mergeResult = await context.octokit.pulls.merge({\n      merge_method: 'squash',\n      owner: pullRequest.head.repo.owner.login,\n      repo: pullRequest.head.repo.name,\n      pull_number: pullRequest.number,\n      commit_title: `${pullRequest.title}${\n        options.autoMergeWithSkipCi ? ' [skip ci]' : ''\n      } (#${pullRequest.number})`,\n      commit_message: parsedBody?.commitNotes\n        ? parsedBody?.commitNotes\n            .replace(/^- (.*)\\s*\\([^)]+\\)$/gm, '$1')\n            .replace(/^Breaking Changes:\\n/, 'BREAKING CHANGE: ')\n            .replace(/\\n/g, '; ')\n        : '',\n    });\n    context.log.debug(mergeResult.data, 'merge result:');\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'merged',\n    );\n    return Boolean('merged' in mergeResult.data && mergeResult.data.merged);\n  } catch (err) {\n    context.log.info({ errorMessage: err.message }, 'could not merge:');\n    repoContext.reschedule(context, createMergeLockPrFromPr());\n    return false;\n  }\n};\n","import type { LabelList, StatusInfo } from 'accountConfigs/types';\nimport type { Options } from './parseBody';\nimport { parseOptions } from './parseBody';\nimport { optionsDescriptions } from './prOptions';\n\nexport const defaultCommentBody = 'This will be auto filled by reviewflow.';\n\nconst toMarkdownOptions = (\n  repoLink: string,\n  labelsConfig: LabelList,\n  options: Options,\n): string => {\n  return optionsDescriptions\n    .map(({ key, labelKey, description, icon: iconValue }) => {\n      const checkboxWithId = `[${\n        options[key] ? 'x' : ' '\n      }] <!-- reviewflow-${key} -->`;\n\n      const labelDescription = labelKey && labelsConfig[labelKey];\n      const labelLink = labelDescription\n        ? `[${labelDescription.name}](${repoLink}/labels/${encodeURIComponent(\n            labelDescription.name,\n          )}): `\n        : '';\n      const icon = labelLink || !iconValue ? '' : `${iconValue} `;\n\n      return `- ${checkboxWithId}${icon}${labelLink}${description}`;\n    })\n    .join('\\n');\n};\n\nconst toMarkdownInfos = (infos: StatusInfo[]): string => {\n  return infos\n    .map((info) => {\n      if (info.url) return `[${info.title}](${info.url})`;\n      return info.title;\n    })\n    .join('\\n\\n');\n};\n\ninterface UpdatedBodyWithOptions {\n  commentBody: string;\n  options?: Options;\n}\n\nconst getReplacement = (infos?: StatusInfo[]): string => {\n  if (!infos) return '$1$2';\n  return infos.length > 0\n    ? `#### Infos:\\n\\n${toMarkdownInfos(infos)}\\n\\n$2`\n    : '$2';\n};\n\nconst updateOptions = (\n  options: Options,\n  optionsToUpdate?: Partial<Options>,\n): Options => {\n  if (!optionsToUpdate) return options;\n  return { ...options, ...optionsToUpdate };\n};\n\nconst internalUpdateBodyOptionsAndInfos = (\n  repoLink: string,\n  labelsConfig: LabelList,\n  body: string,\n  options: Options,\n  infos?: StatusInfo[],\n): string => {\n  const infosAndCommitNotesParagraph = body.replace(\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /^\\s*(?:(#### Infos:.*)?(#### Commits Notes:.*)?#### Options:)?.*$/s,\n    getReplacement(infos),\n  );\n\n  return `${infosAndCommitNotesParagraph}#### Options:\\n${toMarkdownOptions(\n    repoLink,\n    labelsConfig,\n    options,\n  )}`;\n};\n\nexport const createCommentBody = (\n  repoLink: string,\n  labelsConfig: LabelList,\n  defaultOptions: Options,\n  infos?: StatusInfo[],\n): string => {\n  return internalUpdateBodyOptionsAndInfos(\n    repoLink,\n    labelsConfig,\n    '',\n    defaultOptions,\n    infos,\n  );\n};\n\nexport const updateCommentOptions = (\n  repoLink: string,\n  labelsConfig: LabelList,\n  commentBody: string,\n  defaultOptions: Options,\n  optionsToUpdate?: Partial<Options>,\n): UpdatedBodyWithOptions => {\n  const options = parseOptions(commentBody, defaultOptions);\n  const updatedOptions = updateOptions(options, optionsToUpdate);\n\n  return {\n    options: updatedOptions,\n    commentBody: internalUpdateBodyOptionsAndInfos(\n      repoLink,\n      labelsConfig,\n      commentBody,\n      updatedOptions,\n    ),\n  };\n};\n\nexport const updateCommentBodyInfos = (\n  commentBody: string,\n  infos?: StatusInfo[],\n): string => {\n  return commentBody.replace(\n    // *  - zero or more\n    // *? - zero or more (non-greedy)\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /^\\s*(?:(#### Infos:.*?)?(#### Commits Notes:.*?)?(#### Options:.*?)?)?$/s,\n    `${getReplacement(infos)}$3`,\n  );\n};\n\nexport const updateCommentBodyCommitsNotes = (\n  commentBody: string,\n  commitNotes?: string,\n): string => {\n  return commentBody.replace(\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /(?:#### Commits Notes:.*?)?(#### Options:)/s,\n    !commitNotes ? '$1' : `#### Commits Notes:\\n\\n${commitNotes}\\n\\n$1`,\n  );\n};\n\nexport const removeDeprecatedReviewflowInPrBody = (\n  prBody: string | null,\n): string => {\n  if (!prBody) return '';\n  return prBody.replace(\n    /^(.*)<!---? do not edit after this -?-->(.*)<!---? end - don't add anything after this -?-->(.*)$/is,\n    '$1$3',\n  );\n};\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { Context } from 'probot';\nimport type { PullRequestWithDecentDataFromWebhook } from './PullRequestData';\n\nexport const createReviewflowComment = <T>(\n  pullRequestNumber: PullRequestWithDecentDataFromWebhook['number'],\n  context: Context<T>,\n  body: string,\n): Promise<\n  RestEndpointMethodTypes['issues']['createComment']['response']['data']\n> => {\n  return context.octokit.issues\n    .createComment(context.repo({ issue_number: pullRequestNumber, body }))\n    .then(({ data }) => data);\n};\n\nexport const getReviewflowCommentById = <T>(\n  pullRequestNumber: PullRequestWithDecentDataFromWebhook['number'],\n  context: Context<T>,\n  commentId: number,\n): Promise<\n  RestEndpointMethodTypes['issues']['getComment']['response']['data'] | null\n> => {\n  return context.octokit.issues\n    .getComment(\n      context.repo({\n        issue_number: pullRequestNumber,\n        comment_id: commentId,\n      }),\n    )\n    .then(\n      ({ data }) => data,\n      () => null,\n    );\n};\n","import type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { ReviewflowPr } from 'mongo';\nimport { defaultCommentBody } from '../actions/utils/body/updateBody';\nimport type { PullRequestWithDecentDataFromWebhook } from './PullRequestData';\nimport {\n  createReviewflowComment,\n  getReviewflowCommentById,\n} from './reviewflowComment';\n\nexport interface CreatePrContextOptions {\n  reviewflowCommentPromise?: ReturnType<typeof createReviewflowComment>;\n}\n\nexport interface ReviewflowPrContext {\n  reviewflowPr: ReviewflowPr;\n  commentBody: string;\n}\n\nexport const getReviewflowPrContext = async <T>(\n  pullRequestNumber: PullRequestWithDecentDataFromWebhook['number'],\n  context: Context<T>,\n  repoContext: RepoContext,\n  reviewflowCommentPromise?: ReturnType<typeof createReviewflowComment>,\n): Promise<ReviewflowPrContext> => {\n  const appContext = repoContext.appContext;\n  const prEmbed = { number: pullRequestNumber };\n\n  if (reviewflowCommentPromise) {\n    const comment = await reviewflowCommentPromise;\n    const reviewflowPr = await appContext.mongoStores.prs.insertOne({\n      account: repoContext.accountEmbed,\n      repo: repoContext.repoEmbed,\n      pr: prEmbed,\n      commentId: comment.id,\n    });\n    return { reviewflowPr, commentBody: comment.body! };\n  }\n\n  const existing = await appContext.mongoStores.prs.findOne({\n    'account.id': repoContext.accountEmbed.id,\n    'repo.id': repoContext.repoEmbed.id,\n    'pr.number': pullRequestNumber,\n  });\n  const comment =\n    existing &&\n    (await getReviewflowCommentById(\n      pullRequestNumber,\n      context,\n      existing.commentId,\n    ));\n\n  if (!comment || !existing) {\n    const comment = await createReviewflowComment(\n      pullRequestNumber,\n      context,\n      defaultCommentBody,\n    );\n\n    if (!existing) {\n      const reviewflowPr = await appContext.mongoStores.prs.insertOne({\n        account: repoContext.accountEmbed,\n        repo: repoContext.repoEmbed,\n        pr: prEmbed,\n        commentId: comment.id,\n      });\n      return { reviewflowPr, commentBody: comment.body! };\n    } else {\n      await appContext.mongoStores.prs.partialUpdateByKey(existing._id, {\n        $set: { commentId: comment.id },\n      });\n    }\n  }\n\n  return { reviewflowPr: existing, commentBody: comment!.body! };\n};\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { Context } from 'probot';\n\nexport const fetchPr = async (\n  context: Context<any>,\n  prNumber: number,\n): Promise<RestEndpointMethodTypes['pulls']['get']['response']['data']> => {\n  const prResult = await context.octokit.pulls.get(\n    context.repo({ pull_number: prNumber }),\n  );\n\n  return prResult.data;\n};\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { Context } from 'probot';\nimport type { Config } from '../accountConfigs';\n\nexport interface LabelResponse {\n  id: number;\n  node_id: string;\n  url: string;\n  name: string;\n  description?: string | null;\n  color: string;\n  default: boolean;\n}\n\nexport type LabelsRecord = Record<string, LabelResponse>;\n\nexport const getLabelsForRepo = async (\n  context: Context<any>,\n): Promise<\n  RestEndpointMethodTypes['issues']['listLabelsForRepo']['response']['data']\n> => {\n  const { data: labels } = await context.octokit.issues.listLabelsForRepo(\n    context.repo({ per_page: 100 }),\n  );\n  return labels;\n};\n\nexport const initRepoLabels = async <GroupNames extends string>(\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<LabelsRecord> => {\n  const labels = await getLabelsForRepo(context);\n  const finalLabels: Record<string, LabelResponse> = {};\n\n  for (const [labelKey, labelConfig] of Object.entries(config.labels.list)) {\n    const labelColor = labelConfig.color.slice(1);\n    const description = labelConfig.description\n      ? `${labelConfig.description} - Synced by reviewflow`\n      : `Synced by reviewflow for ${labelKey}`;\n\n    let existingLabel = labels.find((label) => label.name === labelConfig.name);\n    if (!existingLabel) {\n      existingLabel = labels.find((label) => label.description === description);\n    }\n    if (!existingLabel) {\n      if (labelKey === 'design/needs-review') {\n        existingLabel = labels.find(\n          (label) => label.name === 'needs-design-review',\n        );\n      }\n      if (labelKey === 'design/approved') {\n        existingLabel = labels.find(\n          (label) => label.name === 'design-reviewed',\n        );\n      }\n      if (labelKey === 'teams/ops') {\n        existingLabel = labels.find((label) => label.name === 'archi');\n      }\n      if (labelKey === 'merge/skip-ci') {\n        existingLabel = labels.find(\n          (label) => label.name === 'automerge/skip-ci',\n        );\n      }\n    }\n\n    if (!existingLabel) {\n      const result = await context.octokit.issues.createLabel(\n        context.repo({\n          name: labelConfig.name,\n          color: labelColor,\n          description,\n        }),\n      );\n      finalLabels[labelKey] = result.data;\n    } else if (\n      existingLabel.name !== labelConfig.name ||\n      existingLabel.color !== labelColor ||\n      existingLabel.description !== description\n    ) {\n      context.log.info(\n        {\n          current_name: existingLabel.name,\n          name: existingLabel.name !== labelConfig.name && labelConfig.name,\n          color: existingLabel.color !== labelColor && labelColor,\n          description: existingLabel.description !== description && description,\n        },\n        'Needs to update label',\n      );\n\n      const result = await context.octokit.issues.updateLabel(\n        context.repo({\n          name: existingLabel.name,\n          new_name: labelConfig.name,\n          color: labelColor,\n          description,\n        }),\n      );\n      finalLabels[labelKey] = result.data;\n    } else {\n      finalLabels[labelKey] = existingLabel;\n    }\n  }\n\n  return finalLabels;\n};\n","import { Lock } from 'lock';\nimport type { Context } from 'probot';\nimport type { Config } from '../accountConfigs';\nimport { accountConfigs, defaultConfig } from '../accountConfigs';\nimport type { GroupLabels } from '../accountConfigs/types';\nimport { autoMergeIfPossible } from '../events/pr-handlers/actions/autoMergeIfPossible';\nimport type {\n  PullRequestData,\n  PullRequestLabels,\n  PullRequestWithDecentData,\n} from '../events/pr-handlers/utils/PullRequestData';\nimport { getReviewflowPrContext } from '../events/pr-handlers/utils/createPullRequestContext';\nimport { fetchPr } from '../events/pr-handlers/utils/fetchPr';\nimport { ExcludesFalsy } from '../utils/Excludes';\nimport type { AppContext } from './AppContext';\nimport type { AccountContext } from './accountContext';\nimport { obtainAccountContext } from './accountContext';\nimport type { LabelResponse, LabelsRecord } from './initRepoLabels';\nimport { initRepoLabels } from './initRepoLabels';\nimport { getEmojiFromRepoDescription } from './utils';\n\nexport interface LockedMergePr {\n  id: number;\n  number: number;\n  branch: string;\n}\n\ninterface RepoContextWithoutTeamContext<GroupNames extends string> {\n  appContext: AppContext;\n  repoFullName: string;\n  repoEmbed: { id: number; name: string };\n  repoEmoji: string | undefined;\n  labels: LabelsRecord;\n  protectedLabelIds: readonly LabelResponse['id'][];\n  shouldIgnore: boolean;\n\n  hasNeedsReview: (labels: PullRequestLabels) => boolean;\n  hasRequestedReview: (labels: PullRequestLabels) => boolean;\n  hasChangesRequestedReview: (labels: PullRequestLabels) => boolean;\n  hasApprovesReview: (labels: PullRequestLabels) => boolean;\n  getNeedsReviewGroupNames: (labels: PullRequestLabels) => GroupNames[];\n  lockPullRequest: (\n    pullRequest: PullRequestData,\n    callback: () => Promise<void> | void,\n  ) => Promise<void>;\n\n  /** @deprecated */\n  lockPR: (\n    prId: string,\n    prNumber: number,\n    callback: () => Promise<void> | void,\n  ) => Promise<void>;\n\n  getMergeLockedPr: () => LockedMergePr;\n  addMergeLockPr: (pr: LockedMergePr) => void;\n  removePrFromAutomergeQueue: (\n    context: Context<any>,\n    prNumber: number,\n    reason: string,\n  ) => void;\n  reschedule: (context: Context<any>, pr: LockedMergePr) => void;\n  pushAutomergeQueue: (pr: LockedMergePr) => void;\n}\n\nexport type RepoContext<GroupNames extends string = any> =\n  AccountContext<GroupNames> & RepoContextWithoutTeamContext<GroupNames>;\n\nexport const shouldIgnoreRepo = (\n  repoName: string,\n  accountConfig: Config<any, any>,\n): boolean => {\n  const ignoreRepoRegexp =\n    accountConfig.ignoreRepoPattern &&\n    new RegExp(`^${accountConfig.ignoreRepoPattern}$`);\n\n  if (repoName === 'reviewflow-test') {\n    return process.env.REVIEWFLOW_NAME !== 'reviewflow-dev';\n  }\n\n  if (ignoreRepoRegexp) {\n    return ignoreRepoRegexp.test(repoName);\n  }\n\n  return false;\n};\n\nconst createGetReviewLabelIds = <GroupNames extends string>(\n  shouldIgnore: boolean,\n  config: Config<GroupNames>,\n  reviewGroupNames: GroupNames[],\n  labels: LabelsRecord,\n): ((labelKey: GroupLabels) => number[]) => {\n  if (shouldIgnore) return (labelKey: GroupLabels): number[] => [];\n  return (labelKey: GroupLabels): number[] =>\n    reviewGroupNames\n      .map((key) => config.labels.review[key][labelKey])\n      .filter(Boolean)\n      .map((name) => labels[name].id);\n};\n\nasync function initRepoContext<GroupNames extends string>(\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<RepoContext<GroupNames>> {\n  const {\n    id,\n    name,\n    full_name: fullName,\n    owner: org,\n    description,\n  } = context.payload.repository;\n  const repoEmoji = getEmojiFromRepoDescription(description);\n\n  const accountContext = await obtainAccountContext(\n    appContext,\n    context,\n    config,\n    org,\n  );\n  const repoContext = Object.create(accountContext);\n\n  const shouldIgnore = shouldIgnoreRepo(name, config);\n\n  const labels = shouldIgnore ? {} : await initRepoLabels(context, config);\n\n  const reviewGroupNames = Object.keys(config.groups) as GroupNames[];\n  const getReviewLabelIds = createGetReviewLabelIds(\n    shouldIgnore,\n    config,\n    reviewGroupNames,\n    labels,\n  );\n\n  const needsReviewLabelIds = getReviewLabelIds('needsReview');\n  const requestedReviewLabelIds = getReviewLabelIds('requested');\n  const changesRequestedLabelIds = getReviewLabelIds('changesRequested');\n  const approvedReviewLabelIds = getReviewLabelIds('approved');\n\n  const protectedLabelIds = [\n    ...requestedReviewLabelIds,\n    ...changesRequestedLabelIds,\n    ...approvedReviewLabelIds,\n  ];\n\n  const labelIdToGroupName = new Map<LabelResponse['id'], GroupNames>();\n  if (!shouldIgnore) {\n    reviewGroupNames.forEach((key) => {\n      const reviewGroupLabels = config.labels.review[key] as any;\n      Object.keys(reviewGroupLabels).forEach((labelKey: string) => {\n        labelIdToGroupName.set(labels[reviewGroupLabels[labelKey]].id, key);\n      });\n    });\n  }\n\n  // const updateStatusCheck = (context, reviewGroup, statusInfo) => {};\n\n  const hasNeedsReview = (labels: PullRequestLabels): boolean =>\n    labels.some((label) => label.id && needsReviewLabelIds.includes(label.id));\n  const hasRequestedReview = (labels: PullRequestLabels): boolean =>\n    labels.some(\n      (label) => label.id && requestedReviewLabelIds.includes(label.id),\n    );\n  const hasChangesRequestedReview = (labels: PullRequestLabels): boolean =>\n    labels.some(\n      (label) => label.id && changesRequestedLabelIds.includes(label.id),\n    );\n  const hasApprovesReview = (labels: PullRequestLabels): boolean =>\n    labels.some(\n      (label) => label.id && approvedReviewLabelIds.includes(label.id),\n    );\n\n  const getNeedsReviewGroupNames = (labels: PullRequestLabels): GroupNames[] =>\n    labels\n      .filter((label) => label.id && needsReviewLabelIds.includes(label.id))\n      .map((label) => labelIdToGroupName.get(label.id!))\n      .filter(ExcludesFalsy);\n\n  const lock = Lock();\n  let lockMergePr: LockedMergePr | undefined;\n  let automergeQueue: LockedMergePr[] = [];\n\n  const lockPR = (\n    prOrPrIssueId: string,\n    prNumber: number,\n    callback: () => Promise<void> | void,\n  ): Promise<void> =>\n    new Promise((resolve, reject) => {\n      const logInfos = {\n        repo: fullName,\n        prOrPrIssueId,\n        prNumber,\n      };\n      context.log.debug(logInfos, 'lock: try to lock pr');\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      lock(String(prNumber), async (createReleaseCallback) => {\n        const release = createReleaseCallback(() => {});\n        context.log.info(logInfos, 'lock: lock pr acquired');\n        try {\n          await callback();\n        } catch (err) {\n          context.log.info(logInfos, 'lock: release pr (with error)');\n          release();\n          reject(err);\n          return;\n        }\n        context.log.info(logInfos, 'lock: release pr');\n        release();\n        resolve();\n      });\n    });\n\n  const lockPullRequest = (\n    pullRequest: PullRequestWithDecentData,\n    callback: () => Promise<void> | void,\n  ): Promise<void> => {\n    return lockPR(String(pullRequest.id), pullRequest.number, callback);\n  };\n\n  const reschedule = (context: Context<any>, pr: LockedMergePr): void => {\n    if (!pr) throw new Error('Cannot reschedule undefined');\n    context.log.info(pr, 'reschedule');\n    setTimeout(() => {\n      lockPR('reschedule', -1, () => {\n        return lockPR(String(pr.id), pr.number, async () => {\n          const [pullRequest, reviewflowPrContext] = await Promise.all([\n            fetchPr(context, pr.number),\n            getReviewflowPrContext(pr.number, context, repoContext),\n          ]);\n          await autoMergeIfPossible(\n            pullRequest,\n            context,\n            repoContext,\n            reviewflowPrContext,\n          );\n        });\n      });\n    }, 10_000);\n  };\n\n  return Object.assign(repoContext, {\n    appContext,\n    labels,\n    repoFullName: fullName,\n    repoEmbed: { id, name },\n    repoEmoji,\n    protectedLabelIds,\n    shouldIgnore,\n    hasNeedsReview,\n    hasRequestedReview,\n    hasChangesRequestedReview,\n    hasApprovesReview,\n    getNeedsReviewGroupNames,\n\n    getMergeLockedPr: () => lockMergePr,\n    addMergeLockPr: (pr: LockedMergePr): void => {\n      // eslint-disable-next-line no-console\n      console.log('merge lock: lock', {\n        repo: fullName,\n        pr,\n      });\n      if (lockMergePr && String(lockMergePr.number) === String(pr.number)) {\n        return;\n      }\n      if (lockMergePr) throw new Error('Already have lock');\n      lockMergePr = pr;\n    },\n    removePrFromAutomergeQueue: (\n      context,\n      prNumber: number | string,\n      reason: string,\n    ): void => {\n      if (lockMergePr && String(lockMergePr.number) === String(prNumber)) {\n        lockMergePr = automergeQueue.shift();\n        context.log(`merge lock: remove ${fullName}#${prNumber}: ${reason}`);\n        if (lockMergePr) {\n          context.log(lockMergePr, `merge lock: next ${fullName}`);\n        } else {\n          context.log(`merge lock: nothing next ${fullName}`);\n        }\n        if (lockMergePr) {\n          reschedule(context, lockMergePr);\n        }\n      } else {\n        const previousLength = automergeQueue.length;\n        automergeQueue = automergeQueue.filter(\n          (value) => String(value.number) !== String(prNumber),\n        );\n        if (automergeQueue.length !== previousLength) {\n          context.log(`merge lock: remove ${fullName}#${prNumber}: ${reason}`);\n        }\n      }\n    },\n    pushAutomergeQueue: (pr: LockedMergePr): void => {\n      context.log(\n        {\n          repo: fullName,\n          pr,\n          lockMergePr,\n          automergeQueue,\n        },\n        'merge lock: push queue',\n      );\n      if (!automergeQueue.some((p) => p.number === pr.number)) {\n        automergeQueue.push(pr);\n      }\n    },\n    reschedule,\n\n    lockPR,\n    lockPullRequest,\n  } as RepoContextWithoutTeamContext<GroupNames>);\n}\n\nconst repoContextsPromise = new Map<number, Promise<RepoContext>>();\nconst repoContexts = new Map<number, RepoContext>();\n\nexport const obtainRepoContext = (\n  appContext: AppContext,\n  context: Context<any>,\n): Promise<RepoContext> | RepoContext | null => {\n  const repo = context.payload.repository;\n  const owner = repo.owner;\n  const key = repo.id;\n\n  const existingRepoContext = repoContexts.get(key);\n  if (existingRepoContext) return existingRepoContext;\n\n  const existingPromise = repoContextsPromise.get(key);\n  if (existingPromise) return Promise.resolve(existingPromise);\n\n  let accountConfig = accountConfigs[owner.login];\n\n  if (!accountConfig) {\n    context.log(`using default config for ${owner.login}`);\n    accountConfig = defaultConfig as Config<any, any>;\n  }\n\n  const promise = initRepoContext(appContext, context, accountConfig);\n  repoContextsPromise.set(key, promise);\n\n  return promise.then((repoContext) => {\n    repoContextsPromise.delete(key);\n    repoContexts.set(key, repoContext);\n    return repoContext;\n  });\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { AppContext } from '../../../context/AppContext';\nimport type { RepoContext } from '../../../context/repoContext';\nimport { obtainRepoContext } from '../../../context/repoContext';\n\nexport const createRepoHandler = <\n  T extends { repository: EventPayloads.PayloadRepository },\n>(\n  appContext: AppContext,\n  callback: (\n    context: Context<T>,\n    repoContext: RepoContext,\n  ) => Promise<void> | void,\n): ((context: Context<T>) => Promise<void>) => {\n  return async (context): Promise<void> => {\n    const repoContext = await obtainRepoContext(appContext, context);\n    if (!repoContext) return;\n\n    return callback(context, repoContext);\n  };\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { AppContext } from '../../../context/AppContext';\nimport type { RepoContext, LockedMergePr } from '../../../context/repoContext';\nimport { createRepoHandler } from '../../repository-handlers/utils/createRepoHandler';\nimport type {\n  PullRequestData,\n  PullRequestFromWebhook,\n} from './PullRequestData';\nimport type {\n  CreatePrContextOptions,\n  ReviewflowPrContext,\n} from './createPullRequestContext';\nimport { getReviewflowPrContext } from './createPullRequestContext';\n\ntype OnCallback<T> = (context: Context<T>) => Promise<void>;\n\nexport type CallbackWithPRAndRepoContext<T extends PullRequestData> = (\n  pullRequest: T,\n  repoContext: RepoContext,\n) => void | Promise<void>;\n\nexport const createPullRequestHandler = <\n  T extends\n    | EventPayloads.WebhookPayloadPullRequest\n    | EventPayloads.WebhookPayloadPullRequestReview\n    | EventPayloads.WebhookPayloadPullRequestReviewComment\n    | EventPayloads.WebhookPayloadIssueComment\n    | EventPayloads.WebhookPayloadPullRequestReviewComment,\n  U extends PullRequestFromWebhook,\n  GroupNames extends string = string,\n>(\n  appContext: AppContext,\n  getPullRequestInPayload: (\n    payload: Context<T>['payload'],\n    context: Context<T>,\n    repoContext: RepoContext<GroupNames>,\n  ) => U | null,\n  callbackPr: (\n    pullRequest: U,\n    context: Context<T>,\n    repoContext: RepoContext<GroupNames>,\n    reviewflowPrContext: ReviewflowPrContext | null,\n  ) => void | Promise<void>,\n  callbackBeforeLock?: (\n    pullRequest: U,\n    context: Context<T>,\n    repoContext: RepoContext<GroupNames>,\n  ) => CreatePrContextOptions,\n): OnCallback<T> => {\n  return createRepoHandler(appContext, async (context, repoContext) => {\n    const pullRequest: U | null = getPullRequestInPayload(\n      context.payload,\n      context,\n      repoContext,\n    );\n    if (pullRequest === null) return;\n    const options = callbackBeforeLock\n      ? callbackBeforeLock(pullRequest, context, repoContext)\n      : {};\n\n    await repoContext.lockPullRequest(pullRequest, async () => {\n      /*\n       * When repo are ignored, only slack notifications are sent.\n       * PR is not linted, commented, nor auto merged.\n       */\n      const reviewflowPrContext = repoContext.shouldIgnore\n        ? null\n        : await getReviewflowPrContext(\n            pullRequest.number,\n            context,\n            repoContext,\n            options.reviewflowCommentPromise,\n          );\n\n      return callbackPr(pullRequest, context, repoContext, reviewflowPrContext);\n    });\n  });\n};\n\nexport const createPullRequestsHandler = <\n  T extends { repository: EventPayloads.PayloadRepository },\n  U extends PullRequestFromWebhook | LockedMergePr,\n  GroupNames extends string,\n>(\n  appContext: AppContext,\n  getPrs: (\n    payload: Context<T>['payload'],\n    repoContext: RepoContext<GroupNames>,\n  ) => U[],\n  callbackPr: (\n    pullRequest: U,\n    context: Context<T>,\n    repoContext: RepoContext<GroupNames>,\n  ) => void | Promise<void>,\n): OnCallback<T> => {\n  return createRepoHandler(appContext, async (context, repoContext) => {\n    const prs = getPrs(context.payload, repoContext);\n    if (prs.length === 0) return;\n\n    await Promise.all(\n      prs.map((pr) =>\n        repoContext.lockPR(String(pr.id), pr.number, async () => {\n          return callbackPr(pr, context, repoContext);\n        }),\n      ),\n    );\n  });\n};\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { getReviewflowPrContext } from './utils/createPullRequestContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function checkrunCompleted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'check_run.completed',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext) => {\n        if (repoContext.shouldIgnore) return [];\n        return payload.check_run.pull_requests;\n      },\n      async (pullRequest, context, repoContext) => {\n        const [updatedPr, reviewflowPrContext] = await Promise.all([\n          fetchPr(context, pullRequest.number),\n          getReviewflowPrContext(pullRequest.number, context, repoContext),\n        ]);\n\n        await autoMergeIfPossible(\n          updatedPr,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { getReviewflowPrContext } from './utils/createPullRequestContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function checksuiteCompleted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'check_suite.completed',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext) => {\n        if (repoContext.shouldIgnore) return [];\n        return payload.check_suite.pull_requests;\n      },\n      async (pullRequest, context, repoContext) => {\n        const [updatedPr, reviewflowPrContext] = await Promise.all([\n          fetchPr(context, pullRequest.number),\n          getReviewflowPrContext(pullRequest.number, context, repoContext),\n        ]);\n\n        await autoMergeIfPossible(\n          updatedPr,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { PullRequestWithDecentData } from 'events/pr-handlers/utils/PullRequestData';\nimport type { RepoContext } from '../context/repoContext';\n\nexport const createLink = (url: string, text: string): string => {\n  return `<${url}|${text}>`;\n};\n\nexport const createPrLink = (\n  pr: { html_url: string; number: number },\n  repoContext: RepoContext,\n): string => {\n  return createLink(\n    pr.html_url,\n    `${repoContext.repoEmoji ? `${repoContext.repoEmoji} ` : ''}${\n      repoContext.repoFullName\n    }#${pr.number}`,\n  );\n};\n\nexport const createOwnerPart = (\n  ownerMention: string,\n  pullRequest: PullRequestWithDecentData,\n  sendTo: AccountInfo,\n): string => {\n  const owner = pullRequest.user;\n\n  if (owner && owner.id === sendTo.id) return 'your PR';\n\n  const isAssignedTo: boolean =\n    !!pullRequest.assignees &&\n    pullRequest.assignees.some((a: any) => a && a.id === sendTo.id);\n\n  return `${ownerMention}'s PR${isAssignedTo ? \" you're assigned to\" : ''}`;\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\n\nexport default async function createStatus<\n  T extends { repository: EventPayloads.PayloadRepository },\n>(\n  context: Context<T>,\n  name: string,\n  sha: string,\n  type: 'failure' | 'success',\n  description: string,\n  url?: string,\n): Promise<void> {\n  if (description.length > 140) {\n    context.log('description too long', { description });\n    description = description.slice(0, 140);\n  }\n  await context.octokit.repos.createCommitStatus(\n    context.repo({\n      context:\n        name === ''\n          ? process.env.REVIEWFLOW_NAME\n          : `${process.env.REVIEWFLOW_NAME}/${name}`,\n      sha,\n      state: type,\n      description,\n      target_url: url,\n    }),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\nimport type {\n  PullRequestLabels,\n  PullRequestWithDecentData,\n  PullRequestWithDecentDataFromWebhook,\n} from '../utils/PullRequestData';\nimport createStatus from './utils/createStatus';\n\nconst addStatusCheck = async function <\n  T extends { repository: EventPayloads.PayloadRepository },\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<T>,\n  { state, description }: { state: 'failure' | 'success'; description: string },\n  previousSha?: string,\n): Promise<void> {\n  const hasPrCheck = (\n    await context.octokit.checks.listForRef(\n      context.repo({\n        ref: pullRequest.head.sha,\n      }),\n    )\n  ).data.check_runs.find((check) => check.name === process.env.REVIEWFLOW_NAME);\n\n  context.log.debug({ hasPrCheck, state, description }, 'add status check');\n\n  if (hasPrCheck) {\n    await context.octokit.checks.create(\n      context.repo({\n        name: process.env.REVIEWFLOW_NAME!,\n        head_sha: pullRequest.head.sha,\n        started_at: pullRequest.created_at,\n        status: 'completed',\n        conclusion: state,\n        completed_at: new Date().toISOString(),\n        output: {\n          title: description,\n          summary: '',\n        },\n      }),\n    );\n  } else if (previousSha && state === 'failure') {\n    await Promise.all([\n      createStatus(\n        context,\n        '',\n        previousSha,\n        'success',\n        'New commits have been pushed',\n      ),\n      createStatus(context, '', pullRequest.head.sha, state, description),\n    ]);\n  } else {\n    await createStatus(context, '', pullRequest.head.sha, state, description);\n  }\n};\n\nexport const updateStatusCheckFromLabels = <\n  T extends { repository: EventPayloads.PayloadRepository },\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<T>,\n  repoContext: RepoContext,\n  labels: PullRequestLabels = pullRequest.labels || [],\n  previousSha?: string,\n): Promise<void> => {\n  context.log.debug(\n    {\n      labels: labels.map((l) => l?.name),\n      hasNeedsReview: repoContext.hasNeedsReview(labels),\n      hasApprovesReview: repoContext.hasApprovesReview(labels),\n    },\n    'updateStatusCheckFromLabels',\n  );\n\n  const createFailedStatusCheck = (description: string): Promise<void> =>\n    addStatusCheck(\n      pullRequest,\n      context,\n      {\n        state: 'failure',\n        description,\n      },\n      previousSha,\n    );\n\n  if (\n    pullRequest.requested_reviewers &&\n    pullRequest.requested_reviewers.length > 0\n  ) {\n    return createFailedStatusCheck(\n      `Awaiting review from: ${(\n        pullRequest.requested_reviewers as PullRequestWithDecentDataFromWebhook['requested_reviewers']\n      )\n        .filter(ExcludesFalsy)\n        .map((rr) => rr.login)\n        .join(', ')}`,\n    );\n  }\n\n  if (pullRequest.requested_teams && pullRequest.requested_teams.length > 0) {\n    return createFailedStatusCheck(\n      `Awaiting review from: ${(\n        pullRequest.requested_teams as PullRequestWithDecentDataFromWebhook['requested_teams']\n      )\n        .filter(ExcludesFalsy)\n        .map((rt) => rt.name)\n        .join(', ')}`,\n    );\n  }\n\n  if (repoContext.hasChangesRequestedReview(labels)) {\n    return createFailedStatusCheck(\n      'Changes requested ! Push commits or discuss changes then re-request a review.',\n    );\n  }\n\n  const needsReviewGroupNames = repoContext.getNeedsReviewGroupNames(labels);\n\n  if (needsReviewGroupNames.length > 0) {\n    return createFailedStatusCheck(\n      `Awaiting review from: ${needsReviewGroupNames.join(\n        ', ',\n      )}. Perhaps request someone ?`,\n    );\n  }\n\n  if (!repoContext.hasApprovesReview(labels)) {\n    if (repoContext.config.requiresReviewRequest) {\n      return createFailedStatusCheck(\n        'Awaiting review... Perhaps request someone ?',\n      );\n    }\n  }\n\n  // if (\n  //   repoContext.config.requiresReviewRequest &&\n  //   !repoContext.hasRequestedReview(labels)\n  // ) {\n  //   return  createFailedStatusCheck(\n  //     context,\n  //     pr,\n  //     'You need to request someone to review the PR',\n  //   );\n  //   return;\n  // }\n  // return  createInProgressStatusCheck(context);\n  // } else if (repoContext.hasApprovesReview(labels)) {\n  return addStatusCheck(\n    pullRequest,\n    context,\n    {\n      state: 'success',\n      description: '✓ PR ready to merge !',\n    },\n    previousSha,\n  );\n  // }\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { GroupLabels } from '../../../accountConfigs/types';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\nimport type {\n  PullRequestLabels,\n  PullRequestWithDecentData,\n} from '../utils/PullRequestData';\nimport { updateStatusCheckFromLabels } from './updateStatusCheckFromLabels';\n\nexport const updateReviewStatus = async <\n  E extends { repository: EventPayloads.PayloadRepository },\n  GroupNames extends string = any,\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewGroup: GroupNames,\n  {\n    add: labelsToAdd,\n    remove: labelsToRemove,\n  }: {\n    add?: (GroupLabels | false | undefined)[];\n    remove?: (GroupLabels | false | undefined)[];\n  },\n): Promise<PullRequestLabels> => {\n  context.log.debug(\n    {\n      reviewGroup,\n      labelsToAdd,\n      labelsToRemove,\n    },\n    'updateReviewStatus',\n  );\n\n  let prLabels: PullRequestLabels = pullRequest.labels || [];\n  if (!reviewGroup) return prLabels;\n\n  const newLabelNames = new Set<string>(\n    prLabels.map((label) => label.name).filter(ExcludesFalsy),\n  );\n\n  const toAdd = new Set<GroupLabels | string>();\n  const toAddNames = new Set<string>();\n  const toDelete = new Set<GroupLabels>();\n  const toDeleteNames = new Set<string>();\n  const labels = repoContext.labels;\n\n  const getLabelFromKey = (\n    key: GroupLabels,\n  ): undefined | PullRequestLabels[number] => {\n    const reviewConfig = repoContext.config.labels.review[reviewGroup];\n    if (!reviewConfig) return undefined;\n\n    return reviewConfig[key] && labels[reviewConfig[key]]\n      ? labels[reviewConfig[key]]\n      : undefined;\n  };\n\n  if (labelsToAdd) {\n    labelsToAdd.forEach((key) => {\n      if (!key) return;\n      const label = getLabelFromKey(key);\n      if (\n        !label ||\n        !label.name ||\n        prLabels.some((prLabel) => prLabel.id === label.id)\n      ) {\n        return;\n      }\n      newLabelNames.add(label.name);\n      toAdd.add(key);\n      toAddNames.add(label.name);\n    });\n  }\n\n  if (labelsToRemove) {\n    labelsToRemove.forEach((key) => {\n      if (!key) return;\n      const label = getLabelFromKey(key);\n      if (!label) return;\n      const existing = prLabels.find((prLabel) => prLabel.id === label.id);\n      if (existing && existing.name) {\n        newLabelNames.delete(existing.name);\n        toDelete.add(key);\n        toDeleteNames.add(existing.name);\n      }\n    });\n  }\n\n  // TODO move that elsewhere\n  if (pullRequest.user) {\n    repoContext.getTeamsForLogin(pullRequest.user.login).forEach((teamName) => {\n      const team = repoContext.config.teams[teamName];\n      if (team.labels) {\n        team.labels.forEach((labelKey) => {\n          const label = repoContext.labels[labelKey];\n          if (label && !prLabels.some((prLabel) => prLabel.id === label.id)) {\n            newLabelNames.add(label.name);\n            toAdd.add(labelKey);\n            toAddNames.add(label.name);\n          }\n        });\n      }\n    });\n  }\n\n  // if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return;\n\n  if (toAdd.size > 0 || toDelete.size > 0) {\n    if (toDelete.size === 0 || toDelete.size < 4) {\n      context.log.debug(\n        {\n          reviewGroup,\n          toAdd: [...toAdd],\n          toDelete: [...toDelete],\n          toAddNames: [...toAddNames],\n          toDeleteNames: [...toDeleteNames],\n        },\n        'updateReviewStatus',\n      );\n\n      if (toAdd.size > 0) {\n        const result = await context.octokit.issues.addLabels(\n          context.issue({\n            labels: [...toAddNames],\n          }),\n        );\n        prLabels = result.data;\n      }\n\n      if (toDelete.size > 0) {\n        for (const toDeleteName of toDeleteNames) {\n          try {\n            const result = await context.octokit.issues.removeLabel(\n              context.issue({\n                name: toDeleteName,\n              }),\n            );\n            prLabels = result.data;\n          } catch (err) {\n            context.log.warn(\n              {\n                err: err?.message,\n              },\n              'error removing label',\n            );\n          }\n        }\n      }\n    } else {\n      const newLabelNamesArray = [...newLabelNames];\n\n      context.log.debug(\n        {\n          reviewGroup,\n          toAdd: [...toAdd],\n          toDelete: [...toDelete],\n          oldLabels: prLabels.map((l) => l.name),\n          newLabelNames: newLabelNamesArray,\n        },\n        'updateReviewStatus',\n      );\n\n      const result = await context.octokit.issues.setLabels(\n        context.issue({\n          labels: newLabelNamesArray as string[] & { name: string }[],\n        }),\n      );\n      prLabels = result.data;\n    }\n  }\n\n  // if (toAdd.has('needsReview')) {\n  //   createInProgressStatusCheck(context);\n  // } else if (\n  //   toDelete.has('needsReview') ||\n  //   (prLabels.length === 0 && toAdd.size === 1 && toAdd.has('approved'))\n  // ) {\n  await updateStatusCheckFromLabels(\n    pullRequest,\n    context,\n    repoContext,\n    prLabels,\n  );\n  // }\n\n  return prLabels;\n};\n","import type { Context } from 'probot';\nimport type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { RepoContext } from '../../../context/repoContext';\nimport { getKeys } from '../../../context/utils';\n\ntype ReviewState = 'CHANGES_REQUESTED' | 'APPROVED' | 'DISMISSED';\n\ninterface ReviewStates {\n  approved: number;\n  changesRequested: number;\n  dismissed: number;\n}\n\nexport type Reviewer = AccountInfo;\n\nexport const getReviewersAndReviewStates = async <GroupNames extends string>(\n  context: Context,\n  repoContext: RepoContext<GroupNames>,\n): Promise<{\n  reviewers: Reviewer[];\n  reviewStates: Record<GroupNames, ReviewStates>;\n}> => {\n  const userIds = new Set<number>();\n  const reviewers: Reviewer[] = [];\n  const reviewStatesByUser = new Map<number, ReviewState>();\n\n  await context.octokit.paginate(\n    context.octokit.pulls.listReviews,\n    context.pullRequest({ page: undefined }),\n    ({ data: reviews }) => {\n      reviews.forEach((review) => {\n        if (!review.user) return;\n        if (!userIds.has(review.user.id)) {\n          userIds.add(review.user.id);\n          reviewers.push({\n            id: review.user.id,\n            login: review.user.login,\n            type: review.user.type,\n          });\n        }\n        const state = review.state.toUpperCase();\n        if (state !== 'COMMENTED') {\n          reviewStatesByUser.set(review.user.id, state as ReviewState);\n        }\n      });\n\n      return [];\n    },\n  );\n\n  const reviewStates: Record<GroupNames, ReviewStates> = {} as Record<\n    GroupNames,\n    ReviewStates\n  >;\n\n  getKeys(repoContext.config.groups).forEach((groupName) => {\n    reviewStates[groupName] = {\n      approved: 0,\n      changesRequested: 0,\n      dismissed: 0,\n    };\n  });\n\n  reviewers.forEach((reviewer) => {\n    const group = repoContext.getReviewerGroup(reviewer.login);\n    if (group) {\n      const state = reviewStatesByUser.get(reviewer.id);\n      switch (state) {\n        case 'APPROVED':\n          reviewStates[group].approved++;\n          break;\n        case 'CHANGES_REQUESTED':\n          reviewStates[group].changesRequested++;\n          break;\n        case 'DISMISSED':\n          reviewStates[group].dismissed++;\n          break;\n      }\n    }\n  });\n\n  return { reviewers, reviewStates };\n};\n","import type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { PullRequestWithDecentDataFromWebhook } from './PullRequestData';\nimport type { Reviewer } from './getReviewersAndReviewStates';\n\nexport interface RequestedReviewers extends AccountInfo {\n  isRequestedByName: boolean;\n  requestedByTeams: string[];\n}\n\nexport function getRolesFromPullRequestAndReviewers(\n  pullRequest: PullRequestWithDecentDataFromWebhook,\n  reviewers: Reviewer[],\n): {\n  owner: PullRequestWithDecentDataFromWebhook['user'];\n  assignees: PullRequestWithDecentDataFromWebhook['assignees'];\n  reviewers: Reviewer[];\n  requestedReviewers: RequestedReviewers[];\n  followers: AccountInfo[];\n} {\n  const owner = pullRequest.user;\n  const assignees = pullRequest.assignees;\n  const assigneeIds = assignees.map((a) => a.id);\n\n  const followers = reviewers.filter((user) => !assigneeIds.includes(user.id));\n  const requestedReviewers: RequestedReviewers[] =\n    pullRequest.requested_reviewers.map((rr) => ({\n      ...rr,\n      isRequestedByName: true,\n      requestedByTeams: [],\n    }));\n\n  if (pullRequest.requested_teams) {\n    // TODO\n    // requestedReviewers.push ...\n  }\n\n  if (requestedReviewers) {\n    followers.push(\n      ...requestedReviewers.filter((rr) => {\n        return (\n          !followers.some((f) => f.id === rr.id) && !assigneeIds.includes(rr.id)\n        );\n      }),\n    );\n  }\n\n  return {\n    owner,\n    assignees,\n    reviewers,\n    requestedReviewers,\n    followers,\n  };\n}\n","import type { Probot } from 'probot';\nimport type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { parseOptions } from './actions/utils/body/parseBody';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { getRolesFromPullRequestAndReviewers } from './utils/getRolesFromPullRequestAndReviewers';\n\nexport default function closed(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.closed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (pullRequest, context, repoContext, reviewflowPrContext) => {\n        /* if repo is not ignored */\n        if (reviewflowPrContext) {\n          /* update status, update automerge queue, delete branch */\n          const repo = context.payload.repository;\n\n          if (pullRequest.merged) {\n            const isNotFork = pullRequest.head.repo.id === repo.id;\n            const options = parseOptions(\n              reviewflowPrContext.commentBody,\n              repoContext.config.prDefaultOptions,\n            );\n\n            await Promise.all([\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pullRequest.number,\n                'pr closed',\n              ),\n              isNotFork && options.deleteAfterMerge\n                ? context.octokit.git\n                    .deleteRef(\n                      context.repo({ ref: `heads/${pullRequest.head.ref}` }),\n                    )\n                    .catch(() => {})\n                : undefined,\n            ]);\n          } else {\n            await Promise.all([\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pullRequest.number,\n                'pr closed',\n              ),\n              updateReviewStatus(pullRequest, context, repoContext, 'dev', {\n                remove: ['needsReview'],\n              }),\n            ]);\n          }\n        }\n\n        /* update slack home */\n        if (pullRequest.requested_reviewers) {\n          pullRequest.requested_reviewers.forEach((requestedReviewer) => {\n            repoContext.slack.updateHome(requestedReviewer.login);\n          });\n        }\n\n        if (pullRequest.requested_teams) {\n          await Promise.all(\n            pullRequest.requested_teams.map(async (team) => {\n              const members = await repoContext.getMembersForTeam(team.id);\n              members.forEach((member) => {\n                repoContext.slack.updateHome(member.login);\n              });\n            }),\n          );\n        }\n\n        if (pullRequest.assignees) {\n          pullRequest.assignees.forEach((assignee) => {\n            repoContext.slack.updateHome(assignee.login);\n          });\n        }\n\n        /* send notifications to assignees and followers */\n        const { reviewers } = await getReviewersAndReviewStates(\n          context,\n          repoContext,\n        );\n        const { owner, assignees, followers } =\n          getRolesFromPullRequestAndReviewers(pullRequest, reviewers);\n\n        const senderMention = repoContext.slack.mention(\n          context.payload.sender.login,\n        );\n        const ownerMention = repoContext.slack.mention(owner.login);\n        const prLink = slackUtils.createPrLink(pullRequest, repoContext);\n\n        const createMessage = (to: AccountInfo): string => {\n          const ownerPart = slackUtils.createOwnerPart(\n            ownerMention,\n            pullRequest,\n            to,\n          );\n\n          return `${\n            pullRequest.merged\n              ? `:rocket: ${senderMention} merged`\n              : `:wastebasket: ${senderMention} closed`\n          } ${ownerPart} ${prLink}\\n> ${pullRequest.title}`;\n        };\n\n        assignees.map((assignee) => {\n          if (context.payload.sender.id === assignee.id) return;\n          return repoContext.slack.postMessage('pr-lifecycle', assignee, {\n            text: createMessage(assignee),\n          });\n        });\n\n        followers.map((follower) => {\n          if (context.payload.sender.id === follower.id) return;\n          return repoContext.slack.postMessage(\n            'pr-lifecycle-follow',\n            follower,\n            {\n              text: createMessage(follower),\n            },\n          );\n        });\n      },\n    ),\n  );\n}\n","import type { KnownBlock } from '@slack/web-api';\nimport type { SlackMessage } from '../../../context/slack/SlackMessage';\n\nexport const createMrkdwnSectionBlock = (text: string): KnownBlock => ({\n  type: 'section',\n  text: {\n    type: 'mrkdwn',\n    text,\n  },\n});\n\nexport const createSlackMessageWithSecondaryBlock = (\n  message: string,\n  secondaryBlockText?: string | null,\n): SlackMessage => {\n  return {\n    text: message,\n    blocks: [\n      {\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: message,\n        },\n      },\n    ],\n    secondaryBlocks: !secondaryBlockText\n      ? undefined\n      : [createMrkdwnSectionBlock(secondaryBlockText)],\n  };\n};\n","import type { EventPayloads } from '@octokit/webhooks';\n\ntype WebhookPr =\n  | EventPayloads.WebhookPayloadPullRequest['pull_request']\n  | EventPayloads.WebhookPayloadPullRequestReviewPullRequest;\n\ntype PullRequestHandlerAllowedPayloads =\n  | {\n      repository: EventPayloads.PayloadRepository;\n      pull_request: WebhookPr;\n    }\n  | {\n      repository: EventPayloads.PayloadRepository;\n      issue: EventPayloads.WebhookPayloadIssueCommentIssue;\n    };\n\nexport type PullRequestFromPayload<\n  T extends PullRequestHandlerAllowedPayloads,\n> = T extends { pull_request: WebhookPr }\n  ? T['pull_request']\n  : T extends { issue: EventPayloads.WebhookPayloadIssueCommentIssue }\n  ? T['issue'] /* & T['issue']['pull_request'] */\n  : never;\n\n/** deprecated */\nexport const getPullRequestFromPayload = <\n  T extends PullRequestHandlerAllowedPayloads,\n>(\n  payload: T,\n): PullRequestFromPayload<T> => {\n  const pullRequest: WebhookPr = (payload as any).pull_request;\n  if (pullRequest) {\n    return pullRequest as PullRequestFromPayload<T>;\n  }\n\n  const issue = (payload as any).issue;\n  if (issue?.pull_request) {\n    return {\n      ...issue,\n      ...issue.pull_request,\n    };\n  }\n\n  throw new Error('No pull_request in payload');\n};\n","import issueParser from 'issue-parser';\n\nconst parse = issueParser('github', { actions: {}, issuePrefixes: [] });\n\nexport const parseMentions = (body: string): readonly string[] => {\n  return parse(body).mentions.map((m) => m.user);\n};\n","import slackifyMarkdown from 'slackify-markdown';\n\nexport const slackifyCommentBody = (\n  body: string,\n  multipleLines: boolean,\n): string => {\n  return slackifyMarkdown(\n    body\n      .replace('```suggestion', '_Suggested change:_\\n```suggestion')\n      .replace(\n        '```suggestion\\r\\n```',\n        `_Suggestion to remove line${multipleLines ? 's' : ''}._\\n`,\n      ),\n  );\n};\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot, Context } from 'probot';\nimport type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { AppContext } from '../../context/AppContext';\nimport type { SlackMessage } from '../../context/slack/SlackMessage';\nimport type { PostSlackMessageResult } from '../../context/slack/TeamSlack';\nimport type { AccountEmbed } from '../../mongo';\nimport * as slackUtils from '../../slack/utils';\nimport { ExcludesFalsy, ExcludesNullish } from '../../utils/Excludes';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { createSlackMessageWithSecondaryBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport { fetchPr } from './utils/fetchPr';\nimport type { PullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { getPullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { checkIfUserIsBot, checkIfIsThisBot } from './utils/isBotUser';\nimport { parseMentions } from './utils/parseMentions';\nimport { slackifyCommentBody } from './utils/slackifyCommentBody';\n\nconst getDiscussion = async (\n  context: Context,\n  comment: any,\n): Promise<\n  RestEndpointMethodTypes['pulls']['listReviewComments']['response']['data']\n> => {\n  if (!comment.in_reply_to_id) return [comment];\n  return context.octokit.paginate(\n    context.octokit.pulls.listReviewComments,\n    context.pullRequest() as any,\n    ({ data }) => {\n      return data.filter(\n        (c) =>\n          c.in_reply_to_id === comment.in_reply_to_id ||\n          c.id === comment.in_reply_to_id,\n      );\n    },\n  );\n};\n\nconst getMentions = (\n  discussion: RestEndpointMethodTypes['pulls']['listReviewComments']['response']['data'],\n): string[] => {\n  const mentions = new Set<string>();\n\n  discussion.forEach((c) => {\n    parseMentions(c.body).forEach((m) => mentions.add(m));\n  });\n\n  return [...mentions];\n};\n\nconst getUsersInThread = (\n  discussion: RestEndpointMethodTypes['pulls']['listReviewComments']['response']['data'],\n): AccountInfo[] => {\n  const userIds = new Set<number>();\n  const users: AccountInfo[] = [];\n\n  discussion.forEach((c) => {\n    if (!c.user || userIds.has(c.user.id)) return;\n    userIds.add(c.user.id);\n    users.push({ id: c.user.id, login: c.user.login, type: c.user.type });\n  });\n\n  return users;\n};\n\nexport default function prCommentCreated(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  const saveInDb = async (\n    type: 'review-comment' | 'issue-comment',\n    commentId: number,\n    accountEmbed: AccountEmbed,\n    results: PostSlackMessageResult[],\n    message: SlackMessage,\n  ): Promise<void> => {\n    const filtered = results.filter(ExcludesNullish);\n    if (filtered.length === 0) return;\n\n    await appContext.mongoStores.slackSentMessages.insertOne({\n      type,\n      typeId: commentId,\n      message,\n      account: accountEmbed,\n      sentTo: filtered,\n    });\n  };\n\n  app.on(\n    [\n      'pull_request_review_comment.created',\n      // comments without review and without path are sent with issue_comment.created.\n      // createHandlerPullRequestChange checks if pull_request event is present, removing real issues comments.\n      'issue_comment.created',\n    ],\n    createPullRequestHandler<\n      | EventPayloads.WebhookPayloadPullRequestReviewComment\n      | EventPayloads.WebhookPayloadIssueComment,\n      | PullRequestFromPayload<\n          | EventPayloads.WebhookPayloadPullRequestReviewComment\n          | EventPayloads.WebhookPayloadIssueComment\n        >\n      | any\n    >(\n      appContext,\n      (payload, context) => {\n        if (checkIfIsThisBot(payload.comment.user)) {\n          // ignore comments from this bot\n          return null;\n        }\n        return getPullRequestFromPayload(payload);\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const pr = await fetchPr(context, pullRequest.number);\n        const prUser = pr.user;\n        if (!prUser) return;\n        const { comment } = context.payload;\n        const type = (comment as any).pull_request_review_id\n          ? 'review-comment'\n          : 'issue-comment';\n\n        const body = comment.body;\n        if (!body) return;\n\n        const commentByOwner = prUser.login === comment.user.login;\n        const [discussion, { reviewers }] = await Promise.all([\n          getDiscussion(context, comment),\n          getReviewersAndReviewStates(context, repoContext),\n        ]);\n\n        const followers: AccountInfo[] = reviewers.filter(\n          (u) => u.id !== prUser.id && u.id !== comment.user.id,\n        );\n\n        if (pr.requested_reviewers) {\n          followers.push(\n            ...pr.requested_reviewers\n              .filter((rr) => {\n                return (\n                  rr &&\n                  !followers.some((f) => f.id === rr.id) &&\n                  rr.id !== (comment.user && comment.user.id) &&\n                  rr.id !== prUser.id\n                );\n              })\n              .filter(ExcludesFalsy)\n              .map<AccountInfo>((rr) => ({\n                id: rr.id,\n                login: rr.login,\n                type: rr.type,\n              })),\n          );\n        }\n\n        const usersInThread = getUsersInThread(discussion).filter(\n          (u) =>\n            u.id !== prUser.id &&\n            u.id !== comment.user.id &&\n            !followers.some((f) => f.id === u.id),\n        );\n        const mentions = getMentions(discussion).filter(\n          (m) =>\n            m !== prUser.login &&\n            m !== comment.user.login &&\n            !followers.some((f) => f.login === m) &&\n            !usersInThread.some((u) => u.login === m),\n        );\n\n        const mention = repoContext.slack.mention(comment.user.login);\n        const prUrl = slackUtils.createPrLink(pr, repoContext);\n        const ownerMention = repoContext.slack.mention(prUser.login);\n        const commentLink = slackUtils.createLink(\n          comment.html_url,\n          (comment as any).in_reply_to_id ? 'replied' : 'commented',\n        );\n\n        const createMessage = (toOwner?: boolean): string => {\n          const ownerPart = toOwner\n            ? 'your PR'\n            : `${\n                (prUser && prUser.id) === comment.user.id\n                  ? 'his'\n                  : `${ownerMention}'s`\n              } PR`;\n          return `:speech_balloon: ${mention} ${commentLink} on ${ownerPart} ${prUrl}`;\n        };\n\n        const promisesOwner = [];\n        const promisesNotOwner = [];\n        const slackifiedBody = slackifyCommentBody(\n          comment.body,\n          (comment as any).start_line !== null,\n        );\n        const isBotUser = checkIfUserIsBot(repoContext, comment.user);\n\n        if (!commentByOwner) {\n          const slackMessage = createSlackMessageWithSecondaryBlock(\n            createMessage(true),\n            slackifiedBody,\n          );\n\n          promisesOwner.push(\n            repoContext.slack\n              .postMessage(\n                isBotUser ? 'pr-comment-bots' : 'pr-comment',\n                prUser,\n                slackMessage,\n              )\n              .then((res) =>\n                saveInDb(\n                  type,\n                  comment.id,\n                  repoContext.accountEmbed,\n                  [res],\n                  slackMessage,\n                ),\n              ),\n          );\n        }\n\n        const message = createSlackMessageWithSecondaryBlock(\n          createMessage(false),\n          slackifiedBody,\n        );\n\n        promisesNotOwner.push(\n          ...followers.map((follower) =>\n            repoContext.slack.postMessage(\n              isBotUser ? 'pr-comment-follow-bots' : 'pr-comment-follow',\n              follower,\n              message,\n            ),\n          ),\n          ...usersInThread.map((user) =>\n            repoContext.slack.postMessage('pr-comment-thread', user, message),\n          ),\n        );\n\n        if (mentions.length > 0) {\n          await appContext.mongoStores.users\n            .findAll({ login: { $in: mentions } })\n            .then((users) => {\n              promisesNotOwner.push(\n                ...users.map((u) =>\n                  repoContext.slack.postMessage(\n                    'pr-comment-mention',\n                    { id: u._id, login: u.login, type: u.type },\n                    message,\n                  ),\n                ),\n              );\n            });\n        }\n\n        await Promise.all([\n          Promise.all(promisesOwner),\n          Promise.all(promisesNotOwner).then((results) =>\n            saveInDb(\n              type,\n              comment.id,\n              repoContext.accountEmbed,\n              results,\n              message,\n            ),\n          ),\n        ]);\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport type { Options } from './utils/body/prOptions';\nimport { updateCommentOptions } from './utils/body/updateBody';\n\nconst updatePrCommentBody = async <\n  E extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  context: Context<E>,\n  reviewflowPrContext: ReviewflowPrContext,\n  newBody: string,\n): Promise<void> => {\n  await context.octokit.issues.updateComment(\n    context.repo({\n      comment_id: reviewflowPrContext.reviewflowPr.commentId,\n      body: newBody,\n    }),\n  );\n  reviewflowPrContext.commentBody = newBody;\n};\n\nexport const updatePrCommentBodyIfNeeded = async <\n  E extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  context: Context<E>,\n  reviewflowPrContext: ReviewflowPrContext,\n  newBody: string,\n): Promise<void> => {\n  if (reviewflowPrContext.commentBody !== newBody) {\n    await updatePrCommentBody(context, reviewflowPrContext, newBody);\n  }\n};\n\nexport const updatePrCommentBodyOptions = async <\n  E extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  updateOptions: Partial<Options>,\n): Promise<void> => {\n  const { commentBody: newBody } = updateCommentOptions(\n    context.payload.repository.html_url,\n    repoContext.config.labels.list,\n    reviewflowPrContext.commentBody,\n    repoContext.config.prDefaultOptions,\n    updateOptions,\n  );\n\n  await updatePrCommentBodyIfNeeded(context, reviewflowPrContext, newBody);\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { PullRequestWithDecentData } from 'events/pr-handlers/utils/PullRequestData';\nimport type { LabelResponse } from '../../../../context/initRepoLabels';\nimport hasLabelInPR from './hasLabelInPR';\n\ninterface SyncLabelOptions {\n  onRemove?: () => void | Promise<void>;\n  onAdd?: (prLabels: LabelResponse[]) => void | Promise<void>;\n}\n\nexport default async function syncLabel<\n  T extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<T>,\n  shouldHaveLabel: boolean,\n  label: LabelResponse,\n  prHasLabel = hasLabelInPR(pullRequest.labels, label),\n  { onRemove, onAdd }: SyncLabelOptions = {},\n): Promise<void> {\n  if (prHasLabel && !shouldHaveLabel) {\n    await context.octokit.issues.removeLabel(\n      context.issue({ name: label.name }),\n    );\n    if (onRemove) await onRemove();\n  }\n  if (shouldHaveLabel && !prHasLabel) {\n    const response = await context.octokit.issues.addLabels(\n      context.issue({ labels: [label.name] }),\n    );\n    if (onAdd) await onAdd(response.data);\n  }\n}\n","import type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type {\n  PullRequestFromRestEndpoint,\n  PullRequestWithDecentData,\n} from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { autoMergeIfPossible } from './autoMergeIfPossible';\nimport { updatePrCommentBodyIfNeeded } from './updatePrCommentBody';\nimport type { Options } from './utils/body/prOptions';\nimport { updateCommentOptions } from './utils/body/updateBody';\nimport hasLabelInPR from './utils/hasLabelInPR';\nimport syncLabel from './utils/syncLabel';\n\nexport const calcDefaultOptions = (\n  repoContext: RepoContext,\n  pullRequest: PullRequestWithDecentData,\n): Options => {\n  const automergeLabel = repoContext.labels['merge/automerge'];\n  const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n  const prHasSkipCiLabel = hasLabelInPR(pullRequest.labels, skipCiLabel);\n  const prHasAutoMergeLabel = hasLabelInPR(pullRequest.labels, automergeLabel);\n\n  return {\n    ...repoContext.config.prDefaultOptions,\n    autoMergeWithSkipCi: prHasSkipCiLabel,\n    autoMerge: prHasAutoMergeLabel,\n  };\n};\n\nexport const syncLabelsAfterCommentBodyEdited = async (\n  pullRequest: PullRequestFromRestEndpoint,\n  context: Context<any>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n): Promise<void> => {\n  const automergeLabel = repoContext.labels['merge/automerge'];\n  const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n  const prHasSkipCiLabel = hasLabelInPR(pullRequest.labels, skipCiLabel);\n  const prHasAutoMergeLabel = hasLabelInPR(pullRequest.labels, automergeLabel);\n\n  const { commentBody, options } = updateCommentOptions(\n    context.payload.repository.html_url,\n    repoContext.config.labels.list,\n    reviewflowPrContext.commentBody,\n    calcDefaultOptions(repoContext, pullRequest),\n  );\n\n  await updatePrCommentBodyIfNeeded(context, reviewflowPrContext, commentBody);\n\n  if (options && automergeLabel) {\n    await Promise.all([\n      skipCiLabel &&\n        syncLabel(\n          pullRequest,\n          context,\n          options.autoMergeWithSkipCi,\n          skipCiLabel,\n          prHasSkipCiLabel,\n        ),\n      automergeLabel &&\n        syncLabel(\n          pullRequest,\n          context,\n          options.autoMerge,\n          automergeLabel,\n          prHasAutoMergeLabel,\n          {\n            onAdd: async (prLabels) => {\n              await autoMergeIfPossible(\n                pullRequest,\n                context,\n                repoContext,\n                reviewflowPrContext,\n                prLabels,\n              );\n            },\n            onRemove: () => {\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pullRequest.number,\n                'label removed',\n              );\n            },\n          },\n        ),\n    ]);\n  }\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { syncLabelsAfterCommentBodyEdited } from './actions/syncLabelsAfterCommentBodyEdited';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { createMrkdwnSectionBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport { fetchPr } from './utils/fetchPr';\nimport type { PullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { getPullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { checkIfIsThisBot } from './utils/isBotUser';\nimport { slackifyCommentBody } from './utils/slackifyCommentBody';\n\nexport default function prCommentEditedOrDeleted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    [\n      'pull_request_review_comment.edited',\n      'pull_request_review_comment.deleted',\n      // comments without review and without path are sent with issue_comment.created.\n      // createHandlerPullRequestChange checks if pull_request event is present, removing real issues comments.\n      'issue_comment.edited',\n      'issue_comment.deleted',\n    ],\n    createPullRequestHandler<\n      | EventPayloads.WebhookPayloadPullRequestReviewComment\n      | EventPayloads.WebhookPayloadIssueComment,\n      | PullRequestFromPayload<\n          | EventPayloads.WebhookPayloadPullRequestReviewComment\n          | EventPayloads.WebhookPayloadIssueComment\n        >\n      | any\n    >(\n      appContext,\n      (payload) => {\n        if (checkIfIsThisBot(payload.sender)) {\n          // ignore edits made from this bot\n          return null;\n        }\n        return getPullRequestFromPayload(payload);\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const { comment } = context.payload;\n\n        if (\n          reviewflowPrContext !== null &&\n          context.payload.action === 'edited' &&\n          checkIfIsThisBot(comment.user)\n        ) {\n          const updatedPr = await fetchPr(context, pullRequest.number);\n          if (!updatedPr.closed_at) {\n            await syncLabelsAfterCommentBodyEdited(\n              updatedPr,\n              context,\n              repoContext,\n              reviewflowPrContext,\n            );\n          }\n          return;\n        }\n\n        const type = (comment as any).pull_request_review_id\n          ? 'review-comment'\n          : 'issue-comment';\n\n        const criteria = {\n          'account.id': repoContext.accountEmbed.id,\n          'account.type': repoContext.accountEmbed.type,\n          type,\n          typeId: comment.id,\n        };\n\n        const sentMessages =\n          await appContext.mongoStores.slackSentMessages.findAll(criteria);\n\n        if (sentMessages.length === 0) return;\n\n        if (context.payload.action === 'deleted') {\n          await Promise.all([\n            Promise.all(\n              sentMessages.map((sentMessage) =>\n                Promise.all(\n                  sentMessage.sentTo.map((sentTo) =>\n                    repoContext.slack.deleteMessage(\n                      sentMessage.account,\n                      sentTo.ts,\n                      sentTo.channel,\n                    ),\n                  ),\n                ),\n              ),\n            ),\n            appContext.mongoStores.slackSentMessages.deleteMany(criteria),\n          ]);\n        } else {\n          const secondaryBlocks = [\n            createMrkdwnSectionBlock(\n              slackifyCommentBody(\n                comment.body,\n                (comment as any).start_line !== null,\n              ),\n            ),\n          ];\n\n          await Promise.all([\n            Promise.all(\n              sentMessages.map((sentMessage) =>\n                Promise.all(\n                  sentMessage.sentTo.map((sentTo) =>\n                    repoContext.slack.updateMessage(\n                      sentMessage.account,\n                      sentTo.ts,\n                      sentTo.channel,\n                      {\n                        ...sentMessage.message,\n                        secondaryBlocks,\n                      },\n                    ),\n                  ),\n                ),\n              ),\n            ),\n            appContext.mongoStores.slackSentMessages.partialUpdateMany(\n              criteria,\n              { $set: { 'message.secondaryBlocks': secondaryBlocks } },\n            ),\n          ]);\n        }\n      },\n    ),\n  );\n}\n","import parse from '@commitlint/parse';\nimport type { CommitNote } from '@commitlint/types';\nimport type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { updatePrCommentBodyIfNeeded } from './updatePrCommentBody';\nimport { updateCommentBodyCommitsNotes } from './utils/body/updateBody';\nimport { readPullRequestCommits } from './utils/readPullRequestCommits';\nimport syncLabel from './utils/syncLabel';\n\ninterface BreakingChangesCommits {\n  commit: RestEndpointMethodTypes['pulls']['listCommits']['response']['data'][number];\n  breakingChangesNotes: CommitNote[];\n}\n\nexport const readCommitsAndUpdateInfos = async <\n  E extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  commentBody = reviewflowPrContext.commentBody,\n): Promise<void> => {\n  // tmp.data[0].sha\n  // tmp.data[0].commit.message\n\n  const commits = await readPullRequestCommits(context);\n\n  const conventionalCommits = await Promise.all(\n    commits.map((c) => parse(c.commit.message)),\n  );\n\n  const breakingChangesCommits: BreakingChangesCommits[] = [];\n  conventionalCommits.forEach((c, index) => {\n    const breakingChangesNotes = c.notes.filter(\n      (note) => note.title === 'BREAKING CHANGE',\n    );\n    if (breakingChangesNotes.length > 0) {\n      breakingChangesCommits.push({\n        commit: commits[index],\n        breakingChangesNotes,\n      });\n    }\n  });\n\n  const breakingChangesLabel = repoContext.labels['breaking-changes'];\n  const newCommentBody = updateCommentBodyCommitsNotes(\n    commentBody,\n    breakingChangesCommits.length === 0\n      ? ''\n      : `Breaking Changes:\\n${breakingChangesCommits\n          .map(({ commit, breakingChangesNotes }) =>\n            breakingChangesNotes.map(\n              (note) => `- ${note.text.replace('\\n', ' ')} (${commit.sha})`,\n            ),\n          )\n          .join('')}`,\n  );\n\n  await Promise.all([\n    syncLabel(\n      pullRequest,\n      context,\n      breakingChangesCommits.length > 0,\n      breakingChangesLabel,\n    ),\n    updatePrCommentBodyIfNeeded(context, reviewflowPrContext, newCommentBody),\n  ]);\n\n  // TODO auto update ! in front of : to signal a breaking change when https://github.com/conventional-changelog/commitlint/issues/658 is closed\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\n\ninterface UpdatePr {\n  title?: string;\n  body?: string;\n}\n\nconst cleanNewLines = (text: string | null): string =>\n  !text ? '' : text.replace(/\\r\\n/g, '\\n');\nconst checkIfHasDiff = (text1: string | null, text2: string): boolean =>\n  cleanNewLines(text1) !== cleanNewLines(text2);\n\nexport const updatePrIfNeeded = async <\n  E extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  update: UpdatePr,\n): Promise<void> => {\n  const hasDiffInTitle = update.title && pullRequest.title !== update.title;\n  const hasDiffInBody =\n    update.body && checkIfHasDiff(pullRequest.body, update.body);\n\n  if (hasDiffInTitle || hasDiffInBody) {\n    const diff: Partial<Record<'title' | 'body', string>> = {};\n    if (hasDiffInTitle) {\n      diff.title = update.title;\n      pullRequest.title = update.title!;\n    }\n    if (hasDiffInBody) {\n      diff.body = update.body;\n      pullRequest.body = update.body!;\n    }\n\n    await context.octokit.pulls.update(\n      context.repo({\n        pull_number: pullRequest.number,\n        ...diff,\n      }),\n    );\n  }\n};\n","export const cleanTitle = (title: string): string =>\n  title\n    .trim()\n    .replace(\n      /[\\s-]+\\[?\\s*([A-Za-z][\\dA-Za-z]+)[ -](\\d+)\\s*]?\\s*$/,\n      (s, arg1, arg2) => ` ${arg1.toUpperCase()}-${arg2}`,\n    )\n    .replace(/^([A-Za-z]+)[/:]\\s*/, (s, arg1) => `${arg1.toLowerCase()}: `)\n    .replace(/^Revert \"([^\"]+)\"$/, 'revert: $1')\n    .replace(/\\s+[[\\]]\\s*no\\s*issue\\s*[[\\]]$/i, ' [no issue]')\n    .replace(/^(revert:.*)(\\s+\\(#\\d+\\))$/, '$1');\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { StatusInfo } from '../../../accountConfigs/types';\nimport { getKeys } from '../../../context/utils';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { checkIfUserIsBot } from '../utils/isBotUser';\nimport { readCommitsAndUpdateInfos } from './readCommitsAndUpdateInfos';\nimport { calcDefaultOptions } from './syncLabelsAfterCommentBodyEdited';\nimport { updatePrIfNeeded } from './updatePr';\nimport { updatePrCommentBodyIfNeeded } from './updatePrCommentBody';\nimport {\n  updateCommentBodyInfos,\n  defaultCommentBody,\n  createCommentBody,\n  removeDeprecatedReviewflowInPrBody,\n} from './utils/body/updateBody';\nimport { cleanTitle } from './utils/cleanTitle';\nimport createStatus from './utils/createStatus';\n\ninterface Status {\n  name: string;\n  status: StatusInfo;\n}\n\nexport const editOpenedPR = async <\n  E extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  shouldUpdateCommentBodyInfos: boolean,\n  previousSha?: string,\n): Promise<void> => {\n  const title = repoContext.config.trimTitle\n    ? cleanTitle(pullRequest.title)\n    : pullRequest.title;\n\n  const parsePRValue = {\n    title,\n    head: pullRequest.head.ref,\n    base: pullRequest.base.ref,\n  };\n\n  const isPrFromBot = !pullRequest.user\n    ? false\n    : checkIfUserIsBot(repoContext, pullRequest.user);\n\n  const statuses: Status[] = [];\n  let errorStatus: StatusInfo | undefined;\n\n  getKeys(repoContext.config.parsePR).forEach((parsePRKey) => {\n    const rules = repoContext.config.parsePR[parsePRKey];\n    if (!rules) return;\n\n    const value = parsePRValue[parsePRKey];\n    rules.forEach((rule) => {\n      if (rule.bot === false && isPrFromBot) return;\n\n      const match = rule.regExp.exec(value);\n      const status = rule.createStatusInfo(match, parsePRValue, isPrFromBot);\n\n      if (status !== null) {\n        if (rule.status) {\n          statuses.push({ name: rule.status, status });\n        } else if (status.type === 'failure') {\n          if (!errorStatus) {\n            errorStatus = status;\n          }\n        }\n      }\n    });\n  });\n\n  const date = new Date().toISOString();\n\n  const hasLintPrCheck = (\n    await context.octokit.checks.listForRef(\n      context.repo({\n        ref: pullRequest.head.sha,\n      }),\n    )\n  ).data.check_runs.find(\n    (check): boolean => check.name === `${process.env.REVIEWFLOW_NAME}/lint-pr`,\n  );\n\n  const promises: Promise<unknown>[] = [\n    ...statuses.map(\n      ({ name, status }): Promise<void> =>\n        createStatus(\n          context,\n          name,\n          pullRequest.head.sha,\n          status.type,\n          status.title,\n          status.url,\n        ),\n    ),\n    ...(previousSha\n      ? statuses\n          .filter(({ status }) => status.type === 'failure')\n          .map(({ name }): Promise<void> | undefined =>\n            createStatus(\n              context,\n              name,\n              previousSha,\n              'success',\n              'New commits have been pushed',\n            ),\n          )\n      : []),\n    hasLintPrCheck &&\n      context.octokit.checks.create(\n        context.repo({\n          name: `${process.env.REVIEWFLOW_NAME}/lint-pr`,\n          head_sha: pullRequest.head.sha,\n          status: 'completed',\n          conclusion: errorStatus ? 'failure' : 'success',\n          started_at: date,\n          completed_at: date,\n          output: errorStatus\n            ? {\n                title: errorStatus.title,\n                summary: errorStatus.summary,\n              }\n            : {\n                title: '✓ PR is valid',\n                summary: '',\n              },\n        }),\n      ),\n    !hasLintPrCheck && previousSha && errorStatus\n      ? createStatus(\n          context,\n          'lint-pr',\n          previousSha,\n          'success',\n          'New commits have been pushed',\n        )\n      : undefined,\n    !hasLintPrCheck &&\n      createStatus(\n        context,\n        'lint-pr',\n        pullRequest.head.sha,\n        errorStatus ? 'failure' : 'success',\n        errorStatus ? errorStatus.title : '✓ PR is valid',\n        errorStatus ? errorStatus.url : undefined,\n      ),\n  ].filter(ExcludesFalsy);\n\n  const body = removeDeprecatedReviewflowInPrBody(pullRequest.body);\n  promises.push(updatePrIfNeeded(pullRequest, context, { title, body }));\n\n  const commentBodyInfos: StatusInfo[] = statuses\n    .filter((status) => status.status.inBody)\n    .map((status) => status.status);\n\n  if (\n    // not a bot\n    !isPrFromBot &&\n    // should not happen, but ts needs it\n    pullRequest.user?.login &&\n    // belongs to the organization\n    repoContext.getReviewerGroup(pullRequest.user.login) &&\n    // has not connected its slack account yet\n    repoContext.slack.shouldShowLoginMessage(pullRequest.user.login)\n  ) {\n    commentBodyInfos.push({\n      type: 'failure',\n      title: `@${pullRequest.user.login} Connect your account to Slack to get notifications for your PRs !`,\n      url: `${process.env.REVIEWFLOW_APP_URL}/org/${context.payload.repository.owner.login}`,\n      summary: '',\n    });\n  }\n\n  const shouldCreateCommentBody =\n    reviewflowPrContext.commentBody === defaultCommentBody;\n\n  const newBody = shouldCreateCommentBody\n    ? createCommentBody(\n        context.payload.repository.html_url,\n        repoContext.config.labels.list,\n        calcDefaultOptions(repoContext, pullRequest),\n        commentBodyInfos,\n      )\n    : updateCommentBodyInfos(reviewflowPrContext.commentBody, commentBodyInfos);\n\n  if (shouldCreateCommentBody || shouldUpdateCommentBodyInfos) {\n    promises.push(\n      readCommitsAndUpdateInfos(\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n        newBody,\n      ),\n    );\n  } else {\n    promises.push(\n      updatePrCommentBodyIfNeeded(context, reviewflowPrContext, newBody),\n    );\n  }\n\n  await Promise.all(promises);\n};\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\nimport { checkIfIsThisBot } from './utils/isBotUser';\n\nexport default function edited(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.edited',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        if (reviewflowPrContext == null) return;\n\n        const sender = context.payload.sender;\n        if (checkIfIsThisBot(sender)) {\n          return;\n        }\n\n        const updatedPullRequest = await fetchPr(\n          context,\n          context.payload.pull_request.number,\n        );\n\n        await editOpenedPR(\n          updatedPullRequest,\n          context,\n          repoContext,\n          reviewflowPrContext,\n          false,\n        );\n        await autoMergeIfPossible(\n          updatedPullRequest,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { updateBranch } from './actions/updateBranch';\nimport { updatePrCommentBodyOptions } from './actions/updatePrCommentBody';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { updateStatusCheckFromLabels } from './actions/updateStatusCheckFromLabels';\nimport hasLabelInPR from './actions/utils/hasLabelInPR';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nconst isFromRenovate = (\n  payload: EventPayloads.WebhookPayloadPullRequest,\n): boolean => {\n  const sender = payload.sender;\n  return (\n    sender.type === 'Bot' &&\n    sender.login === 'renovate[bot]' &&\n    payload.pull_request.head.ref.startsWith('renovate/')\n  );\n};\n\nexport default function labelsChanged(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    ['pull_request.labeled', 'pull_request.unlabeled'],\n    createPullRequestHandler<\n      EventPayloads.WebhookPayloadPullRequest,\n      EventPayloads.WebhookPayloadPullRequest['pull_request']\n    >(\n      appContext,\n      (payload, context, repoContext) => {\n        if (payload.sender.type === 'Bot' && !isFromRenovate(payload)) {\n          return null;\n        }\n\n        if (repoContext.shouldIgnore) return null;\n\n        return payload.pull_request;\n      },\n      async (pullRequest, context, repoContext, reviewflowPrContext) => {\n        if (reviewflowPrContext === null) return;\n\n        const fromRenovate = isFromRenovate(context.payload);\n        const updatedPr = await fetchPr(context, pullRequest.number);\n\n        const label = (context.payload as any).label;\n        if (fromRenovate) {\n          const codeApprovedLabel = repoContext.labels['code/approved'];\n          const codeNeedsReviewLabel = repoContext.labels['code/needs-review'];\n          const autoMergeLabel = repoContext.labels['merge/automerge'];\n          const autoMergeSkipCiLabel = repoContext.labels['merge/skip-ci'];\n          if (context.payload.action === 'labeled') {\n            if (codeApprovedLabel && label.id === codeApprovedLabel.id) {\n              // const { data: reviews } = await context.octokit.pulls.listReviews(\n              //   context.pullRequest({ per_page: 1 }),\n              // );\n              // if (reviews.length !== 0) {\n              await context.octokit.pulls.createReview(\n                context.pullRequest({ event: 'APPROVE' }),\n              );\n\n              let labels = updatedPr.labels;\n              const autoMergeWithSkipCi =\n                autoMergeSkipCiLabel &&\n                repoContext.config.autoMergeRenovateWithSkipCi;\n              if (autoMergeWithSkipCi) {\n                const result = await context.octokit.issues.addLabels(\n                  context.issue({\n                    labels: [autoMergeSkipCiLabel.name],\n                  }),\n                );\n                labels = result.data;\n              }\n              if (hasLabelInPR(labels, codeNeedsReviewLabel)) {\n                await updateReviewStatus(\n                  updatedPr,\n                  context,\n                  repoContext,\n                  'dev',\n                  {\n                    remove: ['needsReview'],\n                  },\n                );\n              } else {\n                await updateStatusCheckFromLabels(\n                  updatedPr,\n                  context,\n                  repoContext,\n                  labels,\n                );\n              }\n\n              await updatePrCommentBodyOptions(\n                context,\n                repoContext,\n                reviewflowPrContext,\n                {\n                  autoMergeWithSkipCi,\n                  // force label to avoid racing events (when both events are sent in the same time, reviewflow treats them one by one but the second event wont have its body updated)\n                  autoMerge: hasLabelInPR(labels, autoMergeLabel)\n                    ? true\n                    : repoContext.config.prDefaultOptions.autoMerge,\n                },\n              );\n              // }\n            } else if (autoMergeLabel && label.id === autoMergeLabel.id) {\n              await updatePrCommentBodyOptions(\n                context,\n                repoContext,\n                reviewflowPrContext,\n                {\n                  autoMerge: true,\n                  // force label to avoid racing events (when both events are sent in the same time, reviewflow treats them one by one but the second event wont have its body updated)\n                  // Note: si c'est renovate qui ajoute le label autoMerge, le label codeApprovedLabel n'aurait pu etre ajouté que par renovate également (on est a quelques secondes de l'ouverture de la pr par renovate)\n                  autoMergeWithSkipCi: hasLabelInPR(\n                    pullRequest.labels,\n                    autoMergeSkipCiLabel,\n                  )\n                    ? true\n                    : repoContext.config.prDefaultOptions.autoMergeWithSkipCi,\n                },\n              );\n            }\n            await autoMergeIfPossible(\n              updatedPr,\n              context,\n              repoContext,\n              reviewflowPrContext,\n            );\n          }\n          return;\n        }\n\n        if (repoContext.protectedLabelIds.includes(label.id)) {\n          if (context.payload.action === 'labeled') {\n            await context.octokit.issues.removeLabel(\n              context.issue({ name: label.name }),\n            );\n          } else {\n            await context.octokit.issues.addLabels(\n              context.issue({ labels: [label.name] }),\n            );\n          }\n          return;\n        }\n\n        await updateStatusCheckFromLabels(updatedPr, context, repoContext);\n\n        const updateBranchLabel = repoContext.labels['merge/update-branch'];\n        const automergeLabel = repoContext.labels['merge/automerge'];\n        const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n        const option = (() => {\n          if (automergeLabel && label.id === automergeLabel.id) {\n            return 'autoMerge';\n          }\n          if (skipCiLabel && label.id === skipCiLabel.id) {\n            return 'autoMergeWithSkipCi';\n          }\n          return null;\n        })();\n\n        if (option) {\n          await updatePrCommentBodyOptions(\n            context,\n            repoContext,\n            reviewflowPrContext,\n            {\n              [option]: context.payload.action === 'labeled',\n            },\n          );\n        } // not an else if\n        if (automergeLabel && label.id === automergeLabel.id) {\n          if (context.payload.action === 'labeled') {\n            await autoMergeIfPossible(\n              updatedPr,\n              context,\n              repoContext,\n              reviewflowPrContext,\n            );\n          } else {\n            repoContext.removePrFromAutomergeQueue(\n              context,\n              pullRequest.number,\n              'automerge label removed',\n            );\n          }\n        }\n        if (updateBranchLabel && label.id === updateBranchLabel.id) {\n          if (context.payload.action === 'labeled') {\n            await updateBranch(\n              updatedPr,\n              context,\n              context.payload.sender.login,\n            );\n            await context.octokit.issues.removeLabel(\n              context.issue({ name: label.name }),\n            );\n          }\n        }\n      },\n    ),\n  );\n}\n","import type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { PullRequestFromRestEndpoint } from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { autoMergeIfPossible } from './autoMergeIfPossible';\nimport hasLabelInPR from './utils/hasLabelInPR';\n\nexport const autoApproveAndAutoMerge = async (\n  pullRequest: PullRequestFromRestEndpoint,\n  context: Context<any>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n): Promise<boolean> => {\n  // const autoMergeLabel = repoContext.labels['merge/automerge'];\n  const codeApprovedLabel = repoContext.labels['code/approved'];\n  if (hasLabelInPR(pullRequest.labels, codeApprovedLabel)) {\n    await context.octokit.pulls.createReview(\n      context.pullRequest({ event: 'APPROVE' }),\n    );\n    await autoMergeIfPossible(\n      pullRequest,\n      context,\n      repoContext,\n      reviewflowPrContext,\n    );\n    return true;\n  }\n\n  return false;\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { PullRequestFromRestEndpoint } from '../utils/PullRequestData';\n\nexport const autoAssignPRToCreator = async <\n  E extends EventPayloads.WebhookPayloadPullRequest,\n>(\n  pullRequest: E['pull_request'] | PullRequestFromRestEndpoint,\n  context: Context<E>,\n  repoContext: RepoContext,\n): Promise<void> => {\n  if (!repoContext.config.autoAssignToCreator) return;\n  if (!pullRequest.assignees || pullRequest.assignees.length > 0) return;\n  if (!pullRequest.user || pullRequest.user.type === 'Bot') return;\n\n  await context.octokit.issues.addAssignees(\n    context.issue({\n      assignees: [pullRequest.user.login],\n    }),\n  );\n};\n","import type { Probot } from 'probot';\nimport type { AppContext } from 'context/AppContext';\nimport { autoApproveAndAutoMerge } from './actions/autoApproveAndAutoMerge';\nimport { autoAssignPRToCreator } from './actions/autoAssignPRToCreator';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function opened(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.opened',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (pullRequest, context, repoContext, reviewflowPrContext) => {\n        if (reviewflowPrContext === null) return;\n        const fromRenovate = pullRequest.head.ref.startsWith('renovate/');\n\n        await Promise.all<unknown>([\n          autoAssignPRToCreator(pullRequest, context, repoContext),\n          editOpenedPR(\n            pullRequest,\n            context,\n            repoContext,\n            reviewflowPrContext,\n            true,\n          ),\n          fromRenovate\n            ? fetchPr(context, pullRequest.number).then((updatedPr) =>\n                autoApproveAndAutoMerge(\n                  updatedPr,\n                  context,\n                  repoContext,\n                  reviewflowPrContext,\n                ).then(async (approved: boolean): Promise<void> => {\n                  if (!approved) {\n                    await updateReviewStatus(\n                      pullRequest,\n                      context,\n                      repoContext,\n                      'dev',\n                      {\n                        add: ['needsReview'],\n                      },\n                    );\n                  }\n                }),\n              )\n            : updateReviewStatus(pullRequest, context, repoContext, 'dev', {\n                add: repoContext.config.requiresReviewRequest\n                  ? ['needsReview']\n                  : [],\n                remove: ['approved', 'changesRequested'],\n              }),\n        ]);\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { getRolesFromPullRequestAndReviewers } from './utils/getRolesFromPullRequestAndReviewers';\n\nexport default function reopened(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.reopened',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        return payload.pull_request;\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        /* if repo is not ignored */\n        if (reviewflowPrContext) {\n          await Promise.all([\n            updateReviewStatus(pullRequest, context, repoContext, 'dev', {\n              add: ['needsReview'],\n              remove: ['approved'],\n            }),\n            editOpenedPR(\n              pullRequest,\n              context,\n              repoContext,\n              reviewflowPrContext,\n              true,\n            ),\n          ]);\n        }\n\n        /* update slack home */\n        if (pullRequest.requested_reviewers) {\n          pullRequest.requested_reviewers.forEach((requestedReviewer) => {\n            repoContext.slack.updateHome(requestedReviewer.login);\n          });\n        }\n\n        if (pullRequest.requested_teams) {\n          await Promise.all(\n            pullRequest.requested_teams.map(async (team) => {\n              const members = await repoContext.getMembersForTeam(team.id);\n              members.forEach((member) => {\n                repoContext.slack.updateHome(member.login);\n              });\n            }),\n          );\n        }\n\n        if (pullRequest.assignees) {\n          pullRequest.assignees.forEach((assignee) => {\n            repoContext.slack.updateHome(assignee.login);\n          });\n        }\n\n        /* send notifications to assignees and followers */\n        const { reviewers } = await getReviewersAndReviewStates(\n          context,\n          repoContext,\n        );\n        const { owner, assignees, followers } =\n          getRolesFromPullRequestAndReviewers(pullRequest, reviewers);\n\n        const senderMention = repoContext.slack.mention(\n          context.payload.sender.login,\n        );\n        const ownerMention = repoContext.slack.mention(owner.login);\n        const prLink = slackUtils.createPrLink(pullRequest, repoContext);\n\n        const createMessage = (to: AccountInfo): string => {\n          const ownerPart = slackUtils.createOwnerPart(\n            ownerMention,\n            pullRequest,\n            to,\n          );\n\n          return `:recycle: ${senderMention} reopened ${ownerPart} ${prLink}\\n> ${pullRequest.title}`;\n        };\n\n        assignees.map((assignee) => {\n          if (context.payload.sender.id === assignee.id) return;\n          return repoContext.slack.postMessage('pr-lifecycle', assignee, {\n            text: createMessage(assignee),\n          });\n        });\n\n        followers.map((follower) => {\n          if (context.payload.sender.id === follower.id) return;\n          return repoContext.slack.postMessage(\n            'pr-lifecycle-follow',\n            follower,\n            {\n              text: createMessage(follower),\n            },\n          );\n        });\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\n\nexport default function reviewDismissed(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request_review.dismissed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const sender = context.payload.sender;\n        const reviewer = context.payload.review.user;\n        const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          const updatedPr = await fetchPr(context, pullRequest.number);\n\n          const { reviewStates } = await getReviewersAndReviewStates(\n            context,\n            repoContext,\n          );\n\n          const hasChangesRequestedInReviews =\n            reviewStates[reviewerGroup].changesRequested !== 0;\n          const hasApprovals = reviewStates[reviewerGroup].approved !== 0;\n          const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n            reviewerGroup,\n            updatedPr,\n            { includesReviewerGroup: true },\n          );\n\n          await updateReviewStatus(\n            updatedPr,\n            context,\n            repoContext,\n            reviewerGroup,\n            {\n              add: [\n                !hasApprovals && 'needsReview',\n                hasApprovals &&\n                  !hasRequestedReviewsForGroup &&\n                  !hasChangesRequestedInReviews &&\n                  'approved',\n              ],\n              remove: [\n                !hasRequestedReviewsForGroup &&\n                  !hasChangesRequestedInReviews &&\n                  'requested',\n                !hasChangesRequestedInReviews && 'changesRequested',\n                !hasApprovals && 'approved',\n              ],\n            },\n          );\n\n          if (updatedPr.assignees) {\n            updatedPr.assignees.forEach((assignee) => {\n              if (assignee) {\n                repoContext.slack.updateHome(assignee.login);\n              }\n            });\n          }\n          if (\n            !updatedPr.assignees ||\n            !updatedPr.assignees.some(\n              (assignee) => assignee && assignee.login === reviewer.login,\n            )\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n        }\n\n        if (repoContext.slack) {\n          if (sender.login === reviewer.login) {\n            pullRequest.assignees.forEach((assignee) => {\n              repoContext.slack.postMessage('pr-review', assignee, {\n                text: `:recycle: ${repoContext.slack.mention(\n                  reviewer.login,\n                )} dismissed his review on ${slackUtils.createPrLink(\n                  pullRequest,\n                  repoContext,\n                )}`,\n              });\n            });\n          } else {\n            repoContext.slack.postMessage('pr-review', reviewer, {\n              text: `:recycle: ${repoContext.slack.mention(\n                sender.login,\n              )} dismissed your review on ${slackUtils.createPrLink(\n                pullRequest,\n                repoContext,\n              )}`,\n            });\n          }\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\n\nexport default function reviewRequestRemoved(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request.review_request_removed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const sender = context.payload.sender;\n        const requestedReviewer = (context.payload as any).requested_reviewer;\n        const requestedTeam = (context.payload as any).requested_team;\n        const requestedReviewers = requestedReviewer\n          ? [requestedReviewer]\n          : await repoContext.getMembersForTeam(requestedTeam.id);\n\n        const reviewerGroup = requestedReviewer\n          ? repoContext.getReviewerGroup(requestedReviewer.login)\n          : repoContext.getTeamGroup(requestedTeam.name);\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n            reviewerGroup,\n            pullRequest,\n            {\n              includesReviewerGroup: true,\n            },\n          );\n\n          const { reviewStates } = await getReviewersAndReviewStates(\n            context,\n            repoContext,\n          );\n\n          const hasChangesRequestedInReviews =\n            reviewStates[reviewerGroup].changesRequested !== 0;\n\n          const hasApprovedInReviews =\n            reviewStates[reviewerGroup].approved !== 0;\n\n          const approved =\n            !hasRequestedReviewsForGroup &&\n            !hasChangesRequestedInReviews &&\n            hasApprovedInReviews;\n\n          await updateReviewStatus(\n            pullRequest,\n            context,\n            repoContext,\n            reviewerGroup,\n            {\n              add: [\n                // if changes requested by the one which requests was removed (should still be in changed requested anyway, but we never know)\n                hasChangesRequestedInReviews && 'changesRequested',\n                // if was already approved by another member in the group and has no other requests waiting\n                approved && 'approved',\n              ],\n              // remove labels if has no other requests waiting\n              remove: [\n                approved && 'needsReview',\n                !hasRequestedReviewsForGroup && 'requested',\n              ],\n            },\n          );\n\n          const assigneesLogins: string[] = [];\n          if (pullRequest.assignees) {\n            pullRequest.assignees.forEach((assignee) => {\n              assigneesLogins.push(assignee.login);\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n\n          requestedReviewers.forEach((potentialReviewer) => {\n            if (assigneesLogins.includes(potentialReviewer)) return;\n            repoContext.slack.updateHome(potentialReviewer.login);\n          });\n        }\n\n        if (repoContext.slack) {\n          if (requestedReviewers.some((rr) => rr.login === sender.login)) {\n            requestedReviewers.forEach((potentialReviewer) => {\n              if (potentialReviewer.login === sender.login) return;\n              repoContext.slack.postMessage('pr-review', potentialReviewer, {\n                text: `:skull_and_crossbones: ${repoContext.slack.mention(\n                  sender.login,\n                )} removed the request for your team _${\n                  requestedTeam.name\n                }_ review on ${slackUtils.createPrLink(\n                  pullRequest,\n                  repoContext,\n                )}`,\n              });\n            });\n          } else {\n            requestedReviewers.forEach((potentialReviewer) => {\n              repoContext.slack.postMessage('pr-review', potentialReviewer, {\n                text: `:skull_and_crossbones: ${repoContext.slack.mention(\n                  sender.login,\n                )} removed the request for  ${\n                  requestedTeam ? `your team _${requestedTeam.name}_` : 'your'\n                } review on ${slackUtils.createPrLink(\n                  pullRequest,\n                  repoContext,\n                )}`,\n              });\n            });\n          }\n\n          await Promise.all(\n            requestedReviewers.map(async (potentialReviewer) => {\n              const sentMessageRequestedReview =\n                await appContext.mongoStores.slackSentMessages.findOne({\n                  'account.id': repoContext.accountEmbed.id,\n                  'account.type': repoContext.accountEmbed.type,\n                  type: 'review-requested',\n                  typeId: `${pullRequest.id}_${\n                    requestedTeam ? `${requestedTeam.id}_` : ''\n                  }${potentialReviewer.id}`,\n                });\n\n              if (sentMessageRequestedReview) {\n                const sentTo = sentMessageRequestedReview.sentTo[0];\n                const message = sentMessageRequestedReview.message;\n                await Promise.all([\n                  repoContext.slack.updateMessage(\n                    sentMessageRequestedReview.account,\n                    sentTo.ts,\n                    sentTo.channel,\n                    {\n                      ...message,\n                      text: message.text\n                        .split('\\n')\n                        .map((l) => `~${l}~`)\n                        .join('\\n'),\n                    },\n                  ),\n                  repoContext.slack.addReaction(\n                    sentMessageRequestedReview.account,\n                    sentTo.ts,\n                    sentTo.channel,\n                    'skull_and_crossbones',\n                  ),\n                  appContext.mongoStores.slackSentMessages.deleteOne(\n                    sentMessageRequestedReview,\n                  ),\n                ]);\n              }\n            }),\n          );\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\n\nexport default function reviewRequested(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request.review_requested',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const sender = context.payload.sender;\n\n        const requestedReviewer = (context.payload as any).requested_reviewer;\n        const requestedTeam = (context.payload as any).requested_team;\n        const requestedReviewers = requestedReviewer\n          ? [requestedReviewer]\n          : await repoContext.getMembersForTeam(requestedTeam.id);\n\n        const reviewerGroup = requestedReviewer\n          ? repoContext.getReviewerGroup(requestedReviewer.login)\n          : repoContext.getTeamGroup(requestedTeam.name);\n        const shouldWait = false;\n        // repoContext.approveShouldWait(reviewerGroup, pr.requested_reviewers, { includesWaitForGroups: true });\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          await updateReviewStatus(\n            pullRequest,\n            context,\n            repoContext,\n            reviewerGroup,\n            {\n              add: ['needsReview', !shouldWait && 'requested'],\n              remove: ['approved'],\n            },\n          );\n\n          const assigneesLogins: string[] = [];\n          if (pullRequest.assignees) {\n            pullRequest.assignees.forEach((assignee) => {\n              assigneesLogins.push(assignee.login);\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n\n          requestedReviewers.forEach((potentialReviewer) => {\n            if (assigneesLogins.includes(potentialReviewer)) return;\n            repoContext.slack.updateHome(potentialReviewer.login);\n          });\n        }\n\n        if (!shouldWait && repoContext.slack) {\n          const text = `:eyes: ${repoContext.slack.mention(\n            sender.login,\n          )} requests ${\n            requestedReviewer ? 'your' : `your team _${requestedTeam.name}_`\n          } review on ${slackUtils.createPrLink(\n            pullRequest,\n            repoContext,\n          )} !\\n> ${pullRequest.title}`;\n          const message = { text };\n\n          await Promise.all(\n            requestedReviewers.map(async (potentialReviewer) => {\n              if (sender.login === potentialReviewer.login) return;\n\n              const result = await repoContext.slack.postMessage(\n                'pr-review',\n                potentialReviewer,\n                message,\n              );\n              if (result) {\n                await appContext.mongoStores.slackSentMessages.insertOne({\n                  type: 'review-requested',\n                  typeId: `${pullRequest.id}_${\n                    requestedTeam ? `${requestedTeam.id}_` : ''\n                  }${potentialReviewer.id}`,\n                  message,\n                  account: repoContext.accountEmbed,\n                  sentTo: [result],\n                });\n              }\n            }),\n          );\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport slackifyMarkdown from 'slackify-markdown';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { createSlackMessageWithSecondaryBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport { fetchPr } from './utils/fetchPr';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { getRolesFromPullRequestAndReviewers } from './utils/getRolesFromPullRequestAndReviewers';\n\nconst getEmojiFromState = (state: string): string => {\n  switch (state) {\n    case 'changes_requested':\n      return 'x';\n    case 'approved':\n      return 'white_check_mark';\n    default:\n      return 'speech_balloon';\n  }\n};\n\nexport default function reviewSubmitted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request_review.submitted',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const { payload } = context;\n\n        const {\n          user: reviewer,\n          state,\n          body,\n          html_url: reviewUrl,\n        } = payload.review;\n\n        const { reviewers, reviewStates } = await getReviewersAndReviewStates(\n          context,\n          repoContext,\n        );\n        const { owner, assignees, followers } =\n          getRolesFromPullRequestAndReviewers(pullRequest, reviewers);\n        const isReviewByOwner = owner.login === reviewer.login;\n\n        const filteredFollowers = followers.filter(\n          (follower) => follower.id !== reviewer.id,\n        );\n\n        if (!isReviewByOwner) {\n          const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n          let merged: boolean;\n\n          if (\n            reviewflowPrContext &&\n            !repoContext.shouldIgnore &&\n            reviewerGroup &&\n            repoContext.config.labels.review[reviewerGroup]\n          ) {\n            const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n              reviewerGroup,\n              pullRequest,\n              {\n                includesReviewerGroup: true,\n                // TODO reenable this when accepted can notify request review to slack (dev accepted => design requested) and flag to disable for label (approved design ; still waiting for dev ?)\n                // includesWaitForGroups: true,\n              },\n            );\n\n            const hasChangesRequestedInReviews =\n              reviewStates[reviewerGroup].changesRequested !== 0;\n\n            const approved =\n              !hasRequestedReviewsForGroup &&\n              !hasChangesRequestedInReviews &&\n              state === 'approved';\n\n            const updatedPr = await fetchPr(context, pullRequest.number);\n\n            const newLabels = await updateReviewStatus(\n              updatedPr,\n              context,\n              repoContext,\n              reviewerGroup,\n              {\n                add: [\n                  approved && 'approved',\n                  state === 'changes_requested' && 'needsReview',\n                  state === 'changes_requested' && 'changesRequested',\n                ],\n                remove: [\n                  approved && 'needsReview',\n                  !hasRequestedReviewsForGroup && 'requested',\n                  state === 'approved' &&\n                    !hasChangesRequestedInReviews &&\n                    'changesRequested',\n                  state === 'changes_requested' && 'approved',\n                ],\n              },\n            );\n\n            if (approved && !hasChangesRequestedInReviews) {\n              merged = await autoMergeIfPossible(\n                updatedPr,\n                context,\n                repoContext,\n                reviewflowPrContext,\n                newLabels,\n              );\n            }\n          }\n\n          if (assignees) {\n            assignees.forEach((assignee) => {\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n          if (\n            !assignees.some((assignee) => assignee.login === reviewer.login)\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n\n          const sentMessageRequestedReview =\n            await appContext.mongoStores.slackSentMessages.findOne({\n              'account.id': repoContext.accountEmbed.id,\n              'account.type': repoContext.accountEmbed.type,\n              type: 'review-requested',\n              typeId: `${pullRequest.id}_${reviewer.id}`,\n            });\n\n          const emoji = getEmojiFromState(state);\n\n          if (sentMessageRequestedReview) {\n            const sentTo = sentMessageRequestedReview.sentTo[0];\n            const message = sentMessageRequestedReview.message;\n            await Promise.all([\n              repoContext.slack.updateMessage(\n                sentMessageRequestedReview.account,\n                sentTo.ts,\n                sentTo.channel,\n                {\n                  ...message,\n                  text: message.text\n                    .split('\\n')\n                    .map((l) => `~${l}~`)\n                    .join('\\n'),\n                },\n              ),\n              repoContext.slack.addReaction(\n                sentMessageRequestedReview.account,\n                sentTo.ts,\n                sentTo.channel,\n                emoji,\n              ),\n              appContext.mongoStores.slackSentMessages.deleteOne(\n                sentMessageRequestedReview,\n              ),\n            ]);\n          }\n\n          if (!body && state !== 'changes_requested' && state !== 'approved') {\n            return;\n          }\n\n          const mention = repoContext.slack.mention(reviewer.login);\n          const prUrl = slackUtils.createPrLink(pullRequest, repoContext);\n          const ownerMention = repoContext.slack.mention(owner.login);\n\n          const createMessage = (\n            toOwner?: boolean,\n            isAssignedTo?: boolean,\n          ): string => {\n            const ownerPart = toOwner\n              ? 'your PR'\n              : `${ownerMention}'s PR${\n                  isAssignedTo ? \" you're assigned to\" : ''\n                }`;\n\n            if (state === 'changes_requested') {\n              return `:${emoji}: ${mention} requests changes on ${ownerPart} ${prUrl}`;\n            }\n            if (state === 'approved') {\n              return `${\n                toOwner ? ':clap: ' : ''\n              }:${emoji}: ${mention} approves ${ownerPart} ${prUrl}${\n                merged ? ' and PR is merged :tada:' : ''\n              }`;\n            }\n\n            const commentLink = slackUtils.createLink(reviewUrl, 'commented');\n            return `:${emoji}: ${mention} ${commentLink} on ${ownerPart} ${prUrl}`;\n          };\n\n          const slackifiedBody = slackifyMarkdown(body as unknown as string);\n\n          assignees.forEach((assignee) => {\n            repoContext.slack.postMessage(\n              'pr-review',\n              assignee,\n              createSlackMessageWithSecondaryBlock(\n                createMessage(assignee.id === owner.id, true),\n                slackifiedBody,\n              ),\n            );\n          });\n\n          const message = createSlackMessageWithSecondaryBlock(\n            createMessage(false),\n            slackifiedBody,\n          );\n\n          filteredFollowers.forEach((follower) => {\n            repoContext.slack.postMessage(\n              'pr-review-follow',\n              follower,\n              message,\n            );\n          });\n        } else if (body) {\n          const mention = repoContext.slack.mention(reviewer.login);\n          const prUrl = slackUtils.createPrLink(pullRequest, repoContext);\n          const commentLink = slackUtils.createLink(reviewUrl, 'commented');\n\n          const message = createSlackMessageWithSecondaryBlock(\n            `:speech_balloon: ${mention} ${commentLink} on his PR ${prUrl}`,\n            body,\n          );\n\n          filteredFollowers.forEach((follower) => {\n            repoContext.slack.postMessage(\n              'pr-review-follow',\n              follower,\n              message,\n            );\n          });\n        }\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot, Context } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport type { LockedMergePr } from '../../context/repoContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\n\nconst isSameBranch = (\n  payload: Context<EventPayloads.WebhookPayloadStatus>['payload'],\n  lockedPr: LockedMergePr,\n): boolean => {\n  if (!lockedPr) return false;\n  return !!payload.branches.some((b) => b.name === lockedPr.branch);\n};\n\nexport default function status(app: Probot, appContext: AppContext): void {\n  app.on(\n    'status',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext): LockedMergePr[] => {\n        if (repoContext.shouldIgnore) return [];\n\n        const lockedPr = repoContext.getMergeLockedPr();\n        if (!lockedPr) return [];\n\n        if (payload.state !== 'loading' && isSameBranch(payload, lockedPr)) {\n          return [lockedPr];\n        }\n\n        return [];\n      },\n      (pr, context, repoContext): void => {\n        const lockedPr = repoContext.getMergeLockedPr();\n        // check if changed\n        if (isSameBranch(context.payload, lockedPr)) {\n          repoContext.reschedule(context, lockedPr);\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateStatusCheckFromLabels } from './actions/updateStatusCheckFromLabels';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function synchronize(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.synchronize',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        if (!reviewflowPrContext) return;\n\n        const updatedPr = await fetchPr(context, pullRequest.number);\n        // old and new sha\n        // const { before, after } = context.payload;\n        const previousSha = (context.payload as any).before as string;\n\n        await Promise.all([\n          editOpenedPR(\n            updatedPr,\n            context,\n            repoContext,\n            reviewflowPrContext,\n            true,\n            previousSha,\n          ),\n          // addStatusCheckToLatestCommit\n          updateStatusCheckFromLabels(\n            updatedPr,\n            context,\n            repoContext,\n            updatedPr.labels,\n            previousSha,\n          ),\n        ]);\n\n        // call autoMergeIfPossible to re-add to the queue when push is fixed\n        await autoMergeIfPossible(\n          updatedPr,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { obtainRepoContext } from '../../context/repoContext';\nimport { getEmojiFromRepoDescription } from '../../context/utils';\nimport { createHandlerOrgChange } from '../account-handlers/utils/handler';\n\nexport default function repoEdited(app: Probot, appContext: AppContext): void {\n  app.on(\n    'repository.edited',\n    createHandlerOrgChange(\n      appContext,\n      async (context, orgContext): Promise<void> => {\n        const repoContext = await obtainRepoContext(appContext, context);\n        if (!repoContext) return;\n        const repo = context.payload.repository;\n        repoContext.repoFullName = repo.full_name;\n        repoContext.repoEmoji = getEmojiFromRepoDescription(repo.description);\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\n// import commands from 'probot-commands';\nimport type { AppContext } from './context/AppContext';\nimport membershipChanged from './events/account-handlers/membershipChanged';\nimport orgMemberAddedOrRemoved from './events/account-handlers/orgMemberAddedOrRemoved';\nimport teamChanged from './events/account-handlers/teamChanged';\nimport checkrunCompleted from './events/pr-handlers/checkrunCompleted';\nimport checksuiteCompleted from './events/pr-handlers/checksuiteCompleted';\nimport closedHandler from './events/pr-handlers/closed';\nimport commentCreated from './events/pr-handlers/commentCreated';\nimport commentEditedOrDeleted from './events/pr-handlers/commentEditedOrDeleted';\nimport editedHandler from './events/pr-handlers/edited';\nimport labelsChanged from './events/pr-handlers/labelsChanged';\nimport openedHandler from './events/pr-handlers/opened';\nimport reopenedHandler from './events/pr-handlers/reopened';\nimport reviewDismissedHandler from './events/pr-handlers/reviewDismissed';\nimport reviewRequestRemovedHandler from './events/pr-handlers/reviewRequestRemoved';\nimport reviewRequestedHandler from './events/pr-handlers/reviewRequested';\nimport reviewSubmittedHandler from './events/pr-handlers/reviewSubmitted';\nimport status from './events/pr-handlers/status';\nimport synchronizeHandler from './events/pr-handlers/synchronize';\nimport repoEdited from './events/repository-handlers/repoEdited';\n\nexport default function initApp(app: Probot, appContext: AppContext): void {\n  // Account\n  /* https://developer.github.com/webhooks/event-payloads/#organization */\n  /* https://developer.github.com/webhooks/event-payloads/#team */\n  /* https://developer.github.com/webhooks/event-payloads/#membership */\n  orgMemberAddedOrRemoved(app, appContext);\n  teamChanged(app, appContext);\n  membershipChanged(app, appContext);\n\n  // Repo\n  /* https://developer.github.com/webhooks/event-payloads/#repository */\n  repoEdited(app, appContext);\n\n  // PR\n  /* https://developer.github.com/webhooks/event-payloads/#pull_request */\n  openedHandler(app, appContext);\n  editedHandler(app, appContext);\n  closedHandler(app, appContext);\n  reopenedHandler(app, appContext);\n\n  reviewRequestedHandler(app, appContext);\n  reviewRequestRemovedHandler(app, appContext);\n  reviewSubmittedHandler(app, appContext);\n  reviewDismissedHandler(app, appContext);\n  labelsChanged(app, appContext);\n  synchronizeHandler(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#pull_request_review_comment */\n  /* https://developer.github.com/webhooks/event-payloads/#issue_comment */\n  commentCreated(app, appContext);\n  commentEditedOrDeleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#check_run */\n  checkrunCompleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#check_suite */\n  checksuiteCompleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#status */\n  status(app, appContext);\n\n  /* commands */\n  // commands(app, 'update-branch', () => {});\n}\n","/* eslint-disable @typescript-eslint/no-floating-promises */\nimport type { MongoBaseModel } from 'liwi-mongo';\nimport { MongoStore, MongoConnection } from 'liwi-mongo';\nimport type { SlackMessage } from './context/slack/SlackMessage';\nimport type { MessageCategory } from './dm/MessageCategory';\n\n// export interface PrEventsModel extends MongoModel {\n//   owner: string;\n//   repo: string;\n//   prId: string;\n//   prNumber: string;\n//   event: string;\n// }\n\nexport type AccountType = 'Organization' | 'User';\n\nexport interface AccountEmbed {\n  id: number;\n  login: string;\n  type: AccountType;\n}\n\ninterface RepoEmbed {\n  id: number;\n  name: string;\n}\n\ninterface PrEmbed {\n  number: number;\n}\n\nexport type AccountEmbedWithoutType = Omit<AccountEmbed, 'type'>;\n\nexport interface UserDmSettings extends MongoBaseModel {\n  userId: number;\n  orgId: number;\n  settings: Record<MessageCategory, boolean>;\n}\n\ninterface BaseAccount extends MongoBaseModel<number> {\n  login: string;\n  installationId?: number;\n}\n\nexport interface User extends BaseAccount {\n  type: string;\n}\n\ninterface OrgConfig {\n  canUseExternalSlack?: boolean;\n}\n\nexport interface Org extends BaseAccount {\n  slackTeamId?: string;\n  /** @deprecated */\n  slackToken?: string;\n  config: OrgConfig;\n}\n\nexport interface OrgTeam extends MongoBaseModel<number> {\n  org: AccountEmbedWithoutType;\n  name: string;\n  slug: string;\n  description: string | null;\n}\n\nexport interface OrgTeamEmbed {\n  id: OrgTeam['_id'];\n  name: OrgTeam['name'];\n  slug: OrgTeam['slug'];\n}\n\ninterface OrgMemberSlack {\n  id: string;\n  email?: string;\n  accessToken?: string;\n  scope?: string[];\n  teamId?: string;\n}\n\nexport interface OrgMember extends MongoBaseModel {\n  org: AccountEmbedWithoutType;\n  user: AccountEmbedWithoutType;\n  slack?: OrgMemberSlack;\n  teams: OrgTeamEmbed[];\n}\n\nexport interface SlackTeam extends MongoBaseModel {\n  /** slack app installed (should be the same everywhere, but could be useful later) */\n  appId: string;\n  installerUserId: string;\n  botUserId: string;\n  botAccessToken?: string;\n  scope?: string[];\n  teamName?: string;\n}\n\nexport interface SlackTeamInstallation extends SlackTeam {\n  teamId: SlackTeam['_id'];\n}\n\nexport type SlackMessageType =\n  | 'review-comment'\n  | 'issue-comment'\n  | 'review-submitted'\n  | 'review-requested';\n\nexport interface SlackSentMessage extends MongoBaseModel {\n  type: SlackMessageType;\n  typeId: number | string;\n  account: AccountEmbed;\n  message: SlackMessage;\n  sentTo: {\n    channel: string;\n    ts: string;\n  }[];\n}\n\nexport interface AutomergeLog extends MongoBaseModel {\n  account: AccountEmbed;\n  repoFullName: string;\n  pr: {\n    id: number;\n    number: number;\n    isRenovate: boolean;\n    mergeableState: string;\n  };\n  type:\n    | 'rebase-renovate'\n    | 'unknown mergeable_state'\n    | 'blocked mergeable_state'\n    | 'behind mergeable_state'\n    | 'not mergeable'\n    | 'failed status or checks'\n    | 'already merged';\n  action: 'remove' | 'reschedule' | 'wait' | 'update branch';\n}\n\nexport interface ReviewflowPr extends MongoBaseModel {\n  account: AccountEmbed;\n  repo: RepoEmbed;\n  pr: PrEmbed;\n  commentId: number;\n}\n\nexport interface MongoStores {\n  connection: MongoConnection;\n  userDmSettings: MongoStore<UserDmSettings>;\n  users: MongoStore<User>;\n  orgs: MongoStore<Org>;\n  orgMembers: MongoStore<OrgMember>;\n  orgTeams: MongoStore<OrgTeam>;\n  slackTeams: MongoStore<SlackTeam>;\n  slackTeamInstallations: MongoStore<SlackTeamInstallation>;\n  slackSentMessages: MongoStore<SlackSentMessage>;\n  automergeLogs: MongoStore<AutomergeLog>;\n  prs: MongoStore<ReviewflowPr>;\n  // prEvents: MongoStore<PrEventsModel>;\n}\n\nif (!process.env.MONGO_DB) {\n  throw new Error('MONGO_DB is missing in process.env');\n}\n\nexport default function init(): MongoStores {\n  const config = new Map([\n    ['host', process.env.MONGO_HOST || 'localhost'],\n    ['port', process.env.MONGO_PORT || '27017'],\n    ['database', process.env.MONGO_DB!],\n  ]);\n  if (process.env.MONGO_USER) {\n    config.set('user', process.env.MONGO_USER);\n    config.set('password', process.env.MONGO_PASSWORD!);\n  }\n  const connection = new MongoConnection(config);\n\n  // const prEvents = new MongoStore<PrEventsModel>(connection, 'prEvents');\n  // prEvents.collection.then((coll) => {\n  //   coll.createIndex({ owner: 1, repo: 1, ???: 1 });\n  // });\n\n  const userDmSettings = new MongoStore<UserDmSettings>(\n    connection,\n    'userDmSettings',\n  );\n  userDmSettings.collection.then((coll) => {\n    coll.createIndex({ userId: 1, orgId: 1 }, { unique: true });\n  });\n\n  const users = new MongoStore<User>(connection, 'users');\n  users.collection.then((coll) => {\n    coll.createIndex({ login: 1 }, { unique: true });\n  });\n\n  const orgs = new MongoStore<Org>(connection, 'orgs');\n  orgs.collection.then((coll) => {\n    coll.createIndex({ login: 1 }, { unique: true });\n  });\n\n  const orgMembers = new MongoStore<OrgMember>(connection, 'orgMembers');\n  orgMembers.collection.then((coll) => {\n    coll.createIndex({ 'user.id': 1, 'org.id': 1 }, { unique: true });\n    coll.createIndex(\n      { 'org.id': 1, 'user.id': 1, 'teams.id': 1 },\n      { unique: true },\n    );\n    coll.createIndex({ 'org.id': 1, 'teams.id': 1 });\n  });\n\n  const orgTeams = new MongoStore<OrgTeam>(connection, 'orgTeams');\n  orgTeams.collection.then((coll) => {\n    coll.createIndex({ 'org.id': 1 });\n  });\n\n  const slackSentMessages = new MongoStore<SlackSentMessage>(\n    connection,\n    'slackSentMessages',\n  );\n  slackSentMessages.collection.then((coll) => {\n    coll.createIndex({\n      'account.id': 1,\n      'account.type': 1,\n      type: 1,\n      typeId: 1,\n    });\n    // remove older than 14 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  const automergeLogs = new MongoStore<AutomergeLog>(\n    connection,\n    'automergeLogs',\n  );\n  automergeLogs.collection.then((coll) => {\n    coll.createIndex({\n      repoFullName: 1,\n      type: 1,\n    });\n    coll.createIndex({\n      repoFullName: 1,\n      'pr.number': 1,\n    });\n    // remove older than 30 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  const prs = new MongoStore<ReviewflowPr>(connection, 'prs');\n  prs.collection.then((coll) => {\n    coll.createIndex(\n      {\n        'account.id': 1,\n        'repo.id': 1,\n        'pr.number': 1,\n      },\n      { unique: true },\n    );\n    // remove older than 12 * 30 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 12 * 30 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  const slackTeams = new MongoStore<SlackTeam>(connection, 'slackTeams');\n  const slackTeamInstallations = new MongoStore<SlackTeamInstallation>(\n    connection,\n    'slackTeamsInstallations',\n  );\n\n  // return { connection, prEvents };\n  return {\n    connection,\n    userDmSettings,\n    users,\n    orgs,\n    orgMembers,\n    orgTeams,\n    slackTeams,\n    slackTeamInstallations,\n    slackSentMessages,\n    automergeLogs,\n    prs,\n  };\n}\n","import { WebClient } from '@slack/web-api';\nimport type { MongoStores, Org, OrgMember } from '../mongo';\nimport type { Octokit } from '../octokit';\nimport { createLink } from './utils';\n\ninterface QueueItem {\n  github: Octokit;\n  slackClient: WebClient;\n  member: OrgMember;\n}\n\nexport const createSlackHomeWorker = (mongoStores: MongoStores) => {\n  const updateMember = async (\n    octokit: Octokit,\n    slackClient: WebClient,\n    member: OrgMember,\n  ): Promise<void> => {\n    if (!member.slack?.id) return;\n    // console.log('update member', member.org.login, member.user.login);\n\n    /* search limit: 30 requests per minute = 7 update/min max */\n    const [\n      prsWithRequestedReviews,\n      prsToMerge,\n      prsWithRequestedChanges,\n      prsInDraft,\n    ] = await Promise.all([\n      octokit.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open review-requested:${member.user.login} `,\n        sort: 'created',\n        order: 'desc',\n      }),\n      octokit.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} label:\":ok_hand: code/approved\"`,\n        sort: 'created',\n        order: 'desc',\n      }),\n      octokit.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} label:\":ok_hand: code/changes-requested\"`,\n        sort: 'created',\n        order: 'desc',\n      }),\n      octokit.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} draft:true`,\n        sort: 'created',\n        order: 'desc',\n        per_page: 5,\n      }),\n    ]);\n\n    const blocks: any[] = [\n      {\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: `Configure your ${\n            process.env.REVIEWFLOW_NAME\n          } settings ${createLink(\n            `${process.env.REVIEWFLOW_APP_URL}/${member.org.login}`,\n            'here',\n          )}.`,\n        },\n      },\n      {\n        type: 'header',\n        text: {\n          type: 'plain_text',\n          text: 'PRs requesting your attention',\n        },\n      },\n    ];\n\n    const buildBlocks = (title: string, results: any) => {\n      if (!results.total_count) return;\n\n      blocks.push(\n        {\n          type: 'section',\n          text: {\n            type: 'mrkdwn',\n            text: `*${title}*`,\n          },\n        },\n        {\n          type: 'divider',\n        },\n        ...results.items.flatMap((pr: any) => {\n          const repoName = pr.repository_url.slice(\n            'https://api.github.com/repos/'.length,\n          );\n          const prFullName = `${repoName}#${pr.number}`;\n\n          return [\n            {\n              type: 'section',\n              text: {\n                type: 'mrkdwn',\n                text: `*${createLink(pr.html_url, pr.title)}*`,\n                //  ${pr.labels.map((l) => `{${l.name}}`).join(' · ')}\n              },\n            },\n            {\n              type: 'context',\n              elements: [\n                {\n                  type: 'mrkdwn',\n                  text: `${createLink(pr.html_url, prFullName)} ${\n                    pr.draft ? '· _Draft_' : ''\n                  }`,\n                },\n                {\n                  type: 'image',\n                  image_url: pr.user.avatar_url,\n                  alt_text: pr.user.login,\n                },\n                {\n                  type: 'mrkdwn',\n                  text: `${pr.user.login}`,\n                },\n              ],\n            },\n          ];\n        }),\n        {\n          type: 'context',\n          elements: [\n            {\n              type: 'image',\n              image_url:\n                'https://api.slack.com/img/blocks/bkb_template_images/placeholder.png',\n              alt_text: 'placeholder',\n            },\n          ],\n        },\n      );\n    };\n\n    buildBlocks(':eyes: Requested Reviews', prsWithRequestedReviews.data);\n    buildBlocks(':white_check_mark: Ready to Merge', prsToMerge.data);\n    buildBlocks(':x: Changes Requested', prsWithRequestedChanges.data);\n    buildBlocks(':construction: Drafts', prsInDraft.data);\n\n    if (blocks.length === 2) {\n      blocks.push({\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: \":tada: It looks like you don't have any PR to review!\",\n        },\n      });\n    }\n\n    slackClient.views.publish({\n      user_id: member.slack.id,\n      view: {\n        type: 'home',\n        blocks,\n      },\n    });\n  };\n\n  let workerInterval: ReturnType<typeof setInterval> | undefined;\n  const queueKeys = new Set<string>();\n  const queue: QueueItem[] = [];\n\n  const stop = (): void => {\n    if (workerInterval !== undefined) {\n      clearInterval(workerInterval);\n      workerInterval = undefined;\n    }\n  };\n\n  const start = (): void => {\n    if (workerInterval !== undefined) return;\n    workerInterval = setInterval(() => {\n      const item = queue.shift();\n      if (!item) {\n        stop();\n        return;\n      }\n\n      const { github, slackClient, member } = item;\n      const memberId = member.slack?.id;\n\n      const key = `${member.org.id}_${memberId}`;\n      queueKeys.delete(key);\n\n      updateMember(github, slackClient, member);\n    }, 9000); // 7/min 60s 1min = 1 ttes les 8.5s max\n  };\n\n  const scheduleUpdateMember = (\n    github: Octokit,\n    slackClient: WebClient,\n    member: OrgMember,\n  ): void => {\n    const memberId = member.slack?.id;\n    if (!memberId) return;\n\n    const key = `${member.org.id}_${memberId}`;\n\n    if (!queueKeys.has(key)) {\n      queueKeys.add(key);\n      queue.push({\n        github,\n        slackClient,\n        member,\n      });\n      start();\n    }\n  };\n\n  const scheduleUpdateOrg = async (\n    github: Octokit,\n    org: Org,\n    slackClient = new WebClient(org.slackToken),\n  ): Promise<void> => {\n    const cursor = await mongoStores.orgMembers.cursor();\n    cursor.forEach((member) => {\n      scheduleUpdateMember(github, slackClient, member);\n    });\n  };\n\n  const scheduleUpdateAllOrgs = async (\n    auth: (installationId: number) => Promise<Octokit>,\n  ): Promise<void> => {\n    const cursor = await mongoStores.orgs.cursor();\n    cursor.forEach(async (org) => {\n      if (!org.slackToken || !org.installationId) return;\n      const github = await auth(org.installationId);\n      await scheduleUpdateOrg(github, org);\n    });\n  };\n\n  return {\n    scheduleUpdateMember,\n    scheduleUpdateOrg,\n    scheduleUpdateAllOrgs,\n  };\n};\n","/* eslint-disable @typescript-eslint/no-floating-promises */\nimport 'dotenv/config';\nimport { run } from 'probot';\nimport appRouter from './appRouter';\nimport type { AppContext } from './context/AppContext';\nimport initApp from './initApp';\nimport mongoInit from './mongo';\nimport { createSlackHomeWorker } from './slack/home';\n\nif (!process.env.REVIEWFLOW_NAME) process.env.REVIEWFLOW_NAME = 'reviewflow';\n\n// eslint-disable-next-line no-console\nconsole.log({ name: process.env.REVIEWFLOW_NAME });\n\n// const getConfig = require('probot-config')\n// const { MongoClient } = require('mongodb');\n\n// const connect = MongoClient.connect(process.env.MONGO_URL);\n// const db = connect.then(client => client.db(process.env.MONGO_DB));\n\n// let config = await getConfig(context, 'reviewflow.yml');\n\nrun((app, { getRouter }) => {\n  const mongoStores = mongoInit();\n  const slackHome = createSlackHomeWorker(mongoStores);\n  const appContext: AppContext = { mongoStores, slackHome };\n  appRouter(app, getRouter, appContext);\n  initApp(app, appContext);\n  slackHome.scheduleUpdateAllOrgs((id: number) => app.auth(id));\n});\n"],"names":["process","env","GITHUB_CLIENT_ID","Error","GITHUB_CLIENT_SECRET","oauth2","AuthorizationCode","client","id","secret","auth","tokenHost","tokenPath","authorizePath","Layout","lang","title","REVIEWFLOW_NAME","children","React","padding","AUTH_SECRET_KEY","signPromisified","promisify","sign","verifyPromisified","verify","secure","SECURE_COOKIE","createRedirectUri","req","host","hostname","PORT","readAuthCookie","strategy","cookie","cookies","algorithm","audience","headers","getAuthInfoFromCookie","res","authInfo","clearCookie","undefined","createApi","accessToken","Octokit","getUser","redirect","api","router","get","next","redirectUri","githubAuth","authorizeURL","redirect_uri","scope","err","httpOnly","send","renderToStaticMarkup","query","error","error_description","code","getToken","token","access_token","user","users","getAuthenticated","data","login","time","Date","now","expiresIn","home","orgs","listForAuthenticatedUser","display","flexGrow","map","org","config","autoAssignToCreator","trimTitle","requiresReviewRequest","prDefaultOptions","autoMerge","autoMergeWithSkipCi","deleteAfterMerge","parsePR","regExp","createStatusInfo","match","type","summary","groups","dev","christophehurpeau","tilap","waitForGroups","teams","labels","list","name","color","review","ci","inProgress","succeeded","failed","needsReview","requested","changesRequested","approved","ignoreRepoPattern","autoMergeRenovateWithSkipCi","status","prInfo","isPrFromBot","issue","inBody","url","head","bot","idealBranchName","replace","base","botUsers","design","groupsGithubTeams","ops","githubTeamName","logins","backends","frontends","description","duplicate","documentation","rfc","bug","enhancement","question","wontfix","chrisconfig","accountConfigs","ornikar","reviewflow","ExcludesFalsy","Boolean","ExcludesNullish","syncOrg","mongoStores","octokit","installationId","orgInStore","upsertOne","_id","orgEmbed","memberIds","paginate","iterator","listMembers","Promise","all","member","push","orgMembers","deleteMany","$not","$in","syncTeamMembers","team","listMembersInOrg","team_slug","slug","currentIterationMemberIds","filter","partialUpdateMany","memberId","$ne","$push","$pull","syncTeams","teamEmbeds","teamIds","orgTeams","syncTeamsAndTeamMembers","syncUser","github","userInfo","getOrCreateAccount","accountInfo","findByKey","defaultDmSettings","cache","Map","getDefaultDmSettings","accountConfig","defaultConfig","updateCache","userId","newSettings","orgCache","set","getUserDmSettings","orgId","orgDefaultDmSettings","userDmSettingsConfig","userDmSettings","findOne","settings","getKeys","o","Object","keys","emojiRegex","createEmojiRegex","getEmojiFromRepoDescription","startsWith","emoji","exec","voidTeamSlack","mention","postMessage","resolve","updateMessage","deleteMessage","addReaction","updateHome","updateSlackMember","shouldShowLoginMessage","getSlackAccountFromAccount","account","slackToken","slackTeam","slackTeams","slackTeamId","botAccessToken","initTeamSlack","slackHome","context","githubLoginToSlackEmail","reduce","acc","groupName","assign","slackEmails","values","orgSlackClient","WebClient","membersInDb","findAll","members","foundEmailMembers","entries","forEach","email","find","m","slack","im","length","missingEmails","includes","memberEmailToGithubLogin","memberEmailToMemberId","page","profile","partialUpdateByKey","$set","membersMap","has","teamId","getSlackClient","canUseExternalSlack","openConversation","slackClient","conversations","open","channel","log","githubLogin","endsWith","slice","category","toAccount","message","debug","DRY_RUN","result","chat","username","text","blocks","attachments","secondaryBlocks","thread_ts","ts","ok","update","delete","reactions","add","timestamp","scheduleUpdateMember","userLogin","getTeamsAndGroups","some","teamNames","teamName","initAccountContext","appContext","payload","installation","initSlack","slackPromise","githubLoginToGroup","githubTeamNameToGroup","githubLoginToTeams","updateGithubTeamMembers","getReviewerGroups","githubLogins","Set","getGithubTeamsGroups","githubTeamNames","lock","Lock","accountEmbed","callback","reject","logInfos","info","createReleaseCallback","release","getReviewerGroup","getTeamGroup","getTeamsForLogin","getMembersForTeam","cursor","limit","toArray","approveShouldWait","reviewerGroup","pullRequest","includesReviewerGroup","includesWaitForGroups","requested_reviewers","requested_teams","requestedReviewerGroups","request","group","accountContextsPromise","accountContexts","getExistingAccountContext","existingAccountContext","existingPromise","obtainAccountContext","existingAccountContextPromise","promise","then","accountContext","dmMessages","orgSettings","octokitApp","params","authenticatedUserOrgs","orgInDb","apps","getOrgInstallation","catch","orgMember","teamsAndGroups","marginTop","encodeURIComponent","join","width","key","__html","patch","bodyParser","json","body","collection","updateOne","value","updated","$setOnInsert","created","upsert","repository","repos","per_page","repo","owner","permissions","admin","data2","getRepoInstallation","SLACK_CLIENT_ID","SLACK_CLIENT_SECRET","createSlackOAuth2","apiVersion","slackOAuth2","slackOAuth2Version2","parseJSONSafe","string","JSON","parse","slackConnect","Number","orgLogin","state","stringify","slackInstallAppScopes","isInstall","appId","app_id","installerUserId","authed_user","botUserId","bot_user_id","split","insertOne","slackTeamInstallations","partialUpdateOne","identity","team_id","user_id","userSettings","u","getUserInstallation","appRouter","app","getRouter","use","cookieParser","handlerOrgChange","organization","createHandlerOrgChange","membershipChanged","on","orgMemberAddedOrRemoved","teamChanged","checkIfUserIsBot","repoContext","checkIfIsThisBot","areCommitsAllMadeByBots","commits","every","c","author","updateBranch","ref","merge","sha","issues","createComment","issue_number","number","options","optionsRegexps","option","regexp","RegExp","optionsDescriptions","labelKey","icon","parseOptions","content","defaultOptions","parseCommitNotes","commitNotes","trim","parseBody","hasLabelInPR","prLabels","label","l","readPullRequestCommits","pr","pull_request","pulls","listCommits","pull_number","hasFailedStatusOrChecks","checks","listForRef","failedChecks","check_runs","check","conclusion","combinedStatus","getCombinedStatusForRef","failedStatuses","statuses","autoMergeIfPossible","reviewflowPrContext","autoMergeLabel","removePrFromAutomergeQueue","isRenovatePr","createMergeLockPrFromPr","branch","addLog","action","repoFullName","full_name","automergeLogs","isRenovate","mergeableState","mergeable_state","hasNeedsReview","hasRequestedReview","lockedPr","getMergeLockedPr","String","prId","prNumber","lockedPrNumber","pushAutomergeQueue","addMergeLockPr","mergeable","prResult","merged","reschedule","renovateRebaseBody","parsedBody","commentBody","mergeResult","merge_method","commit_title","commit_message","errorMessage","defaultCommentBody","toMarkdownOptions","repoLink","labelsConfig","iconValue","checkboxWithId","labelDescription","labelLink","toMarkdownInfos","infos","getReplacement","updateOptions","optionsToUpdate","internalUpdateBodyOptionsAndInfos","infosAndCommitNotesParagraph","createCommentBody","updateCommentOptions","updatedOptions","updateCommentBodyInfos","updateCommentBodyCommitsNotes","removeDeprecatedReviewflowInPrBody","prBody","createReviewflowComment","pullRequestNumber","getReviewflowCommentById","commentId","getComment","comment_id","getReviewflowPrContext","reviewflowCommentPromise","prEmbed","comment","reviewflowPr","prs","repoEmbed","existing","fetchPr","getLabelsForRepo","listLabelsForRepo","initRepoLabels","finalLabels","labelConfig","labelColor","existingLabel","createLabel","current_name","updateLabel","new_name","shouldIgnoreRepo","repoName","ignoreRepoRegexp","test","createGetReviewLabelIds","shouldIgnore","reviewGroupNames","initRepoContext","fullName","repoEmoji","create","getReviewLabelIds","needsReviewLabelIds","requestedReviewLabelIds","changesRequestedLabelIds","approvedReviewLabelIds","protectedLabelIds","labelIdToGroupName","reviewGroupLabels","lockMergePr","automergeQueue","lockPR","prOrPrIssueId","setTimeout","hasChangesRequestedReview","hasApprovesReview","getNeedsReviewGroupNames","console","reason","shift","previousLength","p","lockPullRequest","repoContextsPromise","repoContexts","obtainRepoContext","existingRepoContext","createRepoHandler","createPullRequestHandler","getPullRequestInPayload","callbackPr","callbackBeforeLock","createPullRequestsHandler","getPrs","checkrunCompleted","check_run","pull_requests","updatedPr","checksuiteCompleted","check_suite","createLink","createPrLink","html_url","createOwnerPart","ownerMention","sendTo","isAssignedTo","assignees","a","createStatus","createCommitStatus","target_url","addStatusCheck","previousSha","hasPrCheck","head_sha","started_at","created_at","completed_at","toISOString","output","updateStatusCheckFromLabels","createFailedStatusCheck","rr","rt","needsReviewGroupNames","updateReviewStatus","reviewGroup","labelsToAdd","remove","labelsToRemove","newLabelNames","toAdd","toAddNames","toDelete","toDeleteNames","getLabelFromKey","reviewConfig","prLabel","size","addLabels","toDeleteName","removeLabel","warn","newLabelNamesArray","oldLabels","setLabels","getReviewersAndReviewStates","userIds","reviewers","reviewStatesByUser","listReviews","reviews","toUpperCase","reviewStates","dismissed","reviewer","getRolesFromPullRequestAndReviewers","assigneeIds","followers","requestedReviewers","isRequestedByName","requestedByTeams","f","closed","isNotFork","git","deleteRef","requestedReviewer","assignee","senderMention","sender","prLink","slackUtils","createMessage","to","ownerPart","follower","createMrkdwnSectionBlock","createSlackMessageWithSecondaryBlock","secondaryBlockText","getPullRequestFromPayload","issueParser","actions","issuePrefixes","parseMentions","mentions","slackifyCommentBody","multipleLines","slackifyMarkdown","getDiscussion","in_reply_to_id","listReviewComments","getMentions","discussion","getUsersInThread","prCommentCreated","saveInDb","results","filtered","slackSentMessages","typeId","sentTo","prUser","pull_request_review_id","commentByOwner","usersInThread","prUrl","commentLink","toOwner","promisesOwner","promisesNotOwner","slackifiedBody","start_line","isBotUser","slackMessage","updatePrCommentBody","newBody","updateComment","updatePrCommentBodyIfNeeded","updatePrCommentBodyOptions","syncLabel","shouldHaveLabel","prHasLabel","onRemove","onAdd","response","calcDefaultOptions","automergeLabel","skipCiLabel","prHasSkipCiLabel","prHasAutoMergeLabel","syncLabelsAfterCommentBodyEdited","prCommentEditedOrDeleted","closed_at","criteria","sentMessages","sentMessage","readCommitsAndUpdateInfos","conventionalCommits","commit","breakingChangesCommits","index","breakingChangesNotes","notes","note","breakingChangesLabel","newCommentBody","cleanNewLines","checkIfHasDiff","text1","text2","updatePrIfNeeded","hasDiffInTitle","hasDiffInBody","diff","cleanTitle","s","arg1","arg2","toLowerCase","editOpenedPR","shouldUpdateCommentBodyInfos","parsePRValue","errorStatus","parsePRKey","rules","rule","date","hasLintPrCheck","promises","commentBodyInfos","REVIEWFLOW_APP_URL","shouldCreateCommentBody","edited","updatedPullRequest","isFromRenovate","labelsChanged","fromRenovate","codeApprovedLabel","codeNeedsReviewLabel","autoMergeSkipCiLabel","createReview","event","updateBranchLabel","autoApproveAndAutoMerge","autoAssignPRToCreator","addAssignees","opened","reopened","reviewDismissed","hasChangesRequestedInReviews","hasApprovals","hasRequestedReviewsForGroup","reviewRequestRemoved","requested_reviewer","requestedTeam","requested_team","hasApprovedInReviews","assigneesLogins","potentialReviewer","sentMessageRequestedReview","deleteOne","reviewRequested","getEmojiFromState","reviewSubmitted","reviewUrl","isReviewByOwner","filteredFollowers","newLabels","isSameBranch","branches","b","synchronize","before","repoEdited","initApp","openedHandler","editedHandler","closedHandler","reopenedHandler","reviewRequestedHandler","reviewRequestRemovedHandler","reviewSubmittedHandler","reviewDismissedHandler","synchronizeHandler","commentCreated","commentEditedOrDeleted","MONGO_DB","init","MONGO_HOST","MONGO_PORT","MONGO_USER","MONGO_PASSWORD","connection","MongoConnection","MongoStore","coll","createIndex","unique","$lt","createSlackHomeWorker","updateMember","prsWithRequestedReviews","prsToMerge","prsWithRequestedChanges","prsInDraft","search","issuesAndPullRequests","q","sort","order","buildBlocks","total_count","items","flatMap","repository_url","prFullName","elements","draft","image_url","avatar_url","alt_text","views","publish","view","workerInterval","queueKeys","queue","stop","clearInterval","start","setInterval","item","scheduleUpdateOrg","scheduleUpdateAllOrgs","run","mongoInit"],"mappings":"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"}