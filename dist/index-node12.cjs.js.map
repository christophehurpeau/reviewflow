{"version":3,"file":"index-node12.cjs.js","sources":["../src/auth/github.ts","../src/views/Layout.tsx","../src/app/auth.tsx","../src/app/home.tsx","../src/accountConfigs/christophehurpeau.ts","../src/accountConfigs/defaultConfig.ts","../src/accountConfigs/ornikar.ts","../src/accountConfigs/reviewflow.ts","../src/accountConfigs/index.ts","../src/dm/defaultDmSettings.ts","../src/dm/getUserDmSettings.ts","../src/events/account-handlers/actions/syncOrg.ts","../src/utils/Excludes.ts","../src/events/account-handlers/actions/syncTeamMembers.ts","../src/events/account-handlers/actions/syncTeams.ts","../src/app/org-settings.tsx","../src/app/repository.tsx","../src/events/account-handlers/actions/syncUser.ts","../src/app/user-settings.tsx","../src/appRouter.tsx","../src/context/getOrCreateAccount.ts","../src/context/utils.ts","../src/context/voidTeamSlack.ts","../src/context/initTeamSlack.ts","../src/context/accountContext.ts","../src/events/account-handlers/utils/handler.ts","../src/events/pr-handlers/utils/isBotUser.ts","../src/events/pr-handlers/actions/updateBranch.ts","../src/events/pr-handlers/actions/utils/body/prOptions.ts","../src/events/pr-handlers/actions/utils/body/parseBody.ts","../src/events/pr-handlers/actions/utils/hasLabelInPR.ts","../src/events/pr-handlers/actions/utils/readPullRequestCommits.ts","../src/events/pr-handlers/actions/autoMergeIfPossible.ts","../src/events/pr-handlers/actions/utils/body/updateBody.ts","../src/events/pr-handlers/utils/reviewflowComment.ts","../src/events/pr-handlers/utils/createPullRequestContext.ts","../src/events/pr-handlers/utils/fetchPr.ts","../src/context/initRepoLabels.ts","../src/context/repoContext.ts","../src/events/repository-handlers/utils/createRepoHandler.ts","../src/events/pr-handlers/utils/createPullRequestHandler.ts","../src/events/pr-handlers/checkrunCompleted.ts","../src/events/pr-handlers/checksuiteCompleted.ts","../src/slack/utils.ts","../src/events/pr-handlers/actions/utils/createStatus.ts","../src/events/pr-handlers/actions/updateStatusCheckFromLabels.ts","../src/events/pr-handlers/actions/updateReviewStatus.ts","../src/events/pr-handlers/utils/getReviewersAndReviewStates.ts","../src/events/pr-handlers/utils/getRolesFromPullRequestAndReviewers.ts","../src/events/pr-handlers/closed.ts","../src/events/pr-handlers/utils/createSlackMessageWithSecondaryBlock.ts","../src/events/pr-handlers/utils/getPullRequestFromPayload.ts","../src/events/pr-handlers/utils/parseMentions.ts","../src/events/pr-handlers/utils/slackifyCommentBody.ts","../src/events/pr-handlers/commentCreated.ts","../src/events/pr-handlers/actions/updatePrCommentBody.ts","../src/events/pr-handlers/actions/utils/syncLabel.ts","../src/events/pr-handlers/actions/syncLabelsAfterCommentBodyEdited.ts","../src/events/pr-handlers/commentEditedOrDeleted.ts","../src/events/pr-handlers/actions/readCommitsAndUpdateInfos.ts","../src/events/pr-handlers/actions/updatePr.ts","../src/events/pr-handlers/actions/utils/cleanTitle.ts","../src/events/pr-handlers/actions/editOpenedPR.ts","../src/events/pr-handlers/edited.ts","../src/events/pr-handlers/labelsChanged.ts","../src/events/pr-handlers/actions/autoApproveAndAutoMerge.ts","../src/events/pr-handlers/actions/autoAssignPRToCreator.ts","../src/events/pr-handlers/opened.ts","../src/events/pr-handlers/reopened.ts","../src/events/pr-handlers/reviewDismissed.ts","../src/events/pr-handlers/reviewRequestRemoved.ts","../src/events/pr-handlers/reviewRequested.ts","../src/events/pr-handlers/reviewSubmitted.ts","../src/events/pr-handlers/status.ts","../src/events/pr-handlers/synchronize.ts","../src/events/repository-handlers/repoEdited.ts","../src/initApp.ts","../src/mongo.ts","../src/slack/home.ts","../src/index.ts"],"sourcesContent":["import { create } from 'simple-oauth2';\n\nif (!process.env.GITHUB_CLIENT_ID) {\n  throw new Error('Missing env variable: GITHUB_CLIENT_ID');\n}\n\nif (!process.env.GITHUB_CLIENT_SECRET) {\n  throw new Error('Missing env variable: GITHUB_CLIENT_SECRET');\n}\n\nexport const oauth2 = create({\n  client: {\n    id: process.env.GITHUB_CLIENT_ID,\n    secret: process.env.GITHUB_CLIENT_SECRET,\n  },\n  auth: {\n    tokenHost: 'https://github.com',\n    tokenPath: '/login/oauth/access_token',\n    authorizePath: '/login/oauth/authorize',\n  },\n});\n","import type { ReactElement, ReactNode } from 'react';\nimport React from 'react';\n\ninterface LayoutProps {\n  lang?: string;\n  title?: string;\n  children: ReactNode;\n}\n\nexport default function Layout({\n  lang = 'en',\n  title = process.env.REVIEWFLOW_NAME,\n  children,\n}: LayoutProps): ReactElement {\n  return (\n    <html lang={lang}>\n      <head>\n        <meta charSet=\"UTF-8\" />\n        <meta name=\"robots\" content=\"noindex\" />\n        <title>{title}</title>\n        <link\n          rel=\"stylesheet\"\n          type=\"text/css\"\n          href=\"https://christophe.hurpeau.com/index.css\"\n        />\n        <style>{`html,body,html body\n            #container{height:100%} footer{position:absolute;bottom:5px;left:0;right:0;}`}</style>\n      </head>\n      <body>\n        <div style={{ padding: '24px 48px' }}>{children}</div>\n      </body>\n    </html>\n  );\n}\n","import { promisify } from 'util';\nimport { Octokit } from '@octokit/rest';\nimport type { Router, Request, Response } from 'express';\nimport { sign, verify } from 'jsonwebtoken';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport * as githubAuth from '../auth/github';\nimport Layout from '../views/Layout';\n\nif (!process.env.AUTH_SECRET_KEY) {\n  throw new Error('Missing env variable: AUTH_SECRET_KEY');\n}\n\nconst AUTH_SECRET_KEY: string = process.env.AUTH_SECRET_KEY;\n\nconst signPromisified: any = promisify(sign);\nconst verifyPromisified: any = promisify(verify);\n\nconst secure =\n  !!process.env.SECURE_COOKIE && process.env.SECURE_COOKIE !== 'false';\n\nconst createRedirectUri = (req: Request): string => {\n  const host = `http${secure ? 's' : ''}://${req.hostname}${\n    req.hostname === 'localhost' ? `:${process.env.PORT || 3000}` : ''\n  }`;\n  return `${host}/app/login-response`;\n};\n\ninterface AuthInfo {\n  id: number;\n  login: string;\n  accessToken: string;\n  time: number;\n}\n\nconst readAuthCookie = (\n  req: Request,\n  strategy: string,\n): undefined | Promise<undefined | AuthInfo> => {\n  const cookie = req.cookies[`auth_${strategy}`];\n  if (!cookie) return;\n\n  return verifyPromisified(cookie, AUTH_SECRET_KEY, {\n    algorithm: 'HS512',\n    audience: req.headers['user-agent'],\n  });\n};\n\nconst getAuthInfoFromCookie = async (\n  req: Request,\n  res: Response,\n): Promise<undefined | AuthInfo> => {\n  const strategy = 'gh'; // req.params.strategy\n  try {\n    const authInfo = await readAuthCookie(req, strategy);\n\n    if (authInfo?.id) {\n      return authInfo;\n    }\n  } catch {}\n\n  res.clearCookie(`auth_${strategy}`);\n  return undefined;\n};\n\nfunction createApi(accessToken: string): Octokit {\n  return new Octokit({ auth: accessToken });\n}\n\nexport const getUser = async (\n  req: Request,\n  res: Response,\n): Promise<{\n  authInfo: AuthInfo;\n  api: Octokit;\n} | null> => {\n  const authInfo = await getAuthInfoFromCookie(req, res);\n  if (!authInfo) {\n    res.redirect('/app/login');\n    return null;\n  }\n\n  const api = createApi(authInfo.accessToken);\n\n  return {\n    authInfo,\n    api,\n  };\n};\n\nexport default function auth(router: Router): void {\n  router.get(\n    '/login',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req: Request, res: Response) => {\n      if (await getAuthInfoFromCookie(req, res)) {\n        res.redirect('/app');\n        return;\n      }\n\n      // const state = await randomHex(8);\n      // res.cookie(`auth_${strategy}_${state}`, strategy, {\n      //   maxAge: 10 * 60 * 1000,\n      //   httpOnly: true,\n      //   secure,\n      // });\n\n      const redirectUri = githubAuth.oauth2.authorizationCode.authorizeURL({\n        redirect_uri: createRedirectUri(req),\n        scope: 'read:user,repo',\n        // state,\n        // grant_type: options.grantType,\n        // access_type: options.accessType,\n        // login_hint: req.query.loginHint,\n        // include_granted_scopes: options.includeGrantedScopes,\n      });\n\n      // console.log(redirectUri);\n\n      res.redirect(redirectUri);\n    },\n  );\n\n  router.get(\n    '/login-response',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res) => {\n      if (req.query.error) {\n        res.send(req.query.error_description);\n        return;\n      }\n\n      const strategy = 'gh';\n      const code: string = req.query.code as string;\n      // const state = req.query.state;\n      // const cookieName = `auth_${strategy}_${state}`;\n      // const cookie = req.cookies && req.cookies[cookieName];\n      // if (!cookie) {\n      //   // res.redirect(`/${strategy}/login`);\n      //   res.send(\n      //     '<html><body>No cookie for this state. <a href=\"/app/login\">Retry ?</a></body></html>',\n      //   );\n      //   return;\n      // }\n      // res.clearCookie(cookieName);\n\n      const result = await githubAuth.oauth2.authorizationCode.getToken({\n        code,\n        redirect_uri: createRedirectUri(req),\n      });\n\n      if (!result) {\n        res.send(\n          renderToStaticMarkup(\n            <Layout>\n              <div>\n                Could not get access token. <a href=\"/app/login\">Retry ?</a>\n              </div>\n            </Layout>,\n          ),\n        );\n        return;\n      }\n\n      const accessToken = result.access_token;\n      const api = createApi(accessToken);\n      const user = await api.users.getAuthenticated({});\n      const id = user.data.id;\n      const login = user.data.login;\n\n      const authInfo: AuthInfo = { id, login, accessToken, time: Date.now() };\n      const token = await signPromisified(authInfo, AUTH_SECRET_KEY, {\n        algorithm: 'HS512',\n        audience: req.headers['user-agent'],\n        expiresIn: '10 days',\n      });\n\n      res.cookie(`auth_${strategy}`, token, {\n        httpOnly: true,\n        secure,\n      });\n\n      res.redirect('/app');\n    },\n  );\n}\n","import type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function home(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n  mongoStores: MongoStores,\n): void {\n  router.get(\n    '/',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res) => {\n      const user = await getUser(req, res);\n      if (!user) return;\n\n      const orgs = await user.api.orgs.listForAuthenticatedUser();\n\n      res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              <h1>{process.env.REVIEWFLOW_NAME}</h1>\n              <div style={{ display: 'flex' }}>\n                <div style={{ flexGrow: 1 }}>\n                  <h4>Choose your account</h4>\n                  <ul>\n                    <li>\n                      <a href=\"/app/user\">{user.authInfo.login}</a>\n                    </li>\n                    {orgs.data.map((org) => (\n                      <li key={org.id}>\n                        <a href={`/app/org/${org.login}`}>{org.login}</a>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </Layout>,\n        ),\n      );\n    },\n  );\n}\n","import type { Config } from './types';\n\nconst config: Config<'dev', never> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  requiresReviewRequest: false,\n  prDefaultOptions: {\n    autoMerge: false,\n    autoMergeWithSkipCi: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [\n      {\n        regExp:\n          // eslint-disable-next-line unicorn/no-unsafe-regex\n          /^(?<revert>revert: )?(?<type>build|chore|ci|docs|feat|fix|perf|refactor|style|test)(?<scope>\\([/a-z-]+\\)?((?=:\\s)|(?=!:\\s)))?(?<breaking>!)?(?<subject>:\\s.*)$/,\n        createStatusInfo: (match) => {\n          if (match) {\n            return null;\n          }\n\n          return {\n            type: 'failure',\n            title: 'Title does not match commitlint conventional',\n            summary:\n              'https://www.npmjs.com/package/@commitlint/config-conventional',\n          };\n        },\n      },\n    ],\n  },\n  groups: {\n    dev: {\n      christophehurpeau: 'christophe@hurpeau.com',\n      tilap: 'jlavinh@gmail.com',\n    },\n  },\n  waitForGroups: {\n    dev: [],\n  },\n  teams: {},\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* code */\n      'code/needs-review': {\n        name: ':ok_hand: code/needs-review',\n        color: '#FFD57F',\n      },\n      'code/review-requested': {\n        name: ':ok_hand: code/review-requested',\n        color: '#B2E1FF',\n      },\n      'code/changes-requested': {\n        name: ':ok_hand: code/changes-requested',\n        color: '#e11d21',\n      },\n      'code/approved': {\n        name: ':ok_hand: code/approved',\n        color: '#64DD17',\n      },\n\n      /* auto merge */\n      'merge/automerge': {\n        name: ':vertical_traffic_light: automerge',\n        color: '#64DD17',\n      },\n      'merge/skip-ci': {\n        name: ':vertical_traffic_light: skip-ci',\n        color: '#e1e8ed',\n      },\n      'merge/update-branch': {\n        name: ':arrows_counterclockwise: update branch',\n        color: '#64DD17',\n      },\n\n      /* feature-branch */\n      'feature-branch': {\n        name: 'feature-branch',\n        color: '#7FCEFF',\n      },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        color: '#ef7934',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n      dev: {\n        needsReview: 'code/needs-review',\n        requested: 'code/review-requested',\n        changesRequested: 'code/changes-requested',\n        approved: 'code/approved',\n      },\n    },\n  },\n};\n\nexport default config;\n","import type { Config } from './types';\n\nconst config: Config<never, never> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  requiresReviewRequest: false,\n  prDefaultOptions: {\n    autoMerge: false,\n    autoMergeWithSkipCi: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [],\n  },\n  groups: {},\n  waitForGroups: {},\n  teams: {},\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        color: '#ef7934',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n    },\n  },\n};\n\nexport default config;\n","/* eslint-disable max-lines */\nimport type { Config } from './types';\n\nconst config: Config<'dev' | 'design', 'ops' | 'frontends' | 'backends'> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  ignoreRepoPattern: '(infra-.*|devenv)',\n  requiresReviewRequest: true,\n  autoMergeRenovateWithSkipCi: false,\n  prDefaultOptions: {\n    autoMergeWithSkipCi: false,\n    autoMerge: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [\n      {\n        // eslint-disable-next-line unicorn/no-unsafe-regex\n        regExp: /^(?<revert>revert: )?(?<type>build|chore|ci|docs|feat|fix|perf|refactor|style|test)(?<scope>\\([/A-Za-z-]+\\)?((?=:\\s)|(?=!:\\s)))?(?<breaking>!)?(?<subject>:\\s.*)$/,\n        createStatusInfo: (match) => {\n          if (match) {\n            return null;\n          }\n\n          return {\n            type: 'failure',\n            title: 'Title does not match commitlint conventional',\n            summary:\n              'https://www.npmjs.com/package/@commitlint/config-conventional',\n          };\n        },\n      },\n      {\n        regExp: /\\s([A-Z][\\dA-Z]+-(\\d+)|\\[no issue])$/,\n        status: 'jira-issue',\n        createStatusInfo: (match, prInfo, isPrFromBot) => {\n          if (match) {\n            const issue = match[1];\n            if (issue === '[no issue]') {\n              return {\n                type: 'success',\n                title: '✓ No issue',\n                summary: '',\n              };\n            }\n            return {\n              type: 'success',\n              inBody: true,\n              title: `✓ JIRA issue: ${issue}`,\n              summary: `[${issue}](https://ornikar.atlassian.net/browse/${issue})`,\n              url: `https://ornikar.atlassian.net/browse/${issue}`,\n            };\n          }\n\n          if (isPrFromBot) {\n            return {\n              type: 'success',\n              title: 'Title does not have Jira issue but PR created by bot',\n              summary: '',\n            };\n          }\n\n          return {\n            type: 'failure',\n            title: 'Title does not have Jira issue',\n            summary: 'The PR title should end with ONK-0000, or [no issue]',\n          };\n        },\n      },\n    ],\n    head: [\n      {\n        bot: false,\n        // eslint-disable-next-line unicorn/no-unsafe-regex\n        regExp: /^(?<revert>revert-\\d+-)?(?<type>build|chore|ci|docs|feat|fix|perf|refactor|style|test)(?<scope>\\/[a-z-]+)?\\/(?<breaking>!)?(?<subject>.*)(?:-(?<jiraIssue>[A-Z][\\dA-Z]+-(\\d+)))?$/,\n        status: 'branch-name',\n        createStatusInfo: (match, { title }) => {\n          const idealBranchName = title\n            .replace(/\\s*\\[no issue]$/, '')\n            .replace(/\\s*(\\(|\\):|:)\\s*/g, '/')\n            .replace(/[\\s,_-]+/g, '-');\n\n          if (!match) {\n            return {\n              type: 'failure',\n              title: `Suggested branch name: \"${idealBranchName}\"`,\n              summary: '',\n            };\n          }\n\n          if (match[0] === idealBranchName) {\n            return {\n              type: 'success',\n              title: '✓ The branch name matches PR title',\n              summary: '',\n            };\n          }\n\n          return {\n            type: 'success',\n            title: '✓ The branch name is valid',\n            summary: '',\n          };\n        },\n      },\n    ],\n    base: [\n      {\n        regExp: /^(master|main)$/,\n        createStatusInfo: (match) => {\n          if (match) {\n            return null;\n          }\n\n          return {\n            type: 'failure',\n            title: 'PR to branches other than main is not recommended',\n            summary: '',\n            url:\n              'https://ornikar.atlassian.net/wiki/spaces/TECH/pages/2221900272/Should+I+make+a+feature-branch+or+not',\n          };\n        },\n      },\n    ],\n  },\n\n  botUsers: ['michael-robot'],\n\n  groups: {\n    dev: {\n      /* ops */\n      JulienBreux: `julien.breux${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      TheR3aLp3nGuinJM: `jean-michel${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      AymenBac: `aymen${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n\n      /* back */\n      abarreir: `alexandre${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      damienorny: `damien.orny${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      'Thierry-girod': `thierry${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      darame07: `kevin${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      Pixy: `pierre-alexis${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      machartier: `marie-anne${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      camillebaronnet: `camille.baronnet${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      'olivier-martinez': `olivier.martinez${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n\n      /* front */\n      christophehurpeau: `christophe${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      HugoGarrido: `hugo${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      CorentinAndre: `corentin${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      Mxime: `maxime${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      vlbr: `valerian${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      'budet-b': `benjamin.budet${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      mdcarter: `maxime.dehaye${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      ChibiBlasphem: `christopher${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      PSniezak: `paul.sniezak${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      GaelFerrand: 'gael.ferrand@othrys.dev',\n      aenario: `romain.foucault${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n    },\n\n    design: {\n      jperriere: `julien${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      CoralineColasse: `coraline${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      Lenamari: `lena${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      loicleser: `loic.leser${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      carlbouville: `carl.bouville${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n    },\n  },\n\n  groupsGithubTeams: {\n    dev: ['ops', 'backend', 'frontend', 'frontend-architects'],\n    design: ['design'],\n  },\n\n  teams: {\n    ops: {\n      githubTeamName: 'ops',\n      logins: ['JulienBreux', 'TheR3aLp3nGuinJM', 'AymenBac'],\n      labels: ['teams/ops'],\n    },\n\n    backends: {\n      githubTeamName: 'backend',\n      logins: [\n        'abarreir',\n        'arthurflachs',\n        'damienorny',\n        'Thierry-girod',\n        'darame07',\n        'Pixy',\n        'machartier',\n        'camillebaronnet',\n        'olivier-martinez',\n      ],\n      labels: ['teams/backend'],\n    },\n\n    frontends: {\n      githubTeamName: 'frontend',\n      logins: [\n        'christophehurpeau',\n        'HugoGarrido',\n        'LentnerStefan',\n        'CorentinAndre',\n        'Mxime',\n        'vlbr',\n        'budet-b',\n        'mdcarter',\n        'ChibiBlasphem',\n        'PSniezak',\n        'aenario',\n      ],\n      labels: ['teams/frontend'],\n    },\n  },\n\n  waitForGroups: {\n    dev: [],\n    design: ['dev'],\n  },\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* code */\n      'code/needs-review': {\n        name: ':ok_hand: code/needs-review',\n        color: '#FFC44C',\n      },\n      'code/review-requested': {\n        name: ':ok_hand: code/review-requested',\n        color: '#DAE1E6',\n      },\n      'code/changes-requested': {\n        name: ':ok_hand: code/changes-requested',\n        color: '#e11d21',\n      },\n      'code/approved': {\n        name: ':ok_hand: code/approved',\n        color: '#64DD17',\n      },\n\n      /* design */\n      'design/needs-review': {\n        name: ':art: design/needs-review',\n        color: '#FFC44C',\n      },\n      'design/review-requested': {\n        name: ':art: design/review-requested',\n        color: '#DAE1E6',\n      },\n      'design/changes-requested': {\n        name: ':art: design/changes-requested',\n        color: '#e11d21',\n      },\n      'design/approved': {\n        name: ':art: design/approved',\n        color: '#64DD17',\n      },\n\n      /* teams */\n      'teams/ops': {\n        name: 'ops',\n        color: '#003b55',\n      },\n      'teams/backend': {\n        name: 'backend',\n        color: '#6ad8cb',\n      },\n      'teams/frontend': {\n        name: 'frontend',\n        color: '#8a5abc',\n      },\n\n      /* auto merge */\n      'merge/automerge': {\n        name: ':soon: automerge',\n        color: '#64DD17',\n      },\n      'merge/skip-ci': {\n        name: ':vertical_traffic_light: skip-ci',\n        color: '#e1e8ed',\n      },\n      'merge/update-branch': {\n        name: ':arrows_counterclockwise: update branch',\n        color: '#e1e8ed',\n      },\n\n      /* feature-branch */\n      'feature-branch': {\n        name: 'feature-branch',\n        color: '#7FCEFF',\n      },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        description: 'This issue or pull request will need a new major version',\n        color: '#FF6F00',\n      },\n      duplicate: {\n        name: 'duplicate',\n        description: 'This issue or pull request already exists',\n        color: '#ECEFF1',\n      },\n      documentation: {\n        name: 'documentation',\n        description: 'Improvements or additions to documentation',\n        color: '#7FCEFF',\n      },\n      rfc: {\n        name: 'RFC',\n        description: 'Request For Comments',\n        color: '#FFD3B2',\n      },\n      bug: {\n        name: 'bug',\n        description: \"Something isn't working\",\n        color: '#FF3D00',\n      },\n      enhancement: {\n        name: 'enhancement',\n        description: 'New feature or request',\n        color: '#7FCEFF',\n      },\n      'help-wanted': {\n        name: 'help wanted',\n        description: 'Extra attention is needed',\n        color: '#B1EE8B',\n      },\n      question: {\n        name: 'question',\n        description: 'Further information is requested',\n        color: '#F860A4',\n      },\n      wontfix: {\n        name: 'wontfix',\n        description: 'This will not be worked on',\n        color: '#ECEFF1',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n      dev: {\n        needsReview: 'code/needs-review',\n        requested: 'code/review-requested',\n        changesRequested: 'code/changes-requested',\n        approved: 'code/approved',\n      },\n      design: {\n        needsReview: 'design/needs-review',\n        requested: 'design/review-requested',\n        changesRequested: 'design/changes-requested',\n        approved: 'design/approved',\n      },\n    },\n  },\n};\n\nexport default config;\n","import chrisconfig from './christophehurpeau';\n// import ornikarconfig from './ornikar';\nimport type { Config } from './types';\n\nconst config: Config<'dev', never> = {\n  ...chrisconfig,\n  requiresReviewRequest: true,\n  groups: {\n    dev: {\n      christophehurpeau: 'christophe@hurpeau.com',\n      'chris-reviewflow': 'christophe.hurpeau+reviewflow@gmail.com',\n    },\n  },\n  // parsePR: ornikarconfig.parsePR,\n};\nexport default config;\n","import christophehurpeau from './christophehurpeau';\nimport defaultConfig from './defaultConfig';\nimport ornikar from './ornikar';\nimport reviewflow from './reviewflow';\nimport type { Config as ConfigType } from './types';\n\nexport type Config<\n  GroupNames extends string = any,\n  TeamNames extends string = any\n> = ConfigType<GroupNames, TeamNames>;\n\nexport const accountConfigs: Record<string, Config> = {\n  ornikar,\n  christophehurpeau,\n  reviewflow,\n};\n\nexport { defaultConfig };\n\n// flat requires node 11\n// export const getMembers = <GroupNames extends string = any>(\n//   groups: Record<GroupNames, Group>,\n// ): string[] => {\n//   return Object.values(groups).flat(1);\n// };\n","import type { MessageCategory } from './MessageCategory';\n\nexport const defaultDmSettings: Record<MessageCategory, boolean> = {\n  'pr-lifecycle': true,\n  'pr-lifecycle-follow': true,\n  'pr-review': true,\n  'pr-review-follow': true,\n  'pr-comment': true,\n  'pr-comment-bots': true,\n  'pr-comment-follow': true,\n  'pr-comment-follow-bots': false,\n  'pr-comment-mention': true,\n  'pr-comment-thread': true,\n  'pr-merge-conflicts': true,\n  'issue-comment-mention': true,\n};\n","import { accountConfigs, defaultConfig } from '../accountConfigs';\nimport type { MongoStores } from '../mongo';\nimport type { MessageCategory } from './MessageCategory';\nimport { defaultDmSettings } from './defaultDmSettings';\n\nexport type UserDmSettings = Record<MessageCategory, boolean>;\nconst cache = new Map<string, Map<number, UserDmSettings>>();\n\nconst getDefaultDmSettings = (org: string): UserDmSettings => {\n  const accountConfig = accountConfigs[org] || defaultConfig;\n  return accountConfig.defaultDmSettings\n    ? { ...defaultDmSettings, ...accountConfig.defaultDmSettings }\n    : defaultDmSettings;\n};\n\nexport const updateCache = (\n  org: string,\n  userId: number,\n  newSettings: Partial<UserDmSettings>,\n): void => {\n  let orgCache = cache.get(org);\n  if (!orgCache) {\n    orgCache = new Map();\n    cache.set(org, orgCache);\n  }\n  orgCache.set(userId, { ...getDefaultDmSettings(org), ...newSettings });\n};\n\nexport const getUserDmSettings = async (\n  mongoStores: MongoStores,\n  org: string,\n  orgId: number,\n  userId: number,\n): Promise<UserDmSettings> => {\n  const orgDefaultDmSettings = getDefaultDmSettings(org);\n\n  const userDmSettingsConfig = await mongoStores.userDmSettings.findOne({\n    orgId,\n    userId,\n  });\n\n  const config = userDmSettingsConfig\n    ? {\n        ...orgDefaultDmSettings,\n        ...userDmSettingsConfig.settings,\n      }\n    : orgDefaultDmSettings;\n\n  updateCache(org, userId, config);\n  return config;\n};\n","import type { MongoStores, Org } from '../../../mongo';\nimport type { Octokit } from '../../../octokit';\n\ninterface OrgInfo {\n  login: string;\n  id: number;\n}\n\nexport const syncOrg = async <T extends Octokit>(\n  mongoStores: MongoStores,\n  octokit: T,\n  installationId: number,\n  org: OrgInfo,\n): Promise<Org> => {\n  const orgInStore = await mongoStores.orgs.upsertOne({\n    _id: org.id,\n    login: org.login,\n    installationId,\n  });\n\n  const orgEmbed = { id: org.id, login: org.login };\n\n  const memberIds: number[] = [];\n\n  for await (const { data } of octokit.paginate.iterator(\n    octokit.orgs.listMembers,\n    { org: org.login },\n  )) {\n    await Promise.all(\n      data.map(async (member) => {\n        if (!member) return;\n        memberIds.push(member.id);\n        return Promise.all([\n          mongoStores.orgMembers.upsertOne<'teams'>(\n            {\n              _id: `${org.id}_${member.id}`,\n              org: orgEmbed,\n              user: {\n                id: member.id,\n                login: member.login,\n              },\n            },\n            {\n              teams: [], // teams is synced in syncTeamMembers\n            },\n          ),\n          mongoStores.users.upsertOne({\n            _id: member.id,\n            login: member.login,\n            type: member.type,\n          }),\n        ]);\n      }),\n    );\n  }\n\n  await mongoStores.orgMembers.deleteMany({\n    'org.id': org.id,\n    'user.id': { $not: { $in: memberIds } },\n  });\n\n  return orgInStore;\n};\n","export const ExcludesFalsy = (Boolean as any) as <T>(\n  x: T | false | null | undefined,\n) => x is T;\n\nexport const ExcludesNullish = (((res: any) => res !== null) as any) as <T>(\n  x: T | null,\n) => x is T;\n","import type { MongoStores, OrgTeamEmbed } from '../../../mongo';\nimport type { Octokit } from '../../../octokit';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\n\nexport const syncTeamMembers = async (\n  mongoStores: MongoStores,\n  octokit: Octokit,\n  org: { login: string; id: number },\n  team: OrgTeamEmbed,\n): Promise<void> => {\n  const memberIds: number[] = [];\n  for await (const { data } of octokit.paginate.iterator(\n    octokit.teams.listMembersInOrg,\n    {\n      org: org.login,\n      team_slug: team.slug,\n    },\n  )) {\n    const currentIterationMemberIds = data\n      .filter(ExcludesFalsy)\n      .map((member) => member.id);\n    memberIds.push(...currentIterationMemberIds);\n\n    await mongoStores.orgMembers.partialUpdateMany(\n      {\n        _id: {\n          $in: currentIterationMemberIds.map(\n            (memberId) => `${org.id}_${memberId}`,\n          ),\n        },\n        'org.id': org.id,\n        'teams.id': { $ne: team.id },\n      },\n      { $push: { teams: team } },\n    );\n  }\n\n  await mongoStores.orgMembers.partialUpdateMany(\n    {\n      'org.id': org.id,\n      'user.id': { $not: { $in: memberIds } },\n    },\n    { $pull: { teams: { id: team.id } } },\n  );\n};\n\nexport const syncTeamMembersWithTeamParents = async (\n  mongoStores: MongoStores,\n  octokit: Octokit,\n  org: { login: string; id: number },\n  team: OrgTeamEmbed,\n): Promise<void> => {};\n","import type { MongoStores, OrgTeamEmbed } from '../../../mongo';\nimport type { Octokit } from '../../../octokit';\nimport { syncTeamMembers } from './syncTeamMembers';\n\nexport const syncTeams = async (\n  mongoStores: MongoStores,\n  octokit: Octokit,\n  org: { login: string; id: number },\n): Promise<OrgTeamEmbed[]> => {\n  const orgEmbed = { id: org.id, login: org.login };\n\n  const teamEmbeds: OrgTeamEmbed[] = [];\n  const teamIds: number[] = [];\n\n  for await (const { data } of octokit.paginate.iterator(octokit.teams.list, {\n    org: org.login,\n  })) {\n    await Promise.all(\n      data.map(async (team) => {\n        teamIds.push(team.id);\n        teamEmbeds.push({\n          id: team.id,\n          name: team.name,\n          slug: team.slug,\n        });\n        return mongoStores.orgTeams.upsertOne({\n          _id: team.id,\n          org: orgEmbed,\n          name: team.name,\n          slug: team.slug,\n          description: team.description,\n        });\n      }),\n    );\n  }\n\n  await Promise.all([\n    mongoStores.orgTeams.deleteMany({\n      'org.id': org.id,\n      _id: { $not: { $in: teamIds } },\n    }),\n\n    mongoStores.orgMembers.partialUpdateMany(\n      {\n        'org.id': org.id,\n      },\n      { $pull: { teams: { id: { $not: { $in: teamIds } } } } },\n    ),\n  ]);\n\n  return teamEmbeds;\n};\n\nexport const syncTeamsAndTeamMembers = async (\n  mongoStores: MongoStores,\n  octokit: Octokit,\n  org: { login: string; id: number },\n): Promise<void> => {\n  const teams = await syncTeams(mongoStores, octokit, org);\n  for (const team of teams) {\n    await syncTeamMembers(mongoStores, octokit, org, team);\n  }\n};\n","import bodyParser from 'body-parser';\nimport type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { accountConfigs } from '../accountConfigs';\nimport type { MessageCategory } from '../dm/MessageCategory';\nimport { getUserDmSettings, updateCache } from '../dm/getUserDmSettings';\nimport { syncOrg } from '../events/account-handlers/actions/syncOrg';\nimport { syncTeamsAndTeamMembers } from '../events/account-handlers/actions/syncTeams';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nconst dmMessages: Record<MessageCategory, string> = {\n  'pr-lifecycle': 'Your PR is closed, merged, reopened',\n  'pr-lifecycle-follow':\n    \"Someone closed, merged, reopened a PR you're reviewing\",\n  'pr-review': 'You are assigned to a review, someone reviewed your PR',\n  'pr-review-follow': \"Someone reviewed a PR you're also reviewing\",\n  'pr-comment': 'Someone commented on your PR',\n  'pr-comment-bots': 'A bot commented on your PR',\n  'pr-comment-follow': \"Someone commented on a PR you're reviewing\",\n  'pr-comment-follow-bots': \"A bot commented on a PR you're reviewing\",\n  'pr-comment-mention': 'Someone mentioned you in a PR',\n  'pr-comment-thread': \"Someone replied to a discussion you're in\",\n  'pr-merge-conflicts': 'Your PR has a merge conflict (not implemented)',\n  'issue-comment-mention':\n    'Someone mentioned you in an issue (not implemented)',\n};\n\nexport default function orgSettings(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n  mongoStores: MongoStores,\n): void {\n  router.get(\n    '/org/:org/force-sync',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res) => {\n      const user = await getUser(req, res);\n      if (!user) return;\n\n      const orgs = await user.api.orgs.listForAuthenticatedUser();\n      const org = orgs.data.find((o) => o.login === req.params.org);\n      if (!org) {\n        res.redirect('/app');\n        return;\n      }\n\n      const o = await mongoStores.orgs.findByKey(org.id);\n      if (!o) {\n        res.redirect('/app');\n        return;\n      }\n\n      await syncOrg(mongoStores, user.api, o.installationId!, org);\n      await syncTeamsAndTeamMembers(mongoStores, user.api, org);\n\n      res.redirect(`/app/org/${req.params.org}`);\n    },\n  );\n\n  router.get(\n    '/org/:org',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res): Promise<void> => {\n      const user = await getUser(req, res);\n      if (!user) return;\n\n      const orgs = await user.api.orgs.listForAuthenticatedUser();\n      const org = orgs.data.find((o) => o.login === req.params.org);\n      if (!org) {\n        res.redirect('/app');\n        return;\n      }\n\n      const installation = await octokitApp.apps\n        .getOrgInstallation({ org: org.login })\n        .catch((err) => {\n          return { status: err.status, data: undefined };\n        });\n\n      if (!installation) {\n        res.send(\n          renderToStaticMarkup(\n            <Layout>\n              <div>\n                {process.env.REVIEWFLOW_NAME}{' '}\n                {\"isn't installed for this user. Go to \"}\n                <a\n                  href={`https://github.com/settings/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n                >\n                  Github Configuration\n                </a>{' '}\n                to install it.\n              </div>\n            </Layout>,\n          ),\n        );\n        return;\n      }\n\n      const accountConfig = accountConfigs[org.login];\n      const userDmSettings = await getUserDmSettings(\n        mongoStores,\n        org.login,\n        org.id,\n        user.authInfo.id,\n      );\n\n      res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              <h1>{process.env.REVIEWFLOW_NAME}</h1>\n              <div style={{ display: 'flex' }}>\n                <h2 style={{ flexGrow: 1 }}>{org.login}</h2>\n                <a href=\"/app\">Switch account</a>\n              </div>\n\n              <div style={{ display: 'flex' }}>\n                <div style={{ flexGrow: 1 }}>\n                  <h4>Information</h4>\n                  {!accountConfig\n                    ? 'Default config is used: https://github.com/christophehurpeau/reviewflow/blob/master/src/accountConfigs/defaultConfig.ts'\n                    : `Custom config: https://github.com/christophehurpeau/reviewflow/blob/master/src/accountConfigs/${org.login}.ts`}\n                </div>\n                <div style={{ width: '380px' }}>\n                  <h4>My DM Settings</h4>\n                  {Object.entries(dmMessages).map(([key, name]) => (\n                    <div key={key}>\n                      <label htmlFor={key}>\n                        <span\n                          // eslint-disable-next-line react/no-danger\n                          dangerouslySetInnerHTML={{\n                            __html: `<input id=\"${key}\" type=\"checkbox\" autocomplete=\"off\" ${\n                              userDmSettings[key as MessageCategory]\n                                ? 'checked=\"checked\" '\n                                : ''\n                            }onclick=\"fetch(location.pathname, { method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ key: '${key}', value: event.currentTarget.checked }) })\" />`,\n                          }}\n                        />\n                        {name}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </Layout>,\n        ),\n      );\n    },\n  );\n\n  router.patch('/org/:org', bodyParser.json(), async (req, res) => {\n    if (!req.body) {\n      res.status(400).send('not ok');\n      return;\n    }\n\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    const orgs = await user.api.orgs.listForAuthenticatedUser();\n    const org = orgs.data.find((o) => o.login === req.params.org);\n    if (!org) {\n      res.redirect('/app');\n      return;\n    }\n\n    (await mongoStores.userDmSettings.collection).updateOne(\n      {\n        _id: `${org.id}_${user.authInfo.id}`,\n      },\n      {\n        $set: {\n          [`settings.${req.body.key}`]: req.body.value,\n          updated: new Date(),\n        },\n        $setOnInsert: {\n          orgId: org.id,\n          userId: user.authInfo.id,\n          created: new Date(),\n        },\n      },\n      { upsert: true },\n    );\n\n    const userDmSettingsConfig = await mongoStores.userDmSettings.findOne({\n      orgId: org.id,\n      userId: user.authInfo.id,\n    });\n\n    if (userDmSettingsConfig) {\n      updateCache(org.login, user.authInfo.id, userDmSettingsConfig.settings);\n    }\n\n    res.send('ok');\n  });\n}\n","import type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function repository(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n): void {\n  router.get(\n    '/repositories',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res) => {\n      const user = await getUser(req, res);\n      if (!user) return;\n      const { data } = await user.api.repos.listForAuthenticatedUser({\n        per_page: 100,\n      });\n\n      res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              <h4>Your repositories</h4>\n              <ul>\n                {data.map((repo: any) => (\n                  <li key={repo.id}>\n                    <a\n                      href={`/app/repository/${repo.owner.login}/${repo.name}`}\n                    >\n                      {repo.name}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n\n              {data.length === 100 && (\n                <div>We currently have a limit to 100 repositories</div>\n              )}\n            </div>\n          </Layout>,\n        ),\n      );\n    },\n  );\n\n  router.get(\n    '/repository/:owner/:repository',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res) => {\n      const user = await getUser(req, res);\n      if (!user) return;\n      const { data } = await user.api.repos.get({\n        owner: req.params.owner,\n        repo: req.params.repository,\n      });\n\n      if (!data) {\n        res.status(404).send(\n          renderToStaticMarkup(\n            <Layout>\n              <div>repo not found</div>\n            </Layout>,\n          ),\n        );\n        return;\n      }\n\n      if (!data.permissions || !data.permissions.admin) {\n        res.status(401).send(\n          renderToStaticMarkup(\n            <Layout>\n              <div>\n                not authorized to see this repo, you need to have admin\n                permission\n              </div>\n            </Layout>,\n          ),\n        );\n        return;\n      }\n\n      const { data: data2 } = await octokitApp.apps\n        .getRepoInstallation({\n          owner: req.params.owner,\n          repo: req.params.repository,\n        })\n        .catch((err) => {\n          return { status: err.status, data: undefined };\n        });\n\n      if (!data2) {\n        res.send(\n          renderToStaticMarkup(\n            <Layout>\n              <div>\n                {process.env.REVIEWFLOW_NAME}{' '}\n                {\"isn't installed on this repo. Go to \"}\n                <a\n                  href={`https://github.com/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n                >\n                  Github Configuration\n                </a>{' '}\n                to add it.\n              </div>\n            </Layout>,\n          ),\n        );\n        return;\n      }\n\n      res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              <h4>{req.params.repository}</h4>\n            </div>\n          </Layout>,\n        ),\n      );\n    },\n  );\n}\n","import type { MongoStores, User } from '../../../mongo';\nimport type { Octokit } from '../../../octokit';\n\ninterface UserInfo {\n  login: string;\n  id: number;\n}\n\nexport const syncUser = async (\n  mongoStores: MongoStores,\n  github: Octokit,\n  installationId: number,\n  userInfo: UserInfo,\n): Promise<User> => {\n  const user = await mongoStores.users.upsertOne({\n    _id: userInfo.id,\n    login: userInfo.login,\n    type: 'User',\n    installationId,\n  });\n\n  return user;\n};\n","import type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { syncUser } from '../events/account-handlers/actions/syncUser';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function userSettings(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n  mongoStores: MongoStores,\n): void {\n  router.get(\n    '/user/force-sync',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res) => {\n      const user = await getUser(req, res);\n      if (!user) return;\n\n      // const { data: installation } = await api.apps\n      //   .getUserInstallation({\n      //     username: user.authInfo.login,\n      //   })\n      //   .catch((err) => {\n      //     return { status: err.status, data: undefined };\n      //   });\n\n      // console.log(installation);\n\n      const u = await mongoStores.users.findByKey(user.authInfo.id);\n      if (!u || !u.installationId) {\n        res.redirect('/app');\n        return;\n      }\n\n      await syncUser(mongoStores, user.api, u.installationId!, user.authInfo);\n\n      res.redirect('/app/user');\n    },\n  );\n\n  router.get(\n    '/user',\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    async (req, res) => {\n      const user = await getUser(req, res);\n      if (!user) return;\n\n      const { data: installation } = await octokitApp.apps\n        .getUserInstallation({\n          username: user.authInfo.login,\n        })\n        .catch((err) => {\n          return { status: err.status, data: undefined };\n        });\n\n      if (!installation) {\n        return res.send(\n          renderToStaticMarkup(\n            <Layout>\n              <div>\n                {process.env.REVIEWFLOW_NAME}{' '}\n                {\"isn't installed for this user. Go to \"}\n                <a\n                  href={`https://github.com/settings/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n                >\n                  Github Configuration\n                </a>{' '}\n                to install it.\n              </div>\n            </Layout>,\n          ),\n        );\n      }\n\n      return res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>{process.env.REVIEWFLOW_NAME} is installed for this user</div>\n          </Layout>,\n        ),\n      );\n    },\n  );\n}\n","import cookieParser from 'cookie-parser';\nimport type { Probot, run } from 'probot';\nimport auth from './app/auth';\nimport home from './app/home';\nimport orgSettings from './app/org-settings';\nimport repository from './app/repository';\nimport userSettings from './app/user-settings';\nimport type { AppContext } from './context/AppContext';\n\nexport default async function appRouter(\n  app: Probot,\n  getRouter: Parameters<\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    Extract<Parameters<typeof run>[0], Function>\n  >[1]['getRouter'],\n  { mongoStores }: AppContext,\n): Promise<void> {\n  const router = getRouter!('/app');\n  const octokitApp = await app.auth();\n\n  router.use(cookieParser());\n\n  auth(router);\n  repository(router, octokitApp);\n  home(router, octokitApp, mongoStores);\n  orgSettings(router, octokitApp, mongoStores);\n  userSettings(router, octokitApp, mongoStores);\n}\n","import { syncOrg } from '../events/account-handlers/actions/syncOrg';\nimport { syncTeamsAndTeamMembers } from '../events/account-handlers/actions/syncTeams';\nimport { syncUser } from '../events/account-handlers/actions/syncUser';\nimport type { Org, User } from '../mongo';\nimport type { Octokit } from '../octokit';\nimport type { AppContext } from './AppContext';\n\nexport interface AccountInfo {\n  id: number;\n  login: string;\n  type: string;\n}\n\nexport const getOrCreateAccount = async (\n  { mongoStores }: AppContext,\n  github: Octokit,\n  installationId: number,\n  accountInfo: AccountInfo,\n): Promise<Org | User> => {\n  switch (accountInfo.type) {\n    case 'Organization': {\n      let org = await mongoStores.orgs.findByKey(accountInfo.id);\n      if (org?.installationId) return org;\n\n      // TODO diff org vs user...\n      org = await syncOrg(mongoStores, github, installationId, accountInfo);\n      await syncTeamsAndTeamMembers(mongoStores, github, accountInfo);\n      return org;\n    }\n\n    case 'User': {\n      let user = await mongoStores.users.findByKey(accountInfo.id);\n      if (user?.installationId) return user;\n\n      user = await syncUser(mongoStores, github, installationId, accountInfo);\n      return user;\n    }\n\n    default:\n      throw new Error(`Account type not supported ${accountInfo.type}`);\n  }\n};\n","import createEmojiRegex from 'emoji-regex';\n\nexport const getKeys = <T>(o: T): (keyof T)[] => Object.keys(o) as (keyof T)[];\n\nconst emojiRegex = createEmojiRegex();\n\nexport const getEmojiFromRepoDescription = (\n  description: string | null,\n): string => {\n  if (!description) return '';\n  if (description.startsWith(':')) {\n    const [, emoji] = /^(:\\w+:)/.exec(description) || [];\n    return emoji || '';\n  }\n  const match = emojiRegex.exec(description);\n  if (match && description.startsWith(match[0])) return match[0];\n  return '';\n};\n","import type { TeamSlack } from './TeamSlack';\n\nexport const voidTeamSlack = (): TeamSlack => ({\n  mention: (): string => '',\n  postMessage: (): Promise<null> => Promise.resolve(null),\n  updateMessage: (): Promise<null> => Promise.resolve(null),\n  deleteMessage: (): Promise<undefined> => Promise.resolve(undefined),\n  addReaction: (): Promise<undefined> => Promise.resolve(undefined),\n  updateHome: (): void => undefined,\n});\n","import { WebClient } from '@slack/web-api';\nimport type { Context } from 'probot';\nimport type { Config } from '../accountConfigs';\nimport type { MessageCategory } from '../dm/MessageCategory';\nimport { getUserDmSettings } from '../dm/getUserDmSettings';\nimport type { Org, User } from '../mongo';\nimport type { AppContext } from './AppContext';\nimport type { SlackMessage } from './SlackMessage';\nimport type { TeamSlack, PostSlackMessageResult } from './TeamSlack';\nimport { getKeys } from './utils';\nimport { voidTeamSlack } from './voidTeamSlack';\n\nexport type { TeamSlack };\n\nexport const initTeamSlack = async <GroupNames extends string>(\n  { mongoStores, slackHome }: AppContext,\n  context: Context<any>,\n  config: Config<GroupNames>,\n  account: Org | User,\n): Promise<TeamSlack> => {\n  const slackToken = 'slackToken' in account && account.slackToken;\n\n  if (!slackToken) {\n    return voidTeamSlack();\n  }\n\n  const githubLoginToSlackEmail = getKeys(config.groups).reduce<\n    Record<string, string>\n  >((acc, groupName) => {\n    Object.assign(acc, config.groups[groupName]);\n    return acc;\n  }, {});\n\n  const slackEmails = Object.values(githubLoginToSlackEmail);\n  const slackClient = new WebClient(slackToken);\n\n  const membersInDb = await mongoStores.orgMembers.findAll({\n    'org.id': account._id,\n  });\n\n  const members: [string, { member: any; im: any }][] = [];\n  const foundEmailMembers: string[] = [];\n\n  Object.entries(githubLoginToSlackEmail).forEach(([login, email]) => {\n    const member = membersInDb.find((m) => m.user.login === login);\n    if (member?.slack?.id) {\n      foundEmailMembers.push(email);\n      members.push([email, { member: { id: member.slack.id }, im: undefined }]);\n    }\n  });\n\n  if (foundEmailMembers.length !== slackEmails.length) {\n    const missingEmails = slackEmails.filter(\n      (email) => !foundEmailMembers.includes(email),\n    );\n\n    const memberEmailToMemberId = new Map<string, number>(\n      Object.entries(githubLoginToSlackEmail).map(([login, email]) => [\n        email,\n        membersInDb.find((m) => m.user.login === login)?._id as any,\n      ]),\n    );\n\n    await slackClient.paginate('users.list', {}, (page: any) => {\n      page.members.forEach((member: any) => {\n        const email = member.profile?.email;\n        if (email && missingEmails.includes(email)) {\n          members.push([email, { member, im: undefined }]);\n          if (memberEmailToMemberId.has(email)) {\n            mongoStores.orgMembers.partialUpdateMany(\n              {\n                _id: memberEmailToMemberId.get(email),\n              },\n              { $set: { slack: { id: member.id } } },\n            );\n          }\n        }\n      });\n      return false;\n    });\n  }\n\n  for (const [, user] of members) {\n    try {\n      const im: any = await slackClient.conversations.open({\n        users: user.member.id,\n      });\n      user.im = im.channel;\n    } catch (err) {\n      context.log('could create im', { err });\n    }\n  }\n\n  const membersMap = new Map(members);\n\n  const getUserFromGithubLogin = (githubLogin: string) => {\n    const email = githubLoginToSlackEmail[githubLogin];\n    if (!email) return null;\n    return membersMap.get(email);\n  };\n\n  return {\n    mention: (githubLogin: string): string => {\n      // TODO pass AccountInfo instead\n      if (githubLogin.endsWith('[bot]')) {\n        return `:robot_face: ${githubLogin.slice(0, -'[bot]'.length)}`;\n      }\n      const user = getUserFromGithubLogin(githubLogin);\n      if (!user) return githubLogin;\n      return `<@${user.member.id}>`;\n    },\n    postMessage: async (\n      category: MessageCategory,\n      githubId: number,\n      githubLogin: string,\n      message: SlackMessage,\n    ): Promise<PostSlackMessageResult> => {\n      context.log.debug(\n        {\n          category,\n          githubLogin,\n          message,\n        },\n        'slack: post message',\n      );\n      if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return null;\n\n      const userDmSettings = await getUserDmSettings(\n        mongoStores,\n        account.login,\n        account._id,\n        githubId,\n      );\n\n      if (!userDmSettings[category]) return null;\n\n      const user = getUserFromGithubLogin(githubLogin);\n      if (!user || !user.im) return null;\n      const result = await slackClient.chat.postMessage({\n        username: process.env.REVIEWFLOW_NAME,\n        channel: user.im.id,\n        text: message.text,\n        blocks: message.blocks,\n        attachments: message.secondaryBlocks\n          ? [{ blocks: message.secondaryBlocks }]\n          : undefined,\n        thread_ts: message.ts,\n      });\n      if (!result.ok) return null;\n      return { ts: result.ts as string, channel: result.channel as string };\n    },\n    updateMessage: async (\n      ts: string,\n      channel: string,\n      message: SlackMessage,\n    ): Promise<PostSlackMessageResult> => {\n      context.log.debug({ ts, channel, message }, 'slack: update message');\n      if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return null;\n\n      const result = await slackClient.chat.update({\n        ts,\n        channel,\n        text: message.text,\n        blocks: message.blocks,\n        attachments: message.secondaryBlocks\n          ? [{ blocks: message.secondaryBlocks }]\n          : undefined,\n      });\n      if (!result.ok) return null;\n      return { ts: result.ts as string, channel: result.channel as string };\n    },\n    deleteMessage: async (ts: string, channel: string): Promise<void> => {\n      context.log.debug({ ts, channel }, 'slack: delete message');\n      await slackClient.chat.delete({\n        ts,\n        channel,\n      });\n    },\n    addReaction: async (\n      ts: string,\n      channel: string,\n      name: string,\n    ): Promise<void> => {\n      context.log.debug({ ts, channel, name }, 'slack: add reaction');\n      await slackClient.reactions.add({\n        timestamp: ts,\n        channel,\n        name,\n      });\n    },\n\n    updateHome: (githubLogin: string): void => {\n      context.log.debug({ githubLogin }, 'update slack home');\n      const user = getUserFromGithubLogin(githubLogin);\n      if (!user || !user.member) return;\n\n      slackHome.scheduleUpdateMember(context.octokit, slackClient, {\n        user: { id: null, login: githubLogin },\n        org: { id: account._id, login: account.login },\n        slack: { id: user.member.id },\n      } as any);\n    },\n  };\n};\n","import { Lock } from 'lock';\nimport type { Context } from 'probot';\nimport type {\n  PullRequestWithDecentData,\n  PullRequestWithDecentDataFromWebhook,\n} from 'events/pr-handlers/utils/PullRequestData';\nimport type { Config } from '../accountConfigs';\nimport type {\n  Org,\n  User,\n  AccountEmbed,\n  AccountType,\n  AccountEmbedWithoutType,\n  OrgMember,\n} from '../mongo';\nimport { ExcludesFalsy } from '../utils/Excludes';\nimport type { AppContext } from './AppContext';\nimport type { AccountInfo } from './getOrCreateAccount';\nimport { getOrCreateAccount } from './getOrCreateAccount';\nimport type { TeamSlack } from './initTeamSlack';\nimport { initTeamSlack } from './initTeamSlack';\nimport { getKeys } from './utils';\n\nexport interface AccountContext<\n  GroupNames extends string = any,\n  TeamNames extends string = any\n> {\n  config: Config<GroupNames, TeamNames>;\n  accountType: AccountType;\n  account: Org | User;\n  accountEmbed: AccountEmbed;\n  slack: TeamSlack;\n  getReviewerGroup: (githubLogin: string) => GroupNames | undefined;\n  getReviewerGroups: (githubLogins: string[]) => GroupNames[];\n  getTeamGroup: (teamName: string) => GroupNames | undefined;\n  getGithubTeamsGroups: (teamNames: string[]) => GroupNames[];\n  getMembersForTeam: (teamId: string) => Promise<AccountEmbedWithoutType[]>;\n  getTeamsForLogin: (githubLogin: string) => TeamNames[];\n  approveShouldWait: (\n    reviewerGroup: GroupNames | undefined,\n    pullRequest: PullRequestWithDecentData,\n    {\n      includesReviewerGroup,\n      includesWaitForGroups,\n    }: { includesReviewerGroup?: boolean; includesWaitForGroups?: boolean },\n  ) => boolean;\n\n  lock: (callback: () => Promise<void> | void) => Promise<void>;\n}\n\nconst initAccountContext = async (\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config,\n  accountInfo: AccountInfo,\n): Promise<AccountContext> => {\n  const account = await getOrCreateAccount(\n    appContext,\n    context.octokit,\n    context.payload.installation.id,\n    accountInfo,\n  );\n  const slackPromise = initTeamSlack(appContext, context, config, account);\n\n  const githubLoginToGroup = new Map<string, string>();\n  for (const groupName of getKeys(config.groups)) {\n    Object.keys(config.groups[groupName]).forEach((login) => {\n      githubLoginToGroup.set(login, groupName);\n    });\n  }\n\n  const githubTeamNameToGroup = new Map<string, string>();\n  if (config.groupsGithubTeams) {\n    for (const groupName of getKeys(config.groupsGithubTeams)) {\n      config.groupsGithubTeams[groupName].forEach((teamName) => {\n        githubTeamNameToGroup.set(teamName, groupName);\n      });\n    }\n  }\n\n  const githubLoginToTeams = new Map<string, string[]>();\n  getKeys(config.teams || {}).forEach((teamName) => {\n    config.teams![teamName].logins.forEach((login) => {\n      const teams = githubLoginToTeams.get(login);\n      if (teams) {\n        teams.push(teamName);\n      } else {\n        githubLoginToTeams.set(login, [teamName]);\n      }\n    });\n  });\n\n  const getReviewerGroups = (githubLogins: string[]): string[] => [\n    ...new Set(\n      githubLogins\n        .map((githubLogin) => githubLoginToGroup.get(githubLogin))\n        .filter(ExcludesFalsy),\n    ),\n  ];\n  const getGithubTeamsGroups = (githubTeamNames: string[]): string[] => [\n    ...new Set(\n      githubTeamNames\n        .map((teamName) => githubTeamNameToGroup.get(teamName))\n        .filter(ExcludesFalsy),\n    ),\n  ];\n\n  const lock = Lock();\n\n  return {\n    config,\n    account,\n    accountEmbed: {\n      id: accountInfo.id,\n      login: accountInfo.login,\n      type: accountInfo.type as AccountType,\n    },\n    accountType: accountInfo.type as AccountType,\n    lock: (callback: () => Promise<void> | void): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const logInfos = { account: accountInfo.login };\n        context.log.info(logInfos, 'lock: try to lock account');\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        lock('_', async (createReleaseCallback) => {\n          const release = createReleaseCallback(() => {});\n          context.log.info(logInfos, 'lock: lock account acquired');\n          try {\n            await callback();\n          } catch (err) {\n            context.log.info(logInfos, 'lock: release account (with error)');\n            release();\n            reject(err);\n            return;\n          }\n          context.log.info(logInfos, 'lock: release account');\n          release();\n          resolve();\n        });\n      });\n    },\n    getReviewerGroup: (githubLogin): string | undefined =>\n      githubLoginToGroup.get(githubLogin),\n    getReviewerGroups,\n    getTeamGroup: (githubTeamName): string | undefined =>\n      githubTeamNameToGroup.get(githubTeamName),\n    getGithubTeamsGroups,\n\n    getTeamsForLogin: (githubLogin): string[] =>\n      githubLoginToTeams.get(githubLogin) || [],\n\n    getMembersForTeam: async (teamId): Promise<AccountEmbedWithoutType[]> => {\n      if (accountInfo.type !== 'Organization') {\n        throw new Error(\n          `Invalid account type \"${accountInfo.type}\" for getMembersForTeam`,\n        );\n      }\n      const cursor = await appContext.mongoStores.orgMembers.cursor<\n        Pick<OrgMember, 'user'>\n      >({\n        'org.id': account._id,\n        'teams.id': teamId,\n      });\n      await cursor.limit(100);\n      const orgMembers = await cursor.toArray();\n      return orgMembers.map((member) => member.user);\n    },\n\n    approveShouldWait: (\n      reviewerGroup,\n      pullRequest,\n      { includesReviewerGroup, includesWaitForGroups },\n    ): boolean => {\n      if (\n        !reviewerGroup ||\n        !pullRequest.requested_reviewers ||\n        !pullRequest.requested_teams\n      ) {\n        return false;\n      }\n\n      const requestedReviewerGroups = [\n        ...new Set([\n          ...getReviewerGroups(\n            (pullRequest.requested_reviewers as PullRequestWithDecentDataFromWebhook['requested_reviewers']).map(\n              (request) => request.login,\n            ),\n          ),\n          ...(!pullRequest.requested_teams\n            ? []\n            : getGithubTeamsGroups(\n                (pullRequest.requested_teams as PullRequestWithDecentDataFromWebhook['requested_teams']).map(\n                  (team) => team.name,\n                ),\n              )),\n        ]),\n      ];\n\n      // contains another request of a reviewer in the same group\n      if (\n        includesReviewerGroup &&\n        requestedReviewerGroups.includes(reviewerGroup)\n      ) {\n        return true;\n      }\n\n      // contains a request from a dependent group\n      if (config.waitForGroups && includesWaitForGroups) {\n        const waitForGroups = config.waitForGroups;\n        return requestedReviewerGroups.some((group) =>\n          waitForGroups[reviewerGroup].includes(group),\n        );\n      }\n\n      return false;\n    },\n\n    slack: await slackPromise,\n  };\n};\n\nconst accountContextsPromise = new Map();\nconst accountContexts = new Map();\n\nexport const obtainAccountContext = (\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config,\n  accountInfo: AccountInfo,\n): Promise<AccountContext> => {\n  const existingAccountContext = accountContexts.get(accountInfo.login);\n  if (existingAccountContext) return existingAccountContext;\n\n  const existingPromise = accountContextsPromise.get(accountInfo.login);\n  if (existingPromise) return Promise.resolve(existingPromise);\n\n  const promise = initAccountContext(appContext, context, config, accountInfo);\n  accountContextsPromise.set(accountInfo.login, promise);\n\n  return promise.then((accountContext) => {\n    accountContextsPromise.delete(accountInfo.login);\n    accountContexts.set(accountInfo.login, accountContext);\n    return accountContext;\n  });\n};\n","import type { Context } from 'probot';\nimport { accountConfigs, defaultConfig } from '../../../accountConfigs';\nimport type { AppContext } from '../../../context/AppContext';\nimport type { AccountContext } from '../../../context/accountContext';\nimport { obtainAccountContext } from '../../../context/accountContext';\n\ntype CallbackContextAndAccountContext<T> = (\n  context: Context<T>,\n  accountContext: AccountContext,\n) => void | Promise<void>;\n\nexport const handlerOrgChange = async <\n  T extends { organization?: { id: number; login: string } }\n>(\n  appContext: AppContext,\n  context: Context<T>,\n  callback: CallbackContextAndAccountContext<T>,\n): Promise<void> => {\n  const org = context.payload.organization;\n  if (!org) return;\n  const config = accountConfigs[org.login] || defaultConfig;\n  const accountContext = await obtainAccountContext(\n    appContext,\n    context,\n    config,\n    { ...org, type: 'Organization' },\n  );\n  if (!accountContext) return;\n\n  return accountContext.lock(async () => {\n    await callback(context, accountContext);\n  });\n};\n\nexport const createHandlerOrgChange = <\n  T extends { organization?: { id: number; login: string } }\n>(\n  appContext: AppContext,\n  callback: CallbackContextAndAccountContext<T>,\n) => (context: Context<T>) => {\n  return handlerOrgChange(appContext, context, callback);\n};\n","import type { RepoContext } from '../../../context/repoContext';\n\nexport const checkIfUserIsBot = (\n  repoContext: RepoContext,\n  user: { login: string; type: string },\n): boolean => {\n  if (user.type === 'Bot') return true;\n  if (repoContext.config.botUsers) {\n    return repoContext.config.botUsers.includes(user.login);\n  }\n  return false;\n};\n\nexport const checkIfIsThisBot = (user: {\n  login: string;\n  type: string;\n}): boolean => {\n  return (\n    user.type === 'Bot' && user.login === `${process.env.REVIEWFLOW_NAME}[bot]`\n  );\n};\n","import type { Context } from 'probot';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\n\nexport const updateBranch = async (\n  pullRequest: PullRequestWithDecentData,\n  context: Context<any>,\n  login: string | null,\n): Promise<boolean> => {\n  context.log.info('update branch', {\n    head: pullRequest.head.ref,\n    base: pullRequest.base.ref,\n  });\n\n  const result = await context.octokit.repos\n    .merge({\n      owner: pullRequest.head.repo.owner.login,\n      repo: pullRequest.head.repo.name,\n      head: pullRequest.base.ref,\n      base: pullRequest.head.ref,\n    })\n    .catch((err) => ({ error: err } as any));\n\n  context.log.info(\n    {\n      status: result.status,\n      sha: result.data?.sha,\n      error: result.error,\n    },\n    'update branch result',\n  );\n\n  if (result.status === 204) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `${\n          login ? `@${login} ` : ''\n        }Could not update branch: base already contains the head, nothing to merge.`,\n      }),\n    );\n    return true;\n  } else if (result.status === 409) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `${\n          login ? `@${login} ` : ''\n        }Could not update branch: merge conflict. Please resolve manually.`,\n      }),\n    );\n    return false;\n  } else if (!result || !result.data || !result.data.sha) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `${\n          login ? `@${login} ` : ''\n        }Could not update branch (unknown error).`,\n      }),\n    );\n    return false;\n  } else if (login) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `${login ? `@${login} ` : ''}Branch updated: ${result.data.sha}`,\n      }),\n    );\n  }\n  return true;\n};\n","export type OptionsKeys =\n  | 'autoMerge'\n  | 'autoMergeWithSkipCi'\n  | 'deleteAfterMerge';\n\nexport type Options = Record<OptionsKeys, boolean>;\n\nexport const options: OptionsKeys[] = [\n  'autoMerge',\n  'autoMergeWithSkipCi',\n  'deleteAfterMerge',\n];\nexport const optionsRegexps: {\n  key: OptionsKeys;\n  regexp: RegExp;\n}[] = options.map((option) => ({\n  key: option,\n  regexp: new RegExp(`\\\\[([ xX]?)]\\\\s*<!-- reviewflow-${option} -->`),\n}));\n\ninterface OptionDisplay {\n  key: OptionsKeys;\n  labelKey?: string;\n  icon?: string;\n  description: string;\n}\n\nexport const optionsDescriptions: OptionDisplay[] = [\n  {\n    key: 'autoMerge',\n    labelKey: 'merge/automerge',\n    description:\n      'Automatically merge when this PR is ready and has no failed statuses. When the repository requires _branches to be up to date before merging_, it merges default branch, with a queue per repo to prevent multiple merges when several PRs are ready. A fail job prevents the merge.',\n  },\n  {\n    key: 'autoMergeWithSkipCi',\n    labelKey: 'merge/skip-ci',\n    description:\n      'Add `[skip ci]` on merge commit when merge is done with autoMerge.',\n  },\n  {\n    key: 'deleteAfterMerge',\n    icon: ':recycle:',\n    description: 'Automatically delete the branch after this PR is merged.',\n  },\n];\n","import { optionsRegexps } from './prOptions';\nimport type { Options } from './prOptions';\n\nexport type { Options } from './prOptions';\n\nexport const parseOptions = (\n  content: string,\n  defaultOptions: Options,\n): Options => {\n  return optionsRegexps.reduce<any>((acc, { key, regexp }) => {\n    const match = regexp.exec(content);\n    acc[key] = !match\n      ? defaultOptions[key] || false\n      : match[1] === 'x' || match[1] === 'X';\n    return acc;\n  }, {}) as Options;\n};\n\nexport const parseCommitNotes = (content: string): string => {\n  const commitNotes = content.replace(\n    /^.*#### Commits Notes:(.*)#### Options:.*$/s,\n    '$1',\n  );\n\n  if (commitNotes === content) {\n    return '';\n  } else {\n    return commitNotes.trim();\n  }\n};\n\ninterface ParsedBody {\n  options: Options;\n  commitNotes: string;\n}\n\nexport const parseBody = (\n  content: string,\n  defaultOptions: Options,\n): ParsedBody => {\n  return {\n    options: parseOptions(content, defaultOptions),\n    commitNotes: parseCommitNotes(content),\n  };\n};\n","import type { PullRequestLabels } from 'events/pr-handlers/utils/PullRequestData';\nimport type { LabelResponse } from '../../../../context/initRepoLabels';\n\nexport default function hasLabelInPR(\n  prLabels: PullRequestLabels,\n  label: LabelResponse,\n): boolean {\n  if (!label) return false;\n  return prLabels.some((l): boolean => l.id === label.id);\n}\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { PullRequestData } from 'events/pr-handlers/utils/PullRequestData';\n\nexport function readPullRequestCommits<\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  context: Context<E>,\n  pr: PullRequestData = context.payload.pull_request,\n): Promise<\n  RestEndpointMethodTypes['pulls']['listCommits']['response']['data']\n> {\n  return context.octokit.paginate(\n    context.octokit.pulls.listCommits,\n    context.repo({\n      pull_number: pr.number,\n      // A custom page size up to 100. Default is 30.\n      per_page: 100,\n    }),\n    (res) => res.data,\n  );\n}\n","/* eslint-disable max-lines */\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { AutomergeLog } from 'mongo';\nimport type {\n  PullRequestData,\n  PullRequestFromRestEndpoint,\n  PullRequestLabels,\n} from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { checkIfUserIsBot } from '../utils/isBotUser';\nimport { updateBranch } from './updateBranch';\nimport { parseBody } from './utils/body/parseBody';\nimport hasLabelInPR from './utils/hasLabelInPR';\nimport { readPullRequestCommits } from './utils/readPullRequestCommits';\n\nconst hasFailedStatusOrChecks = async (\n  pr: PullRequestData,\n  context: Context<any>,\n): Promise<boolean> => {\n  const checks = await context.octokit.checks.listForRef(\n    context.repo({\n      ref: pr.head.sha,\n      per_page: 100,\n    }),\n  );\n\n  const failedChecks = checks.data.check_runs.filter(\n    (check) => check.conclusion === 'failure',\n  );\n\n  if (failedChecks.length > 0) {\n    context.log.info(\n      {\n        checks: failedChecks.map((check) => check.name),\n      },\n      `automerge not possible: failed check pr ${pr.id}`,\n    );\n    return true;\n  }\n\n  const combinedStatus = await context.octokit.repos.getCombinedStatusForRef(\n    context.repo({\n      ref: pr.head.sha,\n      per_page: 100,\n    }),\n  );\n\n  if (combinedStatus.data.state === 'failure') {\n    const failedStatuses = combinedStatus.data.statuses.filter(\n      (status) => status.state === 'failure' || status.state === 'error',\n    );\n\n    context.log.info(\n      {\n        statuses: failedStatuses.map((status) => status.context),\n      },\n      `automerge not possible: failed status pr ${pr.id}`,\n    );\n\n    return true;\n  }\n\n  return false;\n};\n\nexport const autoMergeIfPossible = async (\n  pullRequest: PullRequestFromRestEndpoint,\n  context: Context<any>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  prLabels: PullRequestLabels = pullRequest.labels,\n): Promise<boolean> => {\n  if (reviewflowPrContext === null) return false;\n\n  const autoMergeLabel = repoContext.labels['merge/automerge'];\n\n  if (!hasLabelInPR(prLabels, autoMergeLabel)) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'no automerge label',\n    );\n    return false;\n  }\n\n  const isRenovatePr = pullRequest.head.ref.startsWith('renovate/');\n\n  const createMergeLockPrFromPr = () => ({\n    id: pullRequest.id,\n    number: pullRequest.number,\n    branch: pullRequest.head.ref,\n  });\n\n  if (pullRequest.state !== 'open') {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'pr is not opened',\n    );\n    return false;\n  }\n\n  const addLog = (\n    type: AutomergeLog['type'],\n    action: AutomergeLog['action'],\n  ): void => {\n    const repoFullName = pullRequest.head.repo.full_name;\n    context.log.info(`automerge: ${repoFullName}#${pullRequest.id} ${type}`);\n    repoContext.appContext.mongoStores.automergeLogs.insertOne({\n      account: repoContext.accountEmbed,\n      repoFullName,\n      pr: {\n        id: pullRequest.id,\n        number: pullRequest.number,\n        isRenovate: isRenovatePr,\n        mergeableState: pullRequest.mergeable_state,\n      },\n      type,\n      action,\n    });\n  };\n\n  if (\n    repoContext.hasNeedsReview(prLabels) ||\n    repoContext.hasRequestedReview(prLabels)\n  ) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'blocking labels',\n    );\n    return false;\n  }\n\n  if (\n    pullRequest.requested_reviewers &&\n    pullRequest.requested_reviewers.length > 0\n  ) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'still has requested reviewers',\n    );\n    return false;\n  }\n\n  if (pullRequest.requested_teams && pullRequest.requested_teams.length > 0) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'still has requested teams',\n    );\n    return false;\n  }\n\n  const lockedPr = repoContext.getMergeLockedPr();\n  if (lockedPr && String(lockedPr.number) !== String(pullRequest.number)) {\n    context.log.info(\n      {\n        prId: pullRequest.id,\n        prNumber: pullRequest.number,\n        lockedPrNumber: lockedPr.number,\n      },\n      'automerge not possible: locked pr',\n    );\n    repoContext.pushAutomergeQueue(createMergeLockPrFromPr());\n    return false;\n  }\n\n  repoContext.addMergeLockPr(createMergeLockPrFromPr());\n\n  if (pullRequest.mergeable == null) {\n    const prResult = await context.octokit.pulls.get(\n      context.repo({\n        pull_number: pullRequest.number,\n      }),\n    );\n    pullRequest = prResult.data;\n  }\n\n  if (pullRequest.merged) {\n    addLog('already merged', 'remove');\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'pr already merged',\n    );\n    return false;\n  }\n\n  context.log.info(\n    `automerge?: ${pullRequest.id}, #${pullRequest.number}, mergeable=${pullRequest.mergeable} state=${pullRequest.mergeable_state}`,\n  );\n\n  // https://github.com/octokit/octokit.net/issues/1763\n  if (\n    !(\n      pullRequest.mergeable_state === 'clean' ||\n      pullRequest.mergeable_state === 'has_hooks' ||\n      pullRequest.mergeable_state === 'unstable'\n    )\n  ) {\n    if (\n      !pullRequest.mergeable_state ||\n      pullRequest.mergeable_state === 'unknown'\n    ) {\n      addLog('unknown mergeable_state', 'reschedule');\n      // GitHub is determining whether the pull request is mergeable\n      repoContext.reschedule(context, createMergeLockPrFromPr());\n      return false;\n    }\n\n    if (isRenovatePr) {\n      if (\n        pullRequest.mergeable_state === 'behind' ||\n        pullRequest.mergeable_state === 'dirty'\n      ) {\n        const commits = await readPullRequestCommits(context, pullRequest);\n\n        // check if has commits not made by renovate or bots like https://github.com/ornikar/shared-configs/pull/47#issuecomment-445767120\n        if (\n          commits.some(\n            (c) => !c.author || checkIfUserIsBot(repoContext, c.author),\n          )\n        ) {\n          addLog('rebase-renovate', 'update branch');\n          if (await updateBranch(pullRequest, context, null)) {\n            return false;\n          }\n\n          repoContext.removePrFromAutomergeQueue(\n            context,\n            pullRequest.number,\n            'update branch failed',\n          );\n          return false;\n        }\n\n        addLog('rebase-renovate', 'wait');\n        if (\n          pullRequest.body &&\n          pullRequest.body.includes('<!-- rebase-check -->')\n        ) {\n          if (pullRequest.body.includes('[x] <!-- rebase-check -->')) {\n            return false;\n          }\n\n          const renovateRebaseBody = pullRequest.body.replace(\n            '[ ] <!-- rebase-check -->',\n            '[x] <!-- rebase-check -->',\n          );\n          await context.octokit.issues.update(\n            context.repo({\n              issue_number: pullRequest.number,\n              body: renovateRebaseBody,\n            }),\n          );\n        } else if (!pullRequest.title.startsWith('rebase!')) {\n          await context.octokit.issues.update(\n            context.repo({\n              issue_number: pullRequest.number,\n              title: `rebase!${pullRequest.title}`,\n            }),\n          );\n        }\n        return false;\n      }\n\n      if (await hasFailedStatusOrChecks(pullRequest, context)) {\n        addLog('failed status or checks', 'remove');\n        repoContext.removePrFromAutomergeQueue(\n          context,\n          pullRequest.number,\n          'failed status or checks',\n        );\n        return false;\n      } else if (pullRequest.mergeable_state === 'blocked') {\n        addLog('blocked mergeable_state', 'wait');\n        // waiting for reschedule in status (pr-handler/status.ts)\n        return false;\n      }\n\n      context.log.info(\n        `automerge not possible: renovate with mergeable_state=${pullRequest.mergeable_state}`,\n      );\n      return false;\n    }\n\n    if (pullRequest.mergeable_state === 'blocked') {\n      if (await hasFailedStatusOrChecks(pullRequest, context)) {\n        addLog('failed status or checks', 'remove');\n        repoContext.removePrFromAutomergeQueue(\n          context,\n          pullRequest.number,\n          'failed status or checks',\n        );\n        return false;\n      } else {\n        addLog('blocked mergeable_state', 'wait');\n        // waiting for reschedule in status (pr-handler/status.ts)\n        return false;\n      }\n    }\n\n    if (pullRequest.mergeable_state === 'behind') {\n      addLog('behind mergeable_state', 'update branch');\n      if (await updateBranch(pullRequest, context, null)) {\n        return false;\n      }\n\n      repoContext.removePrFromAutomergeQueue(\n        context,\n        pullRequest.number,\n        'update branch failed',\n      );\n      return false;\n    }\n\n    addLog('not mergeable', 'remove');\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      `mergeable_state=${pullRequest.mergeable_state}`,\n    );\n    context.log.info(\n      `automerge not possible: not mergeable mergeable_state=${pullRequest.mergeable_state}`,\n    );\n    return false;\n  }\n\n  try {\n    context.log.info(`automerge pr #${pullRequest.number}`);\n\n    const parsedBody = parseBody(\n      reviewflowPrContext.commentBody,\n      repoContext.config.prDefaultOptions,\n    );\n    const options = parsedBody?.options || repoContext.config.prDefaultOptions;\n\n    const mergeResult = await context.octokit.pulls.merge({\n      merge_method: 'squash',\n      owner: pullRequest.head.repo.owner.login,\n      repo: pullRequest.head.repo.name,\n      pull_number: pullRequest.number,\n      commit_title: `${pullRequest.title}${\n        options.autoMergeWithSkipCi ? ' [skip ci]' : ''\n      } (#${pullRequest.number})`,\n      commit_message: parsedBody?.commitNotes\n        ? parsedBody?.commitNotes\n            .replace(/^- (.*)\\s*\\([^)]+\\)$/gm, '$1')\n            .replace(/^Breaking Changes:\\n/, 'BREAKING CHANGE: ')\n            .replace(/\\n/g, '; ')\n        : '',\n    });\n    context.log.debug(mergeResult.data, 'merge result:');\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'merged',\n    );\n    return Boolean('merged' in mergeResult.data && mergeResult.data.merged);\n  } catch (err) {\n    context.log.info({ errorMessage: err.message }, 'could not merge:');\n    repoContext.reschedule(context, createMergeLockPrFromPr());\n    return false;\n  }\n};\n","import type { LabelList, StatusInfo } from 'accountConfigs/types';\nimport type { Options } from './parseBody';\nimport { parseOptions } from './parseBody';\nimport { optionsDescriptions } from './prOptions';\n\nexport const defaultCommentBody = 'This will be auto filled by reviewflow.';\n\nconst toMarkdownOptions = (\n  repoLink: string,\n  labelsConfig: LabelList,\n  options: Options,\n): string => {\n  return optionsDescriptions\n    .map(({ key, labelKey, description, icon: iconValue }) => {\n      const checkboxWithId = `[${\n        options[key] ? 'x' : ' '\n      }] <!-- reviewflow-${key} -->`;\n\n      const labelDescription = labelKey && labelsConfig[labelKey];\n      const labelLink = labelDescription\n        ? `[${labelDescription.name}](${repoLink}/labels/${encodeURIComponent(\n            labelDescription.name,\n          )}): `\n        : '';\n      const icon = labelLink || !iconValue ? '' : `${iconValue} `;\n\n      return `- ${checkboxWithId}${icon}${labelLink}${description}`;\n    })\n    .join('\\n');\n};\n\nconst toMarkdownInfos = (infos: StatusInfo[]): string => {\n  return infos\n    .map((info) => {\n      if (info.url) return `[${info.title}](${info.url})`;\n      return info.title;\n    })\n    .join('\\n');\n};\n\ninterface UpdatedBodyWithOptions {\n  commentBody: string;\n  options?: Options;\n}\n\nconst getReplacement = (infos?: StatusInfo[]): string => {\n  if (!infos) return '$1$2';\n  return infos.length > 0\n    ? `#### Infos:\\n\\n${toMarkdownInfos(infos)}\\n\\n$2`\n    : '$2';\n};\n\nconst updateOptions = (\n  options: Options,\n  optionsToUpdate?: Partial<Options>,\n): Options => {\n  if (!optionsToUpdate) return options;\n  return { ...options, ...optionsToUpdate };\n};\n\nconst internalUpdateBodyOptionsAndInfos = (\n  repoLink: string,\n  labelsConfig: LabelList,\n  body: string,\n  options: Options,\n  infos?: StatusInfo[],\n): string => {\n  const infosAndCommitNotesParagraph = body.replace(\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /^\\s*(?:(#### Infos:.*)?(#### Commits Notes:.*)?#### Options:)?.*$/s,\n    getReplacement(infos),\n  );\n\n  return `${infosAndCommitNotesParagraph}#### Options:\\n${toMarkdownOptions(\n    repoLink,\n    labelsConfig,\n    options,\n  )}`;\n};\n\nexport const createCommentBody = (\n  repoLink: string,\n  labelsConfig: LabelList,\n  defaultOptions: Options,\n  infos?: StatusInfo[],\n): string => {\n  return internalUpdateBodyOptionsAndInfos(\n    repoLink,\n    labelsConfig,\n    '',\n    defaultOptions,\n    infos,\n  );\n};\n\nexport const updateCommentOptions = (\n  repoLink: string,\n  labelsConfig: LabelList,\n  commentBody: string,\n  defaultOptions: Options,\n  optionsToUpdate?: Partial<Options>,\n): UpdatedBodyWithOptions => {\n  const options = parseOptions(commentBody, defaultOptions);\n  const updatedOptions = updateOptions(options, optionsToUpdate);\n\n  return {\n    options: updatedOptions,\n    commentBody: internalUpdateBodyOptionsAndInfos(\n      repoLink,\n      labelsConfig,\n      commentBody,\n      updatedOptions,\n    ),\n  };\n};\n\nexport const updateCommentBodyInfos = (\n  commentBody: string,\n  infos?: StatusInfo[],\n): string => {\n  return commentBody.replace(\n    // *  - zero or more\n    // *? - zero or more (non-greedy)\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /^\\s*(?:(#### Infos:.*?)?(#### Commits Notes:.*?)?(#### Options:.*?)?)?$/s,\n    `${getReplacement(infos)}$3`,\n  );\n};\n\nexport const updateCommentBodyCommitsNotes = (\n  commentBody: string,\n  commitNotes?: string,\n): string => {\n  return commentBody.replace(\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /(?:#### Commits Notes:.*?)?(#### Options:)/s,\n    !commitNotes ? '$1' : `#### Commits Notes:\\n\\n${commitNotes}\\n\\n$1`,\n  );\n};\n\nexport const removeDeprecatedReviewflowInPrBody = (\n  prBody: string | null,\n): string => {\n  if (!prBody) return '';\n  return prBody.replace(\n    /^(.*)<!---? do not edit after this -?-->(.*)<!---? end - don't add anything after this -?-->(.*)$/is,\n    '$1$3',\n  );\n};\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { Context } from 'probot';\nimport type { PullRequestWithDecentDataFromWebhook } from './PullRequestData';\n\nexport const createReviewflowComment = <T>(\n  pullRequestNumber: PullRequestWithDecentDataFromWebhook['number'],\n  context: Context<T>,\n  body: string,\n): Promise<\n  RestEndpointMethodTypes['issues']['createComment']['response']['data']\n> => {\n  return context.octokit.issues\n    .createComment(context.repo({ issue_number: pullRequestNumber, body }))\n    .then(({ data }) => data);\n};\n\nexport const getReviewflowCommentById = <T>(\n  pullRequestNumber: PullRequestWithDecentDataFromWebhook['number'],\n  context: Context<T>,\n  commentId: number,\n): Promise<\n  RestEndpointMethodTypes['issues']['getComment']['response']['data'] | null\n> => {\n  return context.octokit.issues\n    .getComment(\n      context.repo({\n        issue_number: pullRequestNumber,\n        comment_id: commentId,\n      }),\n    )\n    .then(\n      ({ data }) => data,\n      () => null,\n    );\n};\n","import type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { ReviewflowPr } from 'mongo';\nimport { defaultCommentBody } from '../actions/utils/body/updateBody';\nimport type { PullRequestWithDecentDataFromWebhook } from './PullRequestData';\nimport {\n  createReviewflowComment,\n  getReviewflowCommentById,\n} from './reviewflowComment';\n\nexport interface CreatePrContextOptions {\n  reviewflowCommentPromise?: ReturnType<typeof createReviewflowComment>;\n}\n\nexport interface ReviewflowPrContext {\n  reviewflowPr: ReviewflowPr;\n  commentBody: string;\n}\n\nexport const getReviewflowPrContext = async <T>(\n  pullRequestNumber: PullRequestWithDecentDataFromWebhook['number'],\n  context: Context<T>,\n  repoContext: RepoContext,\n  reviewflowCommentPromise?: ReturnType<typeof createReviewflowComment>,\n): Promise<ReviewflowPrContext> => {\n  const appContext = repoContext.appContext;\n  const prEmbed = { number: pullRequestNumber };\n\n  if (reviewflowCommentPromise) {\n    const comment = await reviewflowCommentPromise;\n    const reviewflowPr = await appContext.mongoStores.prs.insertOne({\n      account: repoContext.accountEmbed,\n      repo: repoContext.repoEmbed,\n      pr: prEmbed,\n      commentId: comment.id,\n    });\n    return { reviewflowPr, commentBody: comment.body! };\n  }\n\n  const existing = await appContext.mongoStores.prs.findOne({\n    'account.id': repoContext.accountEmbed.id,\n    'repo.id': repoContext.repoEmbed.id,\n    'pr.number': pullRequestNumber,\n  });\n  const comment =\n    existing &&\n    (await getReviewflowCommentById(\n      pullRequestNumber,\n      context,\n      existing.commentId,\n    ));\n\n  if (!comment || !existing) {\n    const comment = await createReviewflowComment(\n      pullRequestNumber,\n      context,\n      defaultCommentBody,\n    );\n\n    if (!existing) {\n      const reviewflowPr = await appContext.mongoStores.prs.insertOne({\n        account: repoContext.accountEmbed,\n        repo: repoContext.repoEmbed,\n        pr: prEmbed,\n        commentId: comment.id,\n      });\n      return { reviewflowPr, commentBody: comment.body! };\n    } else {\n      await appContext.mongoStores.prs.partialUpdateByKey(existing._id, {\n        $set: { commentId: comment.id },\n      });\n    }\n  }\n\n  return { reviewflowPr: existing, commentBody: comment!.body! };\n};\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { Context } from 'probot';\n\nexport const fetchPr = async (\n  context: Context<any>,\n  prNumber: number,\n): Promise<RestEndpointMethodTypes['pulls']['get']['response']['data']> => {\n  const prResult = await context.octokit.pulls.get(\n    context.repo({ pull_number: prNumber }),\n  );\n\n  return prResult.data;\n};\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { Context } from 'probot';\nimport type { Config } from '../accountConfigs';\n\nexport interface LabelResponse {\n  id: number;\n  node_id: string;\n  url: string;\n  name: string;\n  description?: string | null;\n  color: string;\n  default: boolean;\n}\n\nexport type LabelsRecord = Record<string, LabelResponse>;\n\nexport const getLabelsForRepo = async (\n  context: Context<any>,\n): Promise<\n  RestEndpointMethodTypes['issues']['listLabelsForRepo']['response']['data']\n> => {\n  const { data: labels } = await context.octokit.issues.listLabelsForRepo(\n    context.repo({ per_page: 100 }),\n  );\n  return labels;\n};\n\nexport const initRepoLabels = async <GroupNames extends string>(\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<LabelsRecord> => {\n  const labels = await getLabelsForRepo(context);\n  const finalLabels: Record<string, LabelResponse> = {};\n\n  for (const [labelKey, labelConfig] of Object.entries(config.labels.list)) {\n    const labelColor = labelConfig.color.slice(1);\n    const description = labelConfig.description\n      ? `${labelConfig.description} - Synced by reviewflow`\n      : `Synced by reviewflow for ${labelKey}`;\n\n    let existingLabel = labels.find((label) => label.name === labelConfig.name);\n    if (!existingLabel) {\n      existingLabel = labels.find((label) => label.description === description);\n    }\n    if (!existingLabel) {\n      if (labelKey === 'design/needs-review') {\n        existingLabel = labels.find(\n          (label) => label.name === 'needs-design-review',\n        );\n      }\n      if (labelKey === 'design/approved') {\n        existingLabel = labels.find(\n          (label) => label.name === 'design-reviewed',\n        );\n      }\n      if (labelKey === 'teams/ops') {\n        existingLabel = labels.find((label) => label.name === 'archi');\n      }\n      if (labelKey === 'merge/skip-ci') {\n        existingLabel = labels.find(\n          (label) => label.name === 'automerge/skip-ci',\n        );\n      }\n    }\n\n    if (!existingLabel) {\n      const result = await context.octokit.issues.createLabel(\n        context.repo({\n          name: labelConfig.name,\n          color: labelColor,\n          description,\n        }),\n      );\n      finalLabels[labelKey] = result.data;\n    } else if (\n      existingLabel.name !== labelConfig.name ||\n      existingLabel.color !== labelColor ||\n      existingLabel.description !== description\n    ) {\n      context.log.info(\n        {\n          current_name: existingLabel.name,\n          name: existingLabel.name !== labelConfig.name && labelConfig.name,\n          color: existingLabel.color !== labelColor && labelColor,\n          description: existingLabel.description !== description && description,\n        },\n        'Needs to update label',\n      );\n\n      const result = await context.octokit.issues.updateLabel(\n        context.repo({\n          name: existingLabel.name,\n          new_name: labelConfig.name,\n          color: labelColor,\n          description,\n        }),\n      );\n      finalLabels[labelKey] = result.data;\n    } else {\n      finalLabels[labelKey] = existingLabel;\n    }\n  }\n\n  return finalLabels;\n};\n","import { Lock } from 'lock';\nimport type { Context } from 'probot';\nimport type { Config } from '../accountConfigs';\nimport { accountConfigs, defaultConfig } from '../accountConfigs';\nimport type { GroupLabels } from '../accountConfigs/types';\nimport { autoMergeIfPossible } from '../events/pr-handlers/actions/autoMergeIfPossible';\nimport type {\n  PullRequestData,\n  PullRequestLabels,\n  PullRequestWithDecentData,\n} from '../events/pr-handlers/utils/PullRequestData';\nimport { getReviewflowPrContext } from '../events/pr-handlers/utils/createPullRequestContext';\nimport { fetchPr } from '../events/pr-handlers/utils/fetchPr';\nimport { ExcludesFalsy } from '../utils/Excludes';\nimport type { AppContext } from './AppContext';\nimport type { AccountContext } from './accountContext';\nimport { obtainAccountContext } from './accountContext';\nimport type { LabelResponse, LabelsRecord } from './initRepoLabels';\nimport { initRepoLabels } from './initRepoLabels';\nimport { getEmojiFromRepoDescription } from './utils';\n\nexport interface LockedMergePr {\n  id: number;\n  number: number;\n  branch: string;\n}\n\ninterface RepoContextWithoutTeamContext<GroupNames extends string> {\n  appContext: AppContext;\n  repoFullName: string;\n  repoEmbed: { id: number; name: string };\n  repoEmoji: string | undefined;\n  labels: LabelsRecord;\n  protectedLabelIds: readonly LabelResponse['id'][];\n  shouldIgnore: boolean;\n\n  hasNeedsReview: (labels: PullRequestLabels) => boolean;\n  hasRequestedReview: (labels: PullRequestLabels) => boolean;\n  hasChangesRequestedReview: (labels: PullRequestLabels) => boolean;\n  hasApprovesReview: (labels: PullRequestLabels) => boolean;\n  getNeedsReviewGroupNames: (labels: PullRequestLabels) => GroupNames[];\n  lockPullRequest: (\n    pullRequest: PullRequestData,\n    callback: () => Promise<void> | void,\n  ) => Promise<void>;\n\n  /** @deprecated */\n  lockPR: (\n    prId: string,\n    prNumber: number,\n    callback: () => Promise<void> | void,\n  ) => Promise<void>;\n\n  getMergeLockedPr: () => LockedMergePr;\n  addMergeLockPr: (pr: LockedMergePr) => void;\n  removePrFromAutomergeQueue: (\n    context: Context<any>,\n    prNumber: number,\n    reason: string,\n  ) => void;\n  reschedule: (context: Context<any>, pr: LockedMergePr) => void;\n  pushAutomergeQueue: (pr: LockedMergePr) => void;\n}\n\nexport type RepoContext<\n  GroupNames extends string = any\n> = AccountContext<GroupNames> & RepoContextWithoutTeamContext<GroupNames>;\n\nexport const shouldIgnoreRepo = (\n  repoName: string,\n  accountConfig: Config<any, any>,\n): boolean => {\n  const ignoreRepoRegexp =\n    accountConfig.ignoreRepoPattern &&\n    new RegExp(`^${accountConfig.ignoreRepoPattern}$`);\n\n  if (repoName === 'reviewflow-test') {\n    return process.env.REVIEWFLOW_NAME !== 'reviewflow-dev';\n  }\n\n  if (ignoreRepoRegexp) {\n    return ignoreRepoRegexp.test(repoName);\n  }\n\n  return false;\n};\n\nconst createGetReviewLabelIds = <GroupNames extends string>(\n  shouldIgnore: boolean,\n  config: Config<GroupNames>,\n  reviewGroupNames: GroupNames[],\n  labels: LabelsRecord,\n): ((labelKey: GroupLabels) => number[]) => {\n  if (shouldIgnore) return (labelKey: GroupLabels): number[] => [];\n  return (labelKey: GroupLabels): number[] =>\n    reviewGroupNames\n      .map((key) => config.labels.review[key][labelKey])\n      .filter(Boolean)\n      .map((name) => labels[name].id);\n};\n\nasync function initRepoContext<GroupNames extends string>(\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<RepoContext<GroupNames>> {\n  const {\n    id,\n    name,\n    full_name: fullName,\n    owner: org,\n    description,\n  } = context.payload.repository;\n  const repoEmoji = getEmojiFromRepoDescription(description);\n\n  const accountContext = await obtainAccountContext(\n    appContext,\n    context,\n    config,\n    org,\n  );\n  const repoContext = Object.create(accountContext);\n\n  const shouldIgnore = shouldIgnoreRepo(name, config);\n\n  const labels = shouldIgnore ? {} : await initRepoLabels(context, config);\n\n  const reviewGroupNames = Object.keys(config.groups) as GroupNames[];\n  const getReviewLabelIds = createGetReviewLabelIds(\n    shouldIgnore,\n    config,\n    reviewGroupNames,\n    labels,\n  );\n\n  const needsReviewLabelIds = getReviewLabelIds('needsReview');\n  const requestedReviewLabelIds = getReviewLabelIds('requested');\n  const changesRequestedLabelIds = getReviewLabelIds('changesRequested');\n  const approvedReviewLabelIds = getReviewLabelIds('approved');\n\n  const protectedLabelIds = [\n    ...requestedReviewLabelIds,\n    ...changesRequestedLabelIds,\n    ...approvedReviewLabelIds,\n  ];\n\n  const labelIdToGroupName = new Map<LabelResponse['id'], GroupNames>();\n  if (!shouldIgnore) {\n    reviewGroupNames.forEach((key) => {\n      const reviewGroupLabels = config.labels.review[key] as any;\n      Object.keys(reviewGroupLabels).forEach((labelKey: string) => {\n        labelIdToGroupName.set(labels[reviewGroupLabels[labelKey]].id, key);\n      });\n    });\n  }\n\n  // const updateStatusCheck = (context, reviewGroup, statusInfo) => {};\n\n  const hasNeedsReview = (labels: PullRequestLabels): boolean =>\n    labels.some((label) => label.id && needsReviewLabelIds.includes(label.id));\n  const hasRequestedReview = (labels: PullRequestLabels): boolean =>\n    labels.some(\n      (label) => label.id && requestedReviewLabelIds.includes(label.id),\n    );\n  const hasChangesRequestedReview = (labels: PullRequestLabels): boolean =>\n    labels.some(\n      (label) => label.id && changesRequestedLabelIds.includes(label.id),\n    );\n  const hasApprovesReview = (labels: PullRequestLabels): boolean =>\n    labels.some(\n      (label) => label.id && approvedReviewLabelIds.includes(label.id),\n    );\n\n  const getNeedsReviewGroupNames = (labels: PullRequestLabels): GroupNames[] =>\n    labels\n      .filter((label) => label.id && needsReviewLabelIds.includes(label.id))\n      .map((label) => labelIdToGroupName.get(label.id!))\n      .filter(ExcludesFalsy);\n\n  const lock = Lock();\n  let lockMergePr: LockedMergePr | undefined;\n  let automergeQueue: LockedMergePr[] = [];\n\n  const lockPR = (\n    prOrPrIssueId: string,\n    prNumber: number,\n    callback: () => Promise<void> | void,\n  ): Promise<void> =>\n    new Promise((resolve, reject) => {\n      const logInfos = {\n        repo: fullName,\n        prOrPrIssueId,\n        prNumber,\n      };\n      context.log.debug(logInfos, 'lock: try to lock pr');\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      lock(String(prNumber), async (createReleaseCallback) => {\n        const release = createReleaseCallback(() => {});\n        context.log.info(logInfos, 'lock: lock pr acquired');\n        try {\n          await callback();\n        } catch (err) {\n          context.log.info(logInfos, 'lock: release pr (with error)');\n          release();\n          reject(err);\n          return;\n        }\n        context.log.info(logInfos, 'lock: release pr');\n        release();\n        resolve();\n      });\n    });\n\n  const lockPullRequest = (\n    pullRequest: PullRequestWithDecentData,\n    callback: () => Promise<void> | void,\n  ): Promise<void> => {\n    return lockPR(String(pullRequest.id), pullRequest.number, callback);\n  };\n\n  const reschedule = (context: Context<any>, pr: LockedMergePr): void => {\n    if (!pr) throw new Error('Cannot reschedule undefined');\n    context.log.info(pr, 'reschedule');\n    setTimeout(() => {\n      lockPR('reschedule', -1, () => {\n        return lockPR(String(pr.id), pr.number, async () => {\n          const [pullRequest, reviewflowPrContext] = await Promise.all([\n            fetchPr(context, pr.number),\n            getReviewflowPrContext(pr.number, context, repoContext),\n          ]);\n          await autoMergeIfPossible(\n            pullRequest,\n            context,\n            repoContext,\n            reviewflowPrContext,\n          );\n        });\n      });\n    }, 10_000);\n  };\n\n  return Object.assign(repoContext, {\n    appContext,\n    labels,\n    repoFullName: fullName,\n    repoEmbed: { id, name },\n    repoEmoji,\n    protectedLabelIds,\n    shouldIgnore,\n    hasNeedsReview,\n    hasRequestedReview,\n    hasChangesRequestedReview,\n    hasApprovesReview,\n    getNeedsReviewGroupNames,\n\n    getMergeLockedPr: () => lockMergePr,\n    addMergeLockPr: (pr: LockedMergePr): void => {\n      // eslint-disable-next-line no-console\n      console.log('merge lock: lock', {\n        repo: fullName,\n        pr,\n      });\n      if (lockMergePr && String(lockMergePr.number) === String(pr.number)) {\n        return;\n      }\n      if (lockMergePr) throw new Error('Already have lock');\n      lockMergePr = pr;\n    },\n    removePrFromAutomergeQueue: (\n      context,\n      prNumber: number | string,\n      reason: string,\n    ): void => {\n      if (lockMergePr && String(lockMergePr.number) === String(prNumber)) {\n        lockMergePr = automergeQueue.shift();\n        context.log(`merge lock: remove ${fullName}#${prNumber}: ${reason}`);\n        if (lockMergePr) {\n          context.log(lockMergePr, `merge lock: next ${fullName}`);\n        } else {\n          context.log(`merge lock: nothing next ${fullName}`);\n        }\n        if (lockMergePr) {\n          reschedule(context, lockMergePr);\n        }\n      } else {\n        const previousLength = automergeQueue.length;\n        automergeQueue = automergeQueue.filter(\n          (value) => String(value.number) !== String(prNumber),\n        );\n        if (automergeQueue.length !== previousLength) {\n          context.log(`merge lock: remove ${fullName}#${prNumber}: ${reason}`);\n        }\n      }\n    },\n    pushAutomergeQueue: (pr: LockedMergePr): void => {\n      context.log(\n        {\n          repo: fullName,\n          pr,\n          lockMergePr,\n          automergeQueue,\n        },\n        'merge lock: push queue',\n      );\n      if (!automergeQueue.some((p) => p.number === pr.number)) {\n        automergeQueue.push(pr);\n      }\n    },\n    reschedule,\n\n    lockPR,\n    lockPullRequest,\n  } as RepoContextWithoutTeamContext<GroupNames>);\n}\n\nconst repoContextsPromise = new Map<number, Promise<RepoContext>>();\nconst repoContexts = new Map<number, RepoContext>();\n\nexport const obtainRepoContext = (\n  appContext: AppContext,\n  context: Context<any>,\n): Promise<RepoContext> | RepoContext | null => {\n  const repo = context.payload.repository;\n  const owner = repo.owner;\n  const key = repo.id;\n\n  const existingRepoContext = repoContexts.get(key);\n  if (existingRepoContext) return existingRepoContext;\n\n  const existingPromise = repoContextsPromise.get(key);\n  if (existingPromise) return Promise.resolve(existingPromise);\n\n  let accountConfig = accountConfigs[owner.login];\n\n  if (!accountConfig) {\n    context.log(`using default config for ${owner.login}`);\n    accountConfig = defaultConfig as Config<any, any>;\n  }\n\n  const promise = initRepoContext(appContext, context, accountConfig);\n  repoContextsPromise.set(key, promise);\n\n  return promise.then((repoContext) => {\n    repoContextsPromise.delete(key);\n    repoContexts.set(key, repoContext);\n    return repoContext;\n  });\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { AppContext } from '../../../context/AppContext';\nimport type { RepoContext } from '../../../context/repoContext';\nimport { obtainRepoContext } from '../../../context/repoContext';\n\nexport const createRepoHandler = <\n  T extends { repository: EventPayloads.PayloadRepository }\n>(\n  appContext: AppContext,\n  callback: (\n    context: Context<T>,\n    repoContext: RepoContext,\n  ) => Promise<void> | void,\n): ((context: Context<T>) => Promise<void>) => {\n  return async (context): Promise<void> => {\n    const repoContext = await obtainRepoContext(appContext, context);\n    if (!repoContext) return;\n\n    return callback(context, repoContext);\n  };\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { AppContext } from '../../../context/AppContext';\nimport type { RepoContext, LockedMergePr } from '../../../context/repoContext';\nimport { createRepoHandler } from '../../repository-handlers/utils/createRepoHandler';\nimport type {\n  PullRequestData,\n  PullRequestFromWebhook,\n} from './PullRequestData';\nimport type {\n  CreatePrContextOptions,\n  ReviewflowPrContext,\n} from './createPullRequestContext';\nimport { getReviewflowPrContext } from './createPullRequestContext';\n\ntype OnCallback<T> = (context: Context<T>) => Promise<void>;\n\nexport type CallbackWithPRAndRepoContext<T extends PullRequestData> = (\n  pullRequest: T,\n  repoContext: RepoContext,\n) => void | Promise<void>;\n\nexport const createPullRequestHandler = <\n  T extends\n    | EventPayloads.WebhookPayloadPullRequest\n    | EventPayloads.WebhookPayloadPullRequestReview\n    | EventPayloads.WebhookPayloadPullRequestReviewComment\n    | EventPayloads.WebhookPayloadIssueComment\n    | EventPayloads.WebhookPayloadPullRequestReviewComment,\n  U extends PullRequestFromWebhook,\n  GroupNames extends string = string\n>(\n  appContext: AppContext,\n  getPullRequestInPayload: (\n    payload: Context<T>['payload'],\n    context: Context<T>,\n    repoContext: RepoContext<GroupNames>,\n  ) => U | null,\n  callbackPr: (\n    pullRequest: U,\n    context: Context<T>,\n    repoContext: RepoContext<GroupNames>,\n    reviewflowPrContext: ReviewflowPrContext | null,\n  ) => void | Promise<void>,\n  callbackBeforeLock?: (\n    pullRequest: U,\n    context: Context<T>,\n    repoContext: RepoContext<GroupNames>,\n  ) => CreatePrContextOptions,\n): OnCallback<T> => {\n  return createRepoHandler(appContext, async (context, repoContext) => {\n    const pullRequest: U | null = getPullRequestInPayload(\n      context.payload,\n      context,\n      repoContext,\n    );\n    if (pullRequest === null) return;\n    const options = callbackBeforeLock\n      ? callbackBeforeLock(pullRequest, context, repoContext)\n      : {};\n\n    await repoContext.lockPullRequest(pullRequest, async () => {\n      /*\n       * When repo are ignored, only slack notifications are sent.\n       * PR is not linted, commented, nor auto merged.\n       */\n      const reviewflowPrContext = repoContext.shouldIgnore\n        ? null\n        : await getReviewflowPrContext(\n            pullRequest.number,\n            context,\n            repoContext,\n            options.reviewflowCommentPromise,\n          );\n\n      return callbackPr(pullRequest, context, repoContext, reviewflowPrContext);\n    });\n  });\n};\n\nexport const createPullRequestsHandler = <\n  T extends { repository: EventPayloads.PayloadRepository },\n  U extends PullRequestFromWebhook | LockedMergePr,\n  GroupNames extends string\n>(\n  appContext: AppContext,\n  getPrs: (\n    payload: Context<T>['payload'],\n    repoContext: RepoContext<GroupNames>,\n  ) => U[],\n  callbackPr: (\n    pullRequest: U,\n    context: Context<T>,\n    repoContext: RepoContext<GroupNames>,\n  ) => void | Promise<void>,\n): OnCallback<T> => {\n  return createRepoHandler(appContext, async (context, repoContext) => {\n    const prs = getPrs(context.payload, repoContext);\n    if (prs.length === 0) return;\n\n    await Promise.all(\n      prs.map((pr) =>\n        repoContext.lockPR(String(pr.id), pr.number, async () => {\n          return callbackPr(pr, context, repoContext);\n        }),\n      ),\n    );\n  });\n};\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { getReviewflowPrContext } from './utils/createPullRequestContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function checkrunCompleted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'check_run.completed',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext) => {\n        if (repoContext.shouldIgnore) return [];\n        return payload.check_run.pull_requests;\n      },\n      async (pullRequest, context, repoContext) => {\n        const [updatedPr, reviewflowPrContext] = await Promise.all([\n          fetchPr(context, pullRequest.number),\n          getReviewflowPrContext(pullRequest.number, context, repoContext),\n        ]);\n\n        await autoMergeIfPossible(\n          updatedPr,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { getReviewflowPrContext } from './utils/createPullRequestContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function checksuiteCompleted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'check_suite.completed',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext) => {\n        if (repoContext.shouldIgnore) return [];\n        return payload.check_suite.pull_requests;\n      },\n      async (pullRequest, context, repoContext) => {\n        const [updatedPr, reviewflowPrContext] = await Promise.all([\n          fetchPr(context, pullRequest.number),\n          getReviewflowPrContext(pullRequest.number, context, repoContext),\n        ]);\n\n        await autoMergeIfPossible(\n          updatedPr,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { PullRequestWithDecentData } from 'events/pr-handlers/utils/PullRequestData';\nimport type { RepoContext } from '../context/repoContext';\n\nexport const createLink = (url: string, text: string): string => {\n  return `<${url}|${text}>`;\n};\n\nexport const createPrLink = (\n  pr: { html_url: string; number: number },\n  repoContext: RepoContext,\n): string => {\n  return createLink(\n    pr.html_url,\n    `${repoContext.repoEmoji ? `${repoContext.repoEmoji} ` : ''}${\n      repoContext.repoFullName\n    }#${pr.number}`,\n  );\n};\n\nexport const createOwnerPart = (\n  ownerMention: string,\n  pullRequest: PullRequestWithDecentData,\n  sendTo: AccountInfo,\n): string => {\n  const owner = pullRequest.user;\n\n  if (owner && owner.id === sendTo.id) return 'your PR';\n\n  const isAssignedTo: boolean =\n    !!pullRequest.assignees &&\n    pullRequest.assignees.some((a: any) => a && a.id === sendTo.id);\n\n  return `${ownerMention}'s PR${isAssignedTo ? \" you're assigned to\" : ''}`;\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\n\nexport default async function createStatus<\n  T extends { repository: EventPayloads.PayloadRepository }\n>(\n  context: Context<T>,\n  name: string,\n  sha: string,\n  type: 'failure' | 'success',\n  description: string,\n  url?: string,\n): Promise<void> {\n  if (description.length > 140) {\n    context.log('description too long', { description });\n    description = description.slice(0, 140);\n  }\n  await context.octokit.repos.createCommitStatus(\n    context.repo({\n      context:\n        name === ''\n          ? process.env.REVIEWFLOW_NAME\n          : `${process.env.REVIEWFLOW_NAME}/${name}`,\n      sha,\n      state: type,\n      description,\n      target_url: url,\n    }),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\nimport type {\n  PullRequestLabels,\n  PullRequestWithDecentData,\n  PullRequestWithDecentDataFromWebhook,\n} from '../utils/PullRequestData';\nimport createStatus from './utils/createStatus';\n\nconst addStatusCheck = async function <\n  T extends { repository: EventPayloads.PayloadRepository }\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<T>,\n  { state, description }: { state: 'failure' | 'success'; description: string },\n  previousSha?: string,\n): Promise<void> {\n  const hasPrCheck = (\n    await context.octokit.checks.listForRef(\n      context.repo({\n        ref: pullRequest.head.sha,\n      }),\n    )\n  ).data.check_runs.find((check) => check.name === process.env.REVIEWFLOW_NAME);\n\n  context.log.debug({ hasPrCheck, state, description }, 'add status check');\n\n  if (hasPrCheck) {\n    await context.octokit.checks.create(\n      context.repo({\n        name: process.env.REVIEWFLOW_NAME!,\n        head_sha: pullRequest.head.sha,\n        started_at: pullRequest.created_at,\n        status: 'completed',\n        conclusion: state,\n        completed_at: new Date().toISOString(),\n        output: {\n          title: description,\n          summary: '',\n        },\n      }),\n    );\n  } else if (previousSha && state === 'failure') {\n    await Promise.all([\n      createStatus(\n        context,\n        '',\n        previousSha,\n        'success',\n        'New commits have been pushed',\n      ),\n      createStatus(context, '', pullRequest.head.sha, state, description),\n    ]);\n  } else {\n    await createStatus(context, '', pullRequest.head.sha, state, description);\n  }\n};\n\nexport const updateStatusCheckFromLabels = <\n  T extends { repository: EventPayloads.PayloadRepository }\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<T>,\n  repoContext: RepoContext,\n  labels: PullRequestLabels = pullRequest.labels || [],\n  previousSha?: string,\n): Promise<void> => {\n  context.log.debug(\n    {\n      labels: labels.map((l) => l?.name),\n      hasNeedsReview: repoContext.hasNeedsReview(labels),\n      hasApprovesReview: repoContext.hasApprovesReview(labels),\n    },\n    'updateStatusCheckFromLabels',\n  );\n\n  const createFailedStatusCheck = (description: string): Promise<void> =>\n    addStatusCheck(\n      pullRequest,\n      context,\n      {\n        state: 'failure',\n        description,\n      },\n      previousSha,\n    );\n\n  if (\n    pullRequest.requested_reviewers &&\n    pullRequest.requested_reviewers.length > 0\n  ) {\n    return createFailedStatusCheck(\n      `Awaiting review from: ${(pullRequest.requested_reviewers as PullRequestWithDecentDataFromWebhook['requested_reviewers'])\n        .filter(ExcludesFalsy)\n        .map((rr) => rr.login)\n        .join(', ')}`,\n    );\n  }\n\n  if (pullRequest.requested_teams && pullRequest.requested_teams.length > 0) {\n    return createFailedStatusCheck(\n      `Awaiting review from: ${(pullRequest.requested_teams as PullRequestWithDecentDataFromWebhook['requested_teams'])\n        .filter(ExcludesFalsy)\n        .map((rt) => rt.name)\n        .join(', ')}`,\n    );\n  }\n\n  if (repoContext.hasChangesRequestedReview(labels)) {\n    return createFailedStatusCheck(\n      'Changes requested ! Push commits or discuss changes then re-request a review.',\n    );\n  }\n\n  const needsReviewGroupNames = repoContext.getNeedsReviewGroupNames(labels);\n\n  if (needsReviewGroupNames.length > 0) {\n    return createFailedStatusCheck(\n      `Awaiting review from: ${needsReviewGroupNames.join(\n        ', ',\n      )}. Perhaps request someone ?`,\n    );\n  }\n\n  if (!repoContext.hasApprovesReview(labels)) {\n    if (repoContext.config.requiresReviewRequest) {\n      return createFailedStatusCheck(\n        'Awaiting review... Perhaps request someone ?',\n      );\n    }\n  }\n\n  // if (\n  //   repoContext.config.requiresReviewRequest &&\n  //   !repoContext.hasRequestedReview(labels)\n  // ) {\n  //   return  createFailedStatusCheck(\n  //     context,\n  //     pr,\n  //     'You need to request someone to review the PR',\n  //   );\n  //   return;\n  // }\n  // return  createInProgressStatusCheck(context);\n  // } else if (repoContext.hasApprovesReview(labels)) {\n  return addStatusCheck(\n    pullRequest,\n    context,\n    {\n      state: 'success',\n      description: '✓ PR ready to merge !',\n    },\n    previousSha,\n  );\n  // }\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { GroupLabels } from '../../../accountConfigs/types';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\nimport type {\n  PullRequestLabels,\n  PullRequestWithDecentData,\n} from '../utils/PullRequestData';\nimport { updateStatusCheckFromLabels } from './updateStatusCheckFromLabels';\n\nexport const updateReviewStatus = async <\n  E extends { repository: EventPayloads.PayloadRepository },\n  GroupNames extends string = any\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewGroup: GroupNames,\n  {\n    add: labelsToAdd,\n    remove: labelsToRemove,\n  }: {\n    add?: (GroupLabels | false | undefined)[];\n    remove?: (GroupLabels | false | undefined)[];\n  },\n): Promise<PullRequestLabels> => {\n  context.log.debug(\n    {\n      reviewGroup,\n      labelsToAdd,\n      labelsToRemove,\n    },\n    'updateReviewStatus',\n  );\n\n  let prLabels: PullRequestLabels = pullRequest.labels || [];\n  if (!reviewGroup) return prLabels;\n\n  const newLabelNames = new Set<string>(\n    prLabels.map((label) => label.name).filter(ExcludesFalsy),\n  );\n\n  const toAdd = new Set<GroupLabels | string>();\n  const toAddNames = new Set<string>();\n  const toDelete = new Set<GroupLabels>();\n  const toDeleteNames = new Set<string>();\n  const labels = repoContext.labels;\n\n  const getLabelFromKey = (\n    key: GroupLabels,\n  ): undefined | PullRequestLabels[number] => {\n    const reviewConfig = repoContext.config.labels.review[reviewGroup];\n    if (!reviewConfig) return undefined;\n\n    return reviewConfig[key] && labels[reviewConfig[key]]\n      ? labels[reviewConfig[key]]\n      : undefined;\n  };\n\n  if (labelsToAdd) {\n    labelsToAdd.forEach((key) => {\n      if (!key) return;\n      const label = getLabelFromKey(key);\n      if (\n        !label ||\n        !label.name ||\n        prLabels.some((prLabel) => prLabel.id === label.id)\n      ) {\n        return;\n      }\n      newLabelNames.add(label.name);\n      toAdd.add(key);\n      toAddNames.add(label.name);\n    });\n  }\n\n  if (labelsToRemove) {\n    labelsToRemove.forEach((key) => {\n      if (!key) return;\n      const label = getLabelFromKey(key);\n      if (!label) return;\n      const existing = prLabels.find((prLabel) => prLabel.id === label.id);\n      if (existing && existing.name) {\n        newLabelNames.delete(existing.name);\n        toDelete.add(key);\n        toDeleteNames.add(existing.name);\n      }\n    });\n  }\n\n  // TODO move that elsewhere\n  if (pullRequest.user) {\n    repoContext.getTeamsForLogin(pullRequest.user.login).forEach((teamName) => {\n      const team = repoContext.config.teams[teamName];\n      if (team.labels) {\n        team.labels.forEach((labelKey) => {\n          const label = repoContext.labels[labelKey];\n          if (label && !prLabels.some((prLabel) => prLabel.id === label.id)) {\n            newLabelNames.add(label.name);\n            toAdd.add(labelKey);\n            toAddNames.add(label.name);\n          }\n        });\n      }\n    });\n  }\n\n  // if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return;\n\n  if (toAdd.size !== 0 || toDelete.size !== 0) {\n    if (toDelete.size === 0 || toDelete.size < 4) {\n      context.log.debug(\n        {\n          reviewGroup,\n          toAdd: [...toAdd],\n          toDelete: [...toDelete],\n          toAddNames: [...toAddNames],\n          toDeleteNames: [...toDeleteNames],\n        },\n        'updateReviewStatus',\n      );\n\n      if (toAdd.size !== 0) {\n        const result = await context.octokit.issues.addLabels(\n          context.issue({\n            labels: [...toAddNames],\n          }),\n        );\n        prLabels = result.data;\n      }\n\n      if (toDelete.size !== 0) {\n        for (const toDeleteName of [...toDeleteNames]) {\n          try {\n            const result = await context.octokit.issues.removeLabel(\n              context.issue({\n                name: toDeleteName,\n              }),\n            );\n            prLabels = result.data;\n          } catch (err) {\n            context.log.warn(\n              {\n                err: err?.message,\n              },\n              'error removing label',\n            );\n          }\n        }\n      }\n    } else {\n      const newLabelNamesArray = [...newLabelNames];\n\n      context.log.debug(\n        {\n          reviewGroup,\n          toAdd: [...toAdd],\n          toDelete: [...toDelete],\n          oldLabels: prLabels.map((l) => l.name),\n          newLabelNames: newLabelNamesArray,\n        },\n        'updateReviewStatus',\n      );\n\n      const result = await context.octokit.issues.setLabels(\n        context.issue({\n          labels: newLabelNamesArray as string[] & { name: string }[],\n        }),\n      );\n      prLabels = result.data;\n    }\n  }\n\n  // if (toAdd.has('needsReview')) {\n  //   createInProgressStatusCheck(context);\n  // } else if (\n  //   toDelete.has('needsReview') ||\n  //   (prLabels.length === 0 && toAdd.size === 1 && toAdd.has('approved'))\n  // ) {\n  await updateStatusCheckFromLabels(\n    pullRequest,\n    context,\n    repoContext,\n    prLabels,\n  );\n  // }\n\n  return prLabels;\n};\n","import type { Context } from 'probot';\nimport type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { RepoContext } from '../../../context/repoContext';\nimport { getKeys } from '../../../context/utils';\n\ntype ReviewState = 'CHANGES_REQUESTED' | 'APPROVED' | 'DISMISSED';\n\ninterface ReviewStates {\n  approved: number;\n  changesRequested: number;\n  dismissed: number;\n}\n\nexport type Reviewer = AccountInfo;\n\nexport const getReviewersAndReviewStates = async <GroupNames extends string>(\n  context: Context,\n  repoContext: RepoContext<GroupNames>,\n): Promise<{\n  reviewers: Reviewer[];\n  reviewStates: Record<GroupNames, ReviewStates>;\n}> => {\n  const userIds = new Set<number>();\n  const reviewers: Reviewer[] = [];\n  const reviewStatesByUser = new Map<number, ReviewState>();\n\n  await context.octokit.paginate(\n    context.octokit.pulls.listReviews,\n    context.pullRequest({ page: undefined }),\n    ({ data: reviews }) => {\n      reviews.forEach((review) => {\n        if (!review.user) return;\n        if (!userIds.has(review.user.id)) {\n          userIds.add(review.user.id);\n          reviewers.push({\n            id: review.user.id,\n            login: review.user.login,\n            type: review.user.type,\n          });\n        }\n        const state = review.state.toUpperCase();\n        if (state !== 'COMMENTED') {\n          reviewStatesByUser.set(review.user.id, state as ReviewState);\n        }\n      });\n\n      return [];\n    },\n  );\n\n  const reviewStates: Record<GroupNames, ReviewStates> = {} as Record<\n    GroupNames,\n    ReviewStates\n  >;\n\n  getKeys(repoContext.config.groups).forEach((groupName) => {\n    reviewStates[groupName] = {\n      approved: 0,\n      changesRequested: 0,\n      dismissed: 0,\n    };\n  });\n\n  reviewers.forEach((reviewer) => {\n    const group = repoContext.getReviewerGroup(reviewer.login);\n    if (group) {\n      const state = reviewStatesByUser.get(reviewer.id);\n      switch (state) {\n        case 'APPROVED':\n          reviewStates[group].approved++;\n          break;\n        case 'CHANGES_REQUESTED':\n          reviewStates[group].changesRequested++;\n          break;\n        case 'DISMISSED':\n          reviewStates[group].dismissed++;\n          break;\n      }\n    }\n  });\n\n  return { reviewers, reviewStates };\n};\n","import type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { PullRequestWithDecentDataFromWebhook } from './PullRequestData';\nimport type { Reviewer } from './getReviewersAndReviewStates';\n\nexport interface RequestedReviewers extends AccountInfo {\n  isRequestedByName: boolean;\n  requestedByTeams: string[];\n}\n\nexport function getRolesFromPullRequestAndReviewers(\n  pullRequest: PullRequestWithDecentDataFromWebhook,\n  reviewers: Reviewer[],\n): {\n  owner: PullRequestWithDecentDataFromWebhook['user'];\n  assignees: PullRequestWithDecentDataFromWebhook['assignees'];\n  reviewers: Reviewer[];\n  requestedReviewers: RequestedReviewers[];\n  followers: AccountInfo[];\n} {\n  const owner = pullRequest.user;\n  const assignees = pullRequest.assignees;\n  const assigneeIds = assignees.map((a) => a.id);\n\n  const followers = reviewers.filter((user) => !assigneeIds.includes(user.id));\n  const requestedReviewers: RequestedReviewers[] = pullRequest.requested_reviewers.map(\n    (rr) => ({\n      ...rr,\n      isRequestedByName: true,\n      requestedByTeams: [],\n    }),\n  );\n\n  if (pullRequest.requested_teams) {\n    // TODO\n    // requestedReviewers.push ...\n  }\n\n  if (requestedReviewers) {\n    followers.push(\n      ...requestedReviewers.filter((rr) => {\n        return (\n          !followers.some((f) => f.id === rr.id) && !assigneeIds.includes(rr.id)\n        );\n      }),\n    );\n  }\n\n  return {\n    owner,\n    assignees,\n    reviewers,\n    requestedReviewers,\n    followers,\n  };\n}\n","import type { Probot } from 'probot';\nimport type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { parseOptions } from './actions/utils/body/parseBody';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { getRolesFromPullRequestAndReviewers } from './utils/getRolesFromPullRequestAndReviewers';\n\nexport default function closed(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.closed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (pullRequest, context, repoContext, reviewflowPrContext) => {\n        /* if repo is not ignored */\n        if (reviewflowPrContext) {\n          /* update status, update automerge queue, delete branch */\n          const repo = context.payload.repository;\n\n          if (pullRequest.merged) {\n            const isNotFork = pullRequest.head.repo.id === repo.id;\n            const options = parseOptions(\n              reviewflowPrContext.commentBody,\n              repoContext.config.prDefaultOptions,\n            );\n\n            await Promise.all([\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pullRequest.number,\n                'pr closed',\n              ),\n              isNotFork && options.deleteAfterMerge\n                ? context.octokit.git\n                    .deleteRef(\n                      context.repo({ ref: `heads/${pullRequest.head.ref}` }),\n                    )\n                    .catch(() => {})\n                : undefined,\n            ]);\n          } else {\n            await Promise.all([\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pullRequest.number,\n                'pr closed',\n              ),\n              updateReviewStatus(pullRequest, context, repoContext, 'dev', {\n                remove: ['needsReview'],\n              }),\n            ]);\n          }\n        }\n\n        /* update slack home */\n        if (pullRequest.requested_reviewers) {\n          pullRequest.requested_reviewers.forEach((requestedReviewer) => {\n            repoContext.slack.updateHome(requestedReviewer.login);\n          });\n        }\n\n        if (pullRequest.requested_teams) {\n          await Promise.all(\n            pullRequest.requested_teams.map(async (team) => {\n              const members = await repoContext.getMembersForTeam(team.id);\n              members.forEach((member) => {\n                repoContext.slack.updateHome(member.login);\n              });\n            }),\n          );\n        }\n\n        if (pullRequest.assignees) {\n          pullRequest.assignees.forEach((assignee) => {\n            repoContext.slack.updateHome(assignee.login);\n          });\n        }\n\n        /* send notifications to assignees and followers */\n        const { reviewers } = await getReviewersAndReviewStates(\n          context,\n          repoContext,\n        );\n        const {\n          owner,\n          assignees,\n          followers,\n        } = getRolesFromPullRequestAndReviewers(pullRequest, reviewers);\n\n        const senderMention = repoContext.slack.mention(\n          context.payload.sender.login,\n        );\n        const ownerMention = repoContext.slack.mention(owner.login);\n        const prLink = slackUtils.createPrLink(pullRequest, repoContext);\n\n        const createMessage = (to: AccountInfo): string => {\n          const ownerPart = slackUtils.createOwnerPart(\n            ownerMention,\n            pullRequest,\n            to,\n          );\n\n          return `${\n            pullRequest.merged\n              ? `:rocket: ${senderMention} merged`\n              : `:wastebasket: ${senderMention} closed`\n          } ${ownerPart} ${prLink}\\n> ${pullRequest.title}`;\n        };\n\n        assignees.map((assignee) => {\n          if (context.payload.sender.id === assignee.id) return;\n          return repoContext.slack.postMessage(\n            'pr-lifecycle',\n            assignee.id,\n            assignee.login,\n            {\n              text: createMessage(assignee),\n            },\n          );\n        });\n\n        followers.map((follower) => {\n          if (context.payload.sender.id === follower.id) return;\n          return repoContext.slack.postMessage(\n            'pr-lifecycle-follow',\n            follower.id,\n            follower.login,\n            {\n              text: createMessage(follower),\n            },\n          );\n        });\n      },\n    ),\n  );\n}\n","import type { KnownBlock } from '@slack/web-api';\nimport type { SlackMessage } from '../../../context/SlackMessage';\n\nexport const createMrkdwnSectionBlock = (text: string): KnownBlock => ({\n  type: 'section',\n  text: {\n    type: 'mrkdwn',\n    text,\n  },\n});\n\nexport const createSlackMessageWithSecondaryBlock = (\n  message: string,\n  secondaryBlockText?: string | null,\n): SlackMessage => {\n  return {\n    text: message,\n    blocks: [\n      {\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: message,\n        },\n      },\n    ],\n    secondaryBlocks: !secondaryBlockText\n      ? undefined\n      : [createMrkdwnSectionBlock(secondaryBlockText)],\n  };\n};\n","import type { EventPayloads } from '@octokit/webhooks';\n\ntype WebhookPr =\n  | EventPayloads.WebhookPayloadPullRequest['pull_request']\n  | EventPayloads.WebhookPayloadPullRequestReviewPullRequest;\n\ntype PullRequestHandlerAllowedPayloads =\n  | {\n      repository: EventPayloads.PayloadRepository;\n      pull_request: WebhookPr;\n    }\n  | {\n      repository: EventPayloads.PayloadRepository;\n      issue: EventPayloads.WebhookPayloadIssueCommentIssue;\n    };\n\nexport type PullRequestFromPayload<\n  T extends PullRequestHandlerAllowedPayloads\n> = T extends { pull_request: WebhookPr }\n  ? T['pull_request']\n  : T extends { issue: EventPayloads.WebhookPayloadIssueCommentIssue }\n  ? T['issue'] /* & T['issue']['pull_request'] */\n  : never;\n\n/** deprecated */\nexport const getPullRequestFromPayload = <\n  T extends PullRequestHandlerAllowedPayloads\n>(\n  payload: T,\n): PullRequestFromPayload<T> => {\n  const pullRequest: WebhookPr = (payload as any).pull_request;\n  if (pullRequest) {\n    return pullRequest as PullRequestFromPayload<T>;\n  }\n\n  const issue = (payload as any).issue;\n  if (issue?.pull_request) {\n    return {\n      ...issue,\n      ...issue.pull_request,\n    };\n  }\n\n  throw new Error('No pull_request in payload');\n};\n","import issueParser from 'issue-parser';\n\nconst parse = issueParser('github', { actions: {}, issuePrefixes: [] });\n\nexport const parseMentions = (body: string): readonly string[] => {\n  return parse(body).mentions.map((m) => m.user);\n};\n","import slackifyMarkdown from 'slackify-markdown';\n\nexport const slackifyCommentBody = (\n  body: string,\n  multipleLines: boolean,\n): string => {\n  return slackifyMarkdown(\n    body\n      .replace('```suggestion', '_Suggested change:_\\n```suggestion')\n      .replace(\n        '```suggestion\\r\\n```',\n        `_Suggestion to remove line${multipleLines ? 's' : ''}._\\n`,\n      ),\n  );\n};\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot, Context } from 'probot';\nimport type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { AppContext } from '../../context/AppContext';\nimport type { SlackMessage } from '../../context/SlackMessage';\nimport type { PostSlackMessageResult } from '../../context/TeamSlack';\nimport type { AccountEmbed } from '../../mongo';\nimport * as slackUtils from '../../slack/utils';\nimport { ExcludesFalsy, ExcludesNullish } from '../../utils/Excludes';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { createSlackMessageWithSecondaryBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport { fetchPr } from './utils/fetchPr';\nimport type { PullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { getPullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { checkIfUserIsBot, checkIfIsThisBot } from './utils/isBotUser';\nimport { parseMentions } from './utils/parseMentions';\nimport { slackifyCommentBody } from './utils/slackifyCommentBody';\n\nconst getDiscussion = async (\n  context: Context,\n  comment: any,\n): Promise<\n  RestEndpointMethodTypes['pulls']['listReviewComments']['response']['data']\n> => {\n  if (!comment.in_reply_to_id) return [comment];\n  return context.octokit.paginate(\n    context.octokit.pulls.listReviewComments,\n    context.pullRequest() as any,\n    ({ data }) => {\n      return data.filter(\n        (c) =>\n          c.in_reply_to_id === comment.in_reply_to_id ||\n          c.id === comment.in_reply_to_id,\n      );\n    },\n  );\n};\n\nconst getMentions = (\n  discussion: RestEndpointMethodTypes['pulls']['listReviewComments']['response']['data'],\n): string[] => {\n  const mentions = new Set<string>();\n\n  discussion.forEach((c) => {\n    parseMentions(c.body).forEach((m) => mentions.add(m));\n  });\n\n  return [...mentions];\n};\n\nconst getUsersInThread = (\n  discussion: RestEndpointMethodTypes['pulls']['listReviewComments']['response']['data'],\n): { id: number; login: string }[] => {\n  const userIds = new Set<number>();\n  const users: { id: number; login: string }[] = [];\n\n  discussion.forEach((c) => {\n    if (!c.user || userIds.has(c.user.id)) return;\n    userIds.add(c.user.id);\n    users.push({ id: c.user.id, login: c.user.login });\n  });\n\n  return users;\n};\n\nexport default function prCommentCreated(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  const saveInDb = async (\n    type: 'review-comment' | 'issue-comment',\n    commentId: number,\n    accountEmbed: AccountEmbed,\n    results: PostSlackMessageResult[],\n    message: SlackMessage,\n  ): Promise<void> => {\n    const filtered = results.filter(ExcludesNullish);\n    if (filtered.length === 0) return;\n\n    await appContext.mongoStores.slackSentMessages.insertOne({\n      type,\n      typeId: commentId,\n      message,\n      account: accountEmbed,\n      sentTo: filtered,\n    });\n  };\n\n  app.on(\n    [\n      'pull_request_review_comment.created',\n      // comments without review and without path are sent with issue_comment.created.\n      // createHandlerPullRequestChange checks if pull_request event is present, removing real issues comments.\n      'issue_comment.created',\n    ],\n    createPullRequestHandler<\n      | EventPayloads.WebhookPayloadPullRequestReviewComment\n      | EventPayloads.WebhookPayloadIssueComment,\n      | PullRequestFromPayload<\n          | EventPayloads.WebhookPayloadPullRequestReviewComment\n          | EventPayloads.WebhookPayloadIssueComment\n        >\n      | any\n    >(\n      appContext,\n      (payload, context) => {\n        if (checkIfIsThisBot(payload.comment.user)) {\n          // ignore comments from this bot\n          return null;\n        }\n        return getPullRequestFromPayload(payload);\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const pr = await fetchPr(context, pullRequest.number);\n        const prUser = pr.user;\n        if (!prUser) return;\n        const { comment } = context.payload;\n        const type = (comment as any).pull_request_review_id\n          ? 'review-comment'\n          : 'issue-comment';\n\n        const body = comment.body;\n        if (!body) return;\n\n        const commentByOwner = prUser.login === comment.user.login;\n        const [discussion, { reviewers }] = await Promise.all([\n          getDiscussion(context, comment),\n          getReviewersAndReviewStates(context, repoContext),\n        ]);\n\n        const followers: AccountInfo[] = reviewers.filter(\n          (u) => u.id !== prUser.id && u.id !== comment.user.id,\n        );\n\n        if (pr.requested_reviewers) {\n          followers.push(\n            ...pr.requested_reviewers\n              .filter((rr) => {\n                return (\n                  rr &&\n                  !followers.some((f) => f.id === rr.id) &&\n                  rr.id !== (comment.user && comment.user.id) &&\n                  rr.id !== prUser.id\n                );\n              })\n              .filter(ExcludesFalsy)\n              .map<AccountInfo>((rr) => ({\n                id: rr.id,\n                login: rr.login,\n                type: rr.type,\n              })),\n          );\n        }\n\n        const usersInThread = getUsersInThread(discussion).filter(\n          (u) =>\n            u.id !== prUser.id &&\n            u.id !== comment.user.id &&\n            !followers.some((f) => f.id === u.id),\n        );\n        const mentions = getMentions(discussion).filter(\n          (m) =>\n            m !== prUser.login &&\n            m !== comment.user.login &&\n            !followers.some((f) => f.login === m) &&\n            !usersInThread.some((u) => u.login === m),\n        );\n\n        const mention = repoContext.slack.mention(comment.user.login);\n        const prUrl = slackUtils.createPrLink(pr, repoContext);\n        const ownerMention = repoContext.slack.mention(prUser.login);\n        const commentLink = slackUtils.createLink(\n          comment.html_url,\n          (comment as any).in_reply_to_id ? 'replied' : 'commented',\n        );\n\n        const createMessage = (toOwner?: boolean): string => {\n          const ownerPart = toOwner\n            ? 'your PR'\n            : `${\n                (prUser && prUser.id) === comment.user.id\n                  ? 'his'\n                  : `${ownerMention}'s`\n              } PR`;\n          return `:speech_balloon: ${mention} ${commentLink} on ${ownerPart} ${prUrl}`;\n        };\n\n        const promisesOwner = [];\n        const promisesNotOwner = [];\n        const slackifiedBody = slackifyCommentBody(\n          comment.body,\n          (comment as any).start_line !== null,\n        );\n        const isBotUser = checkIfUserIsBot(repoContext, comment.user);\n\n        if (!commentByOwner) {\n          const slackMessage = createSlackMessageWithSecondaryBlock(\n            createMessage(true),\n            slackifiedBody,\n          );\n\n          promisesOwner.push(\n            repoContext.slack\n              .postMessage(\n                isBotUser ? 'pr-comment-bots' : 'pr-comment',\n                prUser.id,\n                prUser.login,\n                slackMessage,\n              )\n              .then((res) =>\n                saveInDb(\n                  type,\n                  comment.id,\n                  repoContext.accountEmbed,\n                  [res],\n                  slackMessage,\n                ),\n              ),\n          );\n        }\n\n        const message = createSlackMessageWithSecondaryBlock(\n          createMessage(false),\n          slackifiedBody,\n        );\n\n        promisesNotOwner.push(\n          ...followers.map((follower) =>\n            repoContext.slack.postMessage(\n              isBotUser ? 'pr-comment-follow-bots' : 'pr-comment-follow',\n              follower.id,\n              follower.login,\n              message,\n            ),\n          ),\n          ...usersInThread.map((user) =>\n            repoContext.slack.postMessage(\n              'pr-comment-thread',\n              user.id,\n              user.login,\n              message,\n            ),\n          ),\n        );\n\n        if (mentions.length > 0) {\n          await appContext.mongoStores.users\n            .findAll({ login: { $in: mentions } })\n            .then((users) => {\n              promisesNotOwner.push(\n                ...users.map((u) =>\n                  repoContext.slack.postMessage(\n                    'pr-comment-mention',\n                    u._id,\n                    u.login,\n                    message,\n                  ),\n                ),\n              );\n            });\n        }\n\n        await Promise.all([\n          Promise.all(promisesOwner),\n          Promise.all(promisesNotOwner).then((results) =>\n            saveInDb(\n              type,\n              comment.id,\n              repoContext.accountEmbed,\n              results,\n              message,\n            ),\n          ),\n        ]);\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport type { Options } from './utils/body/prOptions';\nimport { updateCommentOptions } from './utils/body/updateBody';\n\nconst updatePrCommentBody = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  context: Context<E>,\n  reviewflowPrContext: ReviewflowPrContext,\n  newBody: string,\n): Promise<void> => {\n  await context.octokit.issues.updateComment(\n    context.repo({\n      comment_id: reviewflowPrContext.reviewflowPr.commentId,\n      body: newBody,\n    }),\n  );\n  reviewflowPrContext.commentBody = newBody;\n};\n\nexport const updatePrCommentBodyIfNeeded = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  context: Context<E>,\n  reviewflowPrContext: ReviewflowPrContext,\n  newBody: string,\n): Promise<void> => {\n  if (reviewflowPrContext.commentBody !== newBody) {\n    await updatePrCommentBody(context, reviewflowPrContext, newBody);\n  }\n};\n\nexport const updatePrCommentBodyOptions = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  updateOptions: Partial<Options>,\n): Promise<void> => {\n  const { commentBody: newBody } = updateCommentOptions(\n    context.payload.repository.html_url,\n    repoContext.config.labels.list,\n    reviewflowPrContext.commentBody,\n    repoContext.config.prDefaultOptions,\n    updateOptions,\n  );\n\n  await updatePrCommentBodyIfNeeded(context, reviewflowPrContext, newBody);\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { PullRequestWithDecentData } from 'events/pr-handlers/utils/PullRequestData';\nimport type { LabelResponse } from '../../../../context/initRepoLabels';\nimport hasLabelInPR from './hasLabelInPR';\n\ninterface SyncLabelOptions {\n  onRemove?: () => void | Promise<void>;\n  onAdd?: (prLabels: LabelResponse[]) => void | Promise<void>;\n}\n\nexport default async function syncLabel<\n  T extends EventPayloads.WebhookPayloadPullRequest\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<T>,\n  shouldHaveLabel: boolean,\n  label: LabelResponse,\n  prHasLabel = hasLabelInPR(pullRequest.labels, label),\n  { onRemove, onAdd }: SyncLabelOptions = {},\n): Promise<void> {\n  if (prHasLabel && !shouldHaveLabel) {\n    await context.octokit.issues.removeLabel(\n      context.issue({ name: label.name }),\n    );\n    if (onRemove) await onRemove();\n  }\n  if (shouldHaveLabel && !prHasLabel) {\n    const response = await context.octokit.issues.addLabels(\n      context.issue({ labels: [label.name] }),\n    );\n    if (onAdd) await onAdd(response.data);\n  }\n}\n","import type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type {\n  PullRequestFromRestEndpoint,\n  PullRequestWithDecentData,\n} from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { autoMergeIfPossible } from './autoMergeIfPossible';\nimport { updatePrCommentBodyIfNeeded } from './updatePrCommentBody';\nimport type { Options } from './utils/body/prOptions';\nimport { updateCommentOptions } from './utils/body/updateBody';\nimport hasLabelInPR from './utils/hasLabelInPR';\nimport syncLabel from './utils/syncLabel';\n\nexport const calcDefaultOptions = (\n  repoContext: RepoContext,\n  pullRequest: PullRequestWithDecentData,\n): Options => {\n  const automergeLabel = repoContext.labels['merge/automerge'];\n  const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n  const prHasSkipCiLabel = hasLabelInPR(pullRequest.labels, skipCiLabel);\n  const prHasAutoMergeLabel = hasLabelInPR(pullRequest.labels, automergeLabel);\n\n  return {\n    ...repoContext.config.prDefaultOptions,\n    autoMergeWithSkipCi: prHasSkipCiLabel,\n    autoMerge: prHasAutoMergeLabel,\n  };\n};\n\nexport const syncLabelsAfterCommentBodyEdited = async (\n  pullRequest: PullRequestFromRestEndpoint,\n  context: Context<any>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n): Promise<void> => {\n  const automergeLabel = repoContext.labels['merge/automerge'];\n  const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n  const prHasSkipCiLabel = hasLabelInPR(pullRequest.labels, skipCiLabel);\n  const prHasAutoMergeLabel = hasLabelInPR(pullRequest.labels, automergeLabel);\n\n  const { commentBody, options } = updateCommentOptions(\n    context.payload.repository.html_url,\n    repoContext.config.labels.list,\n    reviewflowPrContext.commentBody,\n    calcDefaultOptions(repoContext, pullRequest),\n  );\n\n  await updatePrCommentBodyIfNeeded(context, reviewflowPrContext, commentBody);\n\n  if (options && automergeLabel) {\n    await Promise.all([\n      skipCiLabel &&\n        syncLabel(\n          pullRequest,\n          context,\n          options.autoMergeWithSkipCi,\n          skipCiLabel,\n          prHasSkipCiLabel,\n        ),\n      automergeLabel &&\n        syncLabel(\n          pullRequest,\n          context,\n          options.autoMerge,\n          automergeLabel,\n          prHasAutoMergeLabel,\n          {\n            onAdd: async (prLabels) => {\n              await autoMergeIfPossible(\n                pullRequest,\n                context,\n                repoContext,\n                reviewflowPrContext,\n                prLabels,\n              );\n            },\n            onRemove: () => {\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pullRequest.number,\n                'label removed',\n              );\n            },\n          },\n        ),\n    ]);\n  }\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { syncLabelsAfterCommentBodyEdited } from './actions/syncLabelsAfterCommentBodyEdited';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { createMrkdwnSectionBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport { fetchPr } from './utils/fetchPr';\nimport type { PullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { getPullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { checkIfIsThisBot } from './utils/isBotUser';\nimport { slackifyCommentBody } from './utils/slackifyCommentBody';\n\nexport default function prCommentEditedOrDeleted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    [\n      'pull_request_review_comment.edited',\n      'pull_request_review_comment.deleted',\n      // comments without review and without path are sent with issue_comment.created.\n      // createHandlerPullRequestChange checks if pull_request event is present, removing real issues comments.\n      'issue_comment.edited',\n      'issue_comment.deleted',\n    ],\n    createPullRequestHandler<\n      | EventPayloads.WebhookPayloadPullRequestReviewComment\n      | EventPayloads.WebhookPayloadIssueComment,\n      | PullRequestFromPayload<\n          | EventPayloads.WebhookPayloadPullRequestReviewComment\n          | EventPayloads.WebhookPayloadIssueComment\n        >\n      | any\n    >(\n      appContext,\n      (payload) => {\n        if (checkIfIsThisBot(payload.sender)) {\n          // ignore edits made from this bot\n          return null;\n        }\n        return getPullRequestFromPayload(payload);\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const { comment } = context.payload;\n\n        if (\n          reviewflowPrContext !== null &&\n          context.payload.action === 'edited' &&\n          checkIfIsThisBot(comment.user)\n        ) {\n          const updatedPr = await fetchPr(context, pullRequest.number);\n          if (!updatedPr.closed_at) {\n            await syncLabelsAfterCommentBodyEdited(\n              updatedPr,\n              context,\n              repoContext,\n              reviewflowPrContext,\n            );\n          }\n          return;\n        }\n\n        const type = (comment as any).pull_request_review_id\n          ? 'review-comment'\n          : 'issue-comment';\n\n        const criteria = {\n          'account.id': repoContext.account._id,\n          'account.type': repoContext.accountType,\n          type,\n          typeId: comment.id,\n        };\n\n        const sentMessages = await appContext.mongoStores.slackSentMessages.findAll(\n          criteria,\n        );\n\n        if (sentMessages.length === 0) return;\n\n        if (context.payload.action === 'deleted') {\n          await Promise.all([\n            Promise.all(\n              sentMessages.map((sentMessage) =>\n                Promise.all(\n                  sentMessage.sentTo.map((sentTo) =>\n                    repoContext.slack.deleteMessage(sentTo.ts, sentTo.channel),\n                  ),\n                ),\n              ),\n            ),\n            appContext.mongoStores.slackSentMessages.deleteMany(criteria),\n          ]);\n        } else {\n          const secondaryBlocks = [\n            createMrkdwnSectionBlock(\n              slackifyCommentBody(\n                comment.body,\n                (comment as any).start_line !== null,\n              ),\n            ),\n          ];\n\n          await Promise.all([\n            Promise.all(\n              sentMessages.map((sentMessage) =>\n                Promise.all(\n                  sentMessage.sentTo.map((sentTo) =>\n                    repoContext.slack.updateMessage(sentTo.ts, sentTo.channel, {\n                      ...sentMessage.message,\n                      secondaryBlocks,\n                    }),\n                  ),\n                ),\n              ),\n            ),\n            appContext.mongoStores.slackSentMessages.partialUpdateMany(\n              criteria,\n              { $set: { 'message.secondaryBlocks': secondaryBlocks } },\n            ),\n          ]);\n        }\n      },\n    ),\n  );\n}\n","import parse from '@commitlint/parse';\nimport type { CommitNote } from '@commitlint/types';\nimport type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { updatePrCommentBodyIfNeeded } from './updatePrCommentBody';\nimport { updateCommentBodyCommitsNotes } from './utils/body/updateBody';\nimport { readPullRequestCommits } from './utils/readPullRequestCommits';\nimport syncLabel from './utils/syncLabel';\n\ninterface BreakingChangesCommits {\n  commit: RestEndpointMethodTypes['pulls']['listCommits']['response']['data'][number];\n  breakingChangesNotes: CommitNote[];\n}\n\nexport const readCommitsAndUpdateInfos = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  commentBody = reviewflowPrContext.commentBody,\n): Promise<void> => {\n  // tmp.data[0].sha\n  // tmp.data[0].commit.message\n\n  const commits = await readPullRequestCommits(context);\n\n  const conventionalCommits = await Promise.all(\n    commits.map((c) => parse(c.commit.message)),\n  );\n\n  const breakingChangesCommits: BreakingChangesCommits[] = [];\n  conventionalCommits.forEach((c, index) => {\n    const breakingChangesNotes = c.notes.filter(\n      (note) => note.title === 'BREAKING CHANGE',\n    );\n    if (breakingChangesNotes.length > 0) {\n      breakingChangesCommits.push({\n        commit: commits[index],\n        breakingChangesNotes,\n      });\n    }\n  });\n\n  const breakingChangesLabel = repoContext.labels['breaking-changes'];\n  const newCommentBody = updateCommentBodyCommitsNotes(\n    commentBody,\n    breakingChangesCommits.length === 0\n      ? ''\n      : `Breaking Changes:\\n${breakingChangesCommits\n          .map(({ commit, breakingChangesNotes }) =>\n            breakingChangesNotes.map(\n              (note) => `- ${note.text.replace('\\n', ' ')} (${commit.sha})`,\n            ),\n          )\n          .join('')}`,\n  );\n\n  await Promise.all([\n    syncLabel(\n      pullRequest,\n      context,\n      breakingChangesCommits.length > 0,\n      breakingChangesLabel,\n    ),\n    updatePrCommentBodyIfNeeded(context, reviewflowPrContext, newCommentBody),\n  ]);\n\n  // TODO auto update ! in front of : to signal a breaking change when https://github.com/conventional-changelog/commitlint/issues/658 is closed\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\n\ninterface UpdatePr {\n  title?: string;\n  body?: string;\n}\n\nconst cleanNewLines = (text: string | null): string =>\n  !text ? '' : text.replace(/\\r\\n/g, '\\n');\nconst checkIfHasDiff = (text1: string | null, text2: string): boolean =>\n  cleanNewLines(text1) !== cleanNewLines(text2);\n\nexport const updatePrIfNeeded = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  update: UpdatePr,\n): Promise<void> => {\n  const hasDiffInTitle = update.title && pullRequest.title !== update.title;\n  const hasDiffInBody =\n    update.body && checkIfHasDiff(pullRequest.body, update.body);\n\n  if (hasDiffInTitle || hasDiffInBody) {\n    const diff: Partial<Record<'title' | 'body', string>> = {};\n    if (hasDiffInTitle) {\n      diff.title = update.title;\n      pullRequest.title = update.title!;\n    }\n    if (hasDiffInBody) {\n      diff.body = update.body;\n      pullRequest.body = update.body!;\n    }\n\n    await context.octokit.pulls.update(\n      context.repo({\n        pull_number: pullRequest.number,\n        ...diff,\n      }),\n    );\n  }\n};\n","export const cleanTitle = (title: string): string =>\n  title\n    .trim()\n    .replace(\n      /[\\s-]+\\[?\\s*([A-Za-z][\\dA-Za-z]+)[ -](\\d+)\\s*]?\\s*$/,\n      (s, arg1, arg2) => ` ${arg1.toUpperCase()}-${arg2}`,\n    )\n    .replace(/^([A-Za-z]+)[/:]\\s*/, (s, arg1) => `${arg1.toLowerCase()}: `)\n    .replace(/^Revert \"([^\"]+)\"$/, 'revert: $1')\n    .replace(/\\s+[[\\]]\\s*no\\s*issue\\s*[[\\]]$/i, ' [no issue]')\n    .replace(/^(revert:.*)(\\s+\\(#\\d+\\))$/, '$1');\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { StatusInfo } from '../../../accountConfigs/types';\nimport { getKeys } from '../../../context/utils';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { checkIfUserIsBot } from '../utils/isBotUser';\nimport { readCommitsAndUpdateInfos } from './readCommitsAndUpdateInfos';\nimport { calcDefaultOptions } from './syncLabelsAfterCommentBodyEdited';\nimport { updatePrIfNeeded } from './updatePr';\nimport { updatePrCommentBodyIfNeeded } from './updatePrCommentBody';\nimport {\n  updateCommentBodyInfos,\n  defaultCommentBody,\n  createCommentBody,\n  removeDeprecatedReviewflowInPrBody,\n} from './utils/body/updateBody';\nimport { cleanTitle } from './utils/cleanTitle';\nimport createStatus from './utils/createStatus';\n\ninterface Status {\n  name: string;\n  status: StatusInfo;\n}\n\nexport const editOpenedPR = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  shouldUpdateCommentBodyInfos: boolean,\n  previousSha?: string,\n): Promise<void> => {\n  const title = repoContext.config.trimTitle\n    ? cleanTitle(pullRequest.title)\n    : pullRequest.title;\n\n  const parsePRValue = {\n    title,\n    head: pullRequest.head.ref,\n    base: pullRequest.base.ref,\n  };\n\n  const isPrFromBot = !pullRequest.user\n    ? false\n    : checkIfUserIsBot(repoContext, pullRequest.user);\n\n  const statuses: Status[] = [];\n  let errorStatus: StatusInfo | undefined;\n\n  getKeys(repoContext.config.parsePR).forEach((parsePRKey) => {\n    const rules = repoContext.config.parsePR[parsePRKey];\n    if (!rules) return;\n\n    const value = parsePRValue[parsePRKey];\n    rules.forEach((rule) => {\n      if (rule.bot === false && isPrFromBot) return;\n\n      const match = rule.regExp.exec(value);\n      const status = rule.createStatusInfo(match, parsePRValue, isPrFromBot);\n\n      if (status !== null) {\n        if (rule.status) {\n          statuses.push({ name: rule.status, status });\n        } else if (status.type === 'failure') {\n          if (!errorStatus) {\n            errorStatus = status;\n          }\n        }\n      }\n    });\n  });\n\n  const date = new Date().toISOString();\n\n  const hasLintPrCheck = (\n    await context.octokit.checks.listForRef(\n      context.repo({\n        ref: pullRequest.head.sha,\n      }),\n    )\n  ).data.check_runs.find(\n    (check): boolean => check.name === `${process.env.REVIEWFLOW_NAME}/lint-pr`,\n  );\n\n  const promises: Promise<unknown>[] = [\n    ...statuses.map(\n      ({ name, status }): Promise<void> =>\n        createStatus(\n          context,\n          name,\n          pullRequest.head.sha,\n          status.type,\n          status.title,\n          status.url,\n        ),\n    ),\n    ...(previousSha\n      ? statuses\n          .filter(({ status }) => status.type === 'failure')\n          .map(({ name }): Promise<void> | undefined =>\n            createStatus(\n              context,\n              name,\n              previousSha,\n              'success',\n              'New commits have been pushed',\n            ),\n          )\n      : []),\n    hasLintPrCheck &&\n      context.octokit.checks.create(\n        context.repo({\n          name: `${process.env.REVIEWFLOW_NAME}/lint-pr`,\n          head_sha: pullRequest.head.sha,\n          status: 'completed',\n          conclusion: errorStatus ? 'failure' : 'success',\n          started_at: date,\n          completed_at: date,\n          output: errorStatus\n            ? {\n                title: errorStatus.title,\n                summary: errorStatus.summary,\n              }\n            : {\n                title: '✓ PR is valid',\n                summary: '',\n              },\n        }),\n      ),\n    !hasLintPrCheck && previousSha && errorStatus\n      ? createStatus(\n          context,\n          'lint-pr',\n          previousSha,\n          'success',\n          'New commits have been pushed',\n        )\n      : undefined,\n    !hasLintPrCheck &&\n      createStatus(\n        context,\n        'lint-pr',\n        pullRequest.head.sha,\n        errorStatus ? 'failure' : 'success',\n        errorStatus ? errorStatus.title : '✓ PR is valid',\n        errorStatus ? errorStatus.url : undefined,\n      ),\n  ].filter(ExcludesFalsy);\n\n  const body = removeDeprecatedReviewflowInPrBody(pullRequest.body);\n  promises.push(updatePrIfNeeded(pullRequest, context, { title, body }));\n\n  const commentBodyInfos: StatusInfo[] = statuses\n    .filter((status) => status.status.inBody)\n    .map((status) => status.status);\n\n  const shouldCreateCommentBody =\n    reviewflowPrContext.commentBody === defaultCommentBody;\n\n  const newBody = shouldCreateCommentBody\n    ? createCommentBody(\n        context.payload.repository.html_url,\n        repoContext.config.labels.list,\n        calcDefaultOptions(repoContext, pullRequest),\n        commentBodyInfos,\n      )\n    : updateCommentBodyInfos(reviewflowPrContext.commentBody, commentBodyInfos);\n\n  if (shouldCreateCommentBody || shouldUpdateCommentBodyInfos) {\n    promises.push(\n      readCommitsAndUpdateInfos(\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n        newBody,\n      ),\n    );\n  } else {\n    promises.push(\n      updatePrCommentBodyIfNeeded(context, reviewflowPrContext, newBody),\n    );\n  }\n\n  await Promise.all(promises);\n};\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\nimport { checkIfIsThisBot } from './utils/isBotUser';\n\nexport default function edited(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.edited',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        if (reviewflowPrContext == null) return;\n\n        const sender = context.payload.sender;\n        if (checkIfIsThisBot(sender)) {\n          return;\n        }\n\n        const updatedPullRequest = await fetchPr(\n          context,\n          context.payload.pull_request.number,\n        );\n\n        await editOpenedPR(\n          updatedPullRequest,\n          context,\n          repoContext,\n          reviewflowPrContext,\n          false,\n        );\n        await autoMergeIfPossible(\n          updatedPullRequest,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { updateBranch } from './actions/updateBranch';\nimport { updatePrCommentBodyOptions } from './actions/updatePrCommentBody';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { updateStatusCheckFromLabels } from './actions/updateStatusCheckFromLabels';\nimport hasLabelInPR from './actions/utils/hasLabelInPR';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nconst isFromRenovate = (\n  payload: EventPayloads.WebhookPayloadPullRequest,\n): boolean => {\n  const sender = payload.sender;\n  return (\n    sender.type === 'Bot' &&\n    sender.login === 'renovate[bot]' &&\n    payload.pull_request.head.ref.startsWith('renovate/')\n  );\n};\n\nexport default function labelsChanged(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    ['pull_request.labeled', 'pull_request.unlabeled'],\n    createPullRequestHandler<\n      EventPayloads.WebhookPayloadPullRequest,\n      EventPayloads.WebhookPayloadPullRequest['pull_request']\n    >(\n      appContext,\n      (payload, context, repoContext) => {\n        if (payload.sender.type === 'Bot' && !isFromRenovate(payload)) {\n          return null;\n        }\n\n        if (repoContext.shouldIgnore) return null;\n\n        return payload.pull_request;\n      },\n      async (pullRequest, context, repoContext, reviewflowPrContext) => {\n        if (reviewflowPrContext === null) return;\n\n        const fromRenovate = isFromRenovate(context.payload);\n        const updatedPr = await fetchPr(context, pullRequest.number);\n\n        const label = (context.payload as any).label;\n        if (fromRenovate) {\n          const codeApprovedLabel = repoContext.labels['code/approved'];\n          const codeNeedsReviewLabel = repoContext.labels['code/needs-review'];\n          const autoMergeLabel = repoContext.labels['merge/automerge'];\n          const autoMergeSkipCiLabel = repoContext.labels['merge/skip-ci'];\n          if (context.payload.action === 'labeled') {\n            if (codeApprovedLabel && label.id === codeApprovedLabel.id) {\n              // const { data: reviews } = await context.octokit.pulls.listReviews(\n              //   context.pullRequest({ per_page: 1 }),\n              // );\n              // if (reviews.length !== 0) {\n              await context.octokit.pulls.createReview(\n                context.pullRequest({ event: 'APPROVE' }),\n              );\n\n              let labels = updatedPr.labels;\n              const autoMergeWithSkipCi =\n                autoMergeSkipCiLabel &&\n                repoContext.config.autoMergeRenovateWithSkipCi;\n              if (autoMergeWithSkipCi) {\n                const result = await context.octokit.issues.addLabels(\n                  context.issue({\n                    labels: [autoMergeSkipCiLabel.name],\n                  }),\n                );\n                labels = result.data;\n              }\n              if (hasLabelInPR(labels, codeNeedsReviewLabel)) {\n                await updateReviewStatus(\n                  updatedPr,\n                  context,\n                  repoContext,\n                  'dev',\n                  {\n                    remove: ['needsReview'],\n                  },\n                );\n              } else {\n                await updateStatusCheckFromLabels(\n                  updatedPr,\n                  context,\n                  repoContext,\n                  labels,\n                );\n              }\n\n              await updatePrCommentBodyOptions(\n                context,\n                repoContext,\n                reviewflowPrContext,\n                {\n                  autoMergeWithSkipCi,\n                  // force label to avoid racing events (when both events are sent in the same time, reviewflow treats them one by one but the second event wont have its body updated)\n                  autoMerge: hasLabelInPR(labels, autoMergeLabel)\n                    ? true\n                    : repoContext.config.prDefaultOptions.autoMerge,\n                },\n              );\n              // }\n            } else if (autoMergeLabel && label.id === autoMergeLabel.id) {\n              await updatePrCommentBodyOptions(\n                context,\n                repoContext,\n                reviewflowPrContext,\n                {\n                  autoMerge: true,\n                  // force label to avoid racing events (when both events are sent in the same time, reviewflow treats them one by one but the second event wont have its body updated)\n                  // Note: si c'est renovate qui ajoute le label autoMerge, le label codeApprovedLabel n'aurait pu etre ajouté que par renovate également (on est a quelques secondes de l'ouverture de la pr par renovate)\n                  autoMergeWithSkipCi: hasLabelInPR(\n                    pullRequest.labels,\n                    autoMergeSkipCiLabel,\n                  )\n                    ? true\n                    : repoContext.config.prDefaultOptions.autoMergeWithSkipCi,\n                },\n              );\n            }\n            await autoMergeIfPossible(\n              updatedPr,\n              context,\n              repoContext,\n              reviewflowPrContext,\n            );\n          }\n          return;\n        }\n\n        if (repoContext.protectedLabelIds.includes(label.id)) {\n          if (context.payload.action === 'labeled') {\n            await context.octokit.issues.removeLabel(\n              context.issue({ name: label.name }),\n            );\n          } else {\n            await context.octokit.issues.addLabels(\n              context.issue({ labels: [label.name] }),\n            );\n          }\n          return;\n        }\n\n        await updateStatusCheckFromLabels(updatedPr, context, repoContext);\n\n        const updateBranchLabel = repoContext.labels['merge/update-branch'];\n        const automergeLabel = repoContext.labels['merge/automerge'];\n        const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n        const option = (() => {\n          if (automergeLabel && label.id === automergeLabel.id) {\n            return 'autoMerge';\n          }\n          if (skipCiLabel && label.id === skipCiLabel.id) {\n            return 'autoMergeWithSkipCi';\n          }\n          return null;\n        })();\n\n        if (option) {\n          await updatePrCommentBodyOptions(\n            context,\n            repoContext,\n            reviewflowPrContext,\n            {\n              [option]: context.payload.action === 'labeled',\n            },\n          );\n        } // not an else if\n        if (automergeLabel && label.id === automergeLabel.id) {\n          if (context.payload.action === 'labeled') {\n            await autoMergeIfPossible(\n              updatedPr,\n              context,\n              repoContext,\n              reviewflowPrContext,\n            );\n          } else {\n            repoContext.removePrFromAutomergeQueue(\n              context,\n              pullRequest.number,\n              'automerge label removed',\n            );\n          }\n        }\n        if (updateBranchLabel && label.id === updateBranchLabel.id) {\n          if (context.payload.action === 'labeled') {\n            await updateBranch(\n              updatedPr,\n              context,\n              context.payload.sender.login,\n            );\n            await context.octokit.issues.removeLabel(\n              context.issue({ name: label.name }),\n            );\n          }\n        }\n      },\n    ),\n  );\n}\n","import type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { PullRequestFromRestEndpoint } from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { autoMergeIfPossible } from './autoMergeIfPossible';\nimport hasLabelInPR from './utils/hasLabelInPR';\n\nexport const autoApproveAndAutoMerge = async (\n  pullRequest: PullRequestFromRestEndpoint,\n  context: Context<any>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n): Promise<boolean> => {\n  // const autoMergeLabel = repoContext.labels['merge/automerge'];\n  const codeApprovedLabel = repoContext.labels['code/approved'];\n  if (hasLabelInPR(pullRequest.labels, codeApprovedLabel)) {\n    await context.octokit.pulls.createReview(\n      context.pullRequest({ event: 'APPROVE' }),\n    );\n    await autoMergeIfPossible(\n      pullRequest,\n      context,\n      repoContext,\n      reviewflowPrContext,\n    );\n    return true;\n  }\n\n  return false;\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { PullRequestFromRestEndpoint } from '../utils/PullRequestData';\n\nexport const autoAssignPRToCreator = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  pullRequest: E['pull_request'] | PullRequestFromRestEndpoint,\n  context: Context<E>,\n  repoContext: RepoContext,\n): Promise<void> => {\n  if (!repoContext.config.autoAssignToCreator) return;\n  if (!pullRequest.assignees || pullRequest.assignees.length > 0) return;\n  if (!pullRequest.user || pullRequest.user.type === 'Bot') return;\n\n  await context.octokit.issues.addAssignees(\n    context.issue({\n      assignees: [pullRequest.user.login],\n    }),\n  );\n};\n","import type { Probot } from 'probot';\nimport type { AppContext } from 'context/AppContext';\nimport { autoApproveAndAutoMerge } from './actions/autoApproveAndAutoMerge';\nimport { autoAssignPRToCreator } from './actions/autoAssignPRToCreator';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function opened(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.opened',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (pullRequest, context, repoContext, reviewflowPrContext) => {\n        if (reviewflowPrContext === null) return;\n        const fromRenovate = pullRequest.head.ref.startsWith('renovate/');\n\n        await Promise.all<unknown>([\n          autoAssignPRToCreator(pullRequest, context, repoContext),\n          editOpenedPR(\n            pullRequest,\n            context,\n            repoContext,\n            reviewflowPrContext,\n            true,\n          ),\n          fromRenovate\n            ? fetchPr(context, pullRequest.number).then((updatedPr) =>\n                autoApproveAndAutoMerge(\n                  updatedPr,\n                  context,\n                  repoContext,\n                  reviewflowPrContext,\n                ).then(\n                  async (approved: boolean): Promise<void> => {\n                    if (!approved) {\n                      await updateReviewStatus(\n                        pullRequest,\n                        context,\n                        repoContext,\n                        'dev',\n                        {\n                          add: ['needsReview'],\n                        },\n                      );\n                    }\n                  },\n                ),\n              )\n            : updateReviewStatus(pullRequest, context, repoContext, 'dev', {\n                add: repoContext.config.requiresReviewRequest\n                  ? ['needsReview']\n                  : [],\n                remove: ['approved', 'changesRequested'],\n              }),\n        ]);\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { getRolesFromPullRequestAndReviewers } from './utils/getRolesFromPullRequestAndReviewers';\n\nexport default function reopened(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.reopened',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        return payload.pull_request;\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        /* if repo is not ignored */\n        if (reviewflowPrContext) {\n          await Promise.all([\n            updateReviewStatus(pullRequest, context, repoContext, 'dev', {\n              add: ['needsReview'],\n              remove: ['approved'],\n            }),\n            editOpenedPR(\n              pullRequest,\n              context,\n              repoContext,\n              reviewflowPrContext,\n              true,\n            ),\n          ]);\n        }\n\n        /* update slack home */\n        if (pullRequest.requested_reviewers) {\n          pullRequest.requested_reviewers.forEach((requestedReviewer) => {\n            repoContext.slack.updateHome(requestedReviewer.login);\n          });\n        }\n\n        if (pullRequest.requested_teams) {\n          await Promise.all(\n            pullRequest.requested_teams.map(async (team) => {\n              const members = await repoContext.getMembersForTeam(team.id);\n              members.forEach((member) => {\n                repoContext.slack.updateHome(member.login);\n              });\n            }),\n          );\n        }\n\n        if (pullRequest.assignees) {\n          pullRequest.assignees.forEach((assignee) => {\n            repoContext.slack.updateHome(assignee.login);\n          });\n        }\n\n        /* send notifications to assignees and followers */\n        const { reviewers } = await getReviewersAndReviewStates(\n          context,\n          repoContext,\n        );\n        const {\n          owner,\n          assignees,\n          followers,\n        } = getRolesFromPullRequestAndReviewers(pullRequest, reviewers);\n\n        const senderMention = repoContext.slack.mention(\n          context.payload.sender.login,\n        );\n        const ownerMention = repoContext.slack.mention(owner.login);\n        const prLink = slackUtils.createPrLink(pullRequest, repoContext);\n\n        const createMessage = (to: AccountInfo): string => {\n          const ownerPart = slackUtils.createOwnerPart(\n            ownerMention,\n            pullRequest,\n            to,\n          );\n\n          return `:recycle: ${senderMention} reopened ${ownerPart} ${prLink}\\n> ${pullRequest.title}`;\n        };\n\n        assignees.map((assignee) => {\n          if (context.payload.sender.id === assignee.id) return;\n          return repoContext.slack.postMessage(\n            'pr-lifecycle',\n            assignee.id,\n            assignee.login,\n            {\n              text: createMessage(assignee),\n            },\n          );\n        });\n\n        followers.map((follower) => {\n          if (context.payload.sender.id === follower.id) return;\n          return repoContext.slack.postMessage(\n            'pr-lifecycle-follow',\n            follower.id,\n            follower.login,\n            {\n              text: createMessage(follower),\n            },\n          );\n        });\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\n\nexport default function reviewDismissed(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request_review.dismissed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const sender = context.payload.sender;\n        const reviewer = context.payload.review.user;\n        const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          const updatedPr = await fetchPr(context, pullRequest.number);\n\n          const { reviewStates } = await getReviewersAndReviewStates(\n            context,\n            repoContext,\n          );\n\n          const hasChangesRequestedInReviews =\n            reviewStates[reviewerGroup].changesRequested !== 0;\n          const hasApprovals = reviewStates[reviewerGroup].approved !== 0;\n          const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n            reviewerGroup,\n            updatedPr,\n            { includesReviewerGroup: true },\n          );\n\n          await updateReviewStatus(\n            updatedPr,\n            context,\n            repoContext,\n            reviewerGroup,\n            {\n              add: [\n                !hasApprovals && 'needsReview',\n                hasApprovals &&\n                  !hasRequestedReviewsForGroup &&\n                  !hasChangesRequestedInReviews &&\n                  'approved',\n              ],\n              remove: [\n                !hasRequestedReviewsForGroup &&\n                  !hasChangesRequestedInReviews &&\n                  'requested',\n                !hasChangesRequestedInReviews && 'changesRequested',\n                !hasApprovals && 'approved',\n              ],\n            },\n          );\n\n          if (updatedPr.assignees) {\n            updatedPr.assignees.forEach((assignee) => {\n              if (assignee) {\n                repoContext.slack.updateHome(assignee.login);\n              }\n            });\n          }\n          if (\n            !updatedPr.assignees ||\n            !updatedPr.assignees.some(\n              (assignee) => assignee && assignee.login === reviewer.login,\n            )\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n        }\n\n        if (repoContext.slack) {\n          if (sender.login === reviewer.login) {\n            pullRequest.assignees.forEach((assignee) => {\n              repoContext.slack.postMessage(\n                'pr-review',\n                assignee.id,\n                assignee.login,\n                {\n                  text: `:recycle: ${repoContext.slack.mention(\n                    reviewer.login,\n                  )} dismissed his review on ${slackUtils.createPrLink(\n                    pullRequest,\n                    repoContext,\n                  )}`,\n                },\n              );\n            });\n          } else {\n            repoContext.slack.postMessage(\n              'pr-review',\n              reviewer.id,\n              reviewer.login,\n              {\n                text: `:recycle: ${repoContext.slack.mention(\n                  sender.login,\n                )} dismissed your review on ${slackUtils.createPrLink(\n                  pullRequest,\n                  repoContext,\n                )}`,\n              },\n            );\n          }\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\n\nexport default function reviewRequestRemoved(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request.review_request_removed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const sender = context.payload.sender;\n        const requestedReviewer = (context.payload as any).requested_reviewer;\n        const requestedTeam = (context.payload as any).requested_team;\n        const requestedReviewers = requestedReviewer\n          ? [requestedReviewer]\n          : await repoContext.getMembersForTeam(requestedTeam.id);\n\n        const reviewerGroup = requestedReviewer\n          ? repoContext.getReviewerGroup(requestedReviewer.login)\n          : repoContext.getTeamGroup(requestedTeam.name);\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n            reviewerGroup,\n            pullRequest,\n            {\n              includesReviewerGroup: true,\n            },\n          );\n\n          const { reviewStates } = await getReviewersAndReviewStates(\n            context,\n            repoContext,\n          );\n\n          const hasChangesRequestedInReviews =\n            reviewStates[reviewerGroup].changesRequested !== 0;\n\n          const hasApprovedInReviews =\n            reviewStates[reviewerGroup].approved !== 0;\n\n          const approved =\n            !hasRequestedReviewsForGroup &&\n            !hasChangesRequestedInReviews &&\n            hasApprovedInReviews;\n\n          await updateReviewStatus(\n            pullRequest,\n            context,\n            repoContext,\n            reviewerGroup,\n            {\n              add: [\n                // if changes requested by the one which requests was removed (should still be in changed requested anyway, but we never know)\n                hasChangesRequestedInReviews && 'changesRequested',\n                // if was already approved by another member in the group and has no other requests waiting\n                approved && 'approved',\n              ],\n              // remove labels if has no other requests waiting\n              remove: [\n                approved && 'needsReview',\n                !hasRequestedReviewsForGroup && 'requested',\n              ],\n            },\n          );\n\n          const assigneesLogins: string[] = [];\n          if (pullRequest.assignees) {\n            pullRequest.assignees.forEach((assignee) => {\n              assigneesLogins.push(assignee.login);\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n\n          requestedReviewers.forEach((potentialReviewer) => {\n            if (assigneesLogins.includes(potentialReviewer)) return;\n            repoContext.slack.updateHome(potentialReviewer.login);\n          });\n        }\n\n        if (repoContext.slack) {\n          if (requestedReviewers.some((rr) => rr.login === sender.login)) {\n            requestedReviewers.forEach((potentialReviewer) => {\n              if (potentialReviewer.login === sender.login) return;\n              repoContext.slack.postMessage(\n                'pr-review',\n                potentialReviewer.id,\n                potentialReviewer.login,\n                {\n                  text: `:skull_and_crossbones: ${repoContext.slack.mention(\n                    sender.login,\n                  )} removed the request for your team _${\n                    requestedTeam.name\n                  }_ review on ${slackUtils.createPrLink(\n                    pullRequest,\n                    repoContext,\n                  )}`,\n                },\n              );\n            });\n          } else {\n            requestedReviewers.forEach((potentialReviewer) => {\n              repoContext.slack.postMessage(\n                'pr-review',\n                potentialReviewer.id,\n                potentialReviewer.login,\n                {\n                  text: `:skull_and_crossbones: ${repoContext.slack.mention(\n                    sender.login,\n                  )} removed the request for  ${\n                    requestedTeam ? `your team _${requestedTeam.name}_` : 'your'\n                  } review on ${slackUtils.createPrLink(\n                    pullRequest,\n                    repoContext,\n                  )}`,\n                },\n              );\n            });\n          }\n\n          await Promise.all(\n            requestedReviewers.map(async (potentialReviewer) => {\n              const sentMessageRequestedReview = await appContext.mongoStores.slackSentMessages.findOne(\n                {\n                  'account.id': repoContext.account._id,\n                  'account.type': repoContext.accountType,\n                  type: 'review-requested',\n                  typeId: `${pullRequest.id}_${\n                    requestedTeam ? `${requestedTeam.id}_` : ''\n                  }${potentialReviewer.id}`,\n                },\n              );\n\n              if (sentMessageRequestedReview) {\n                const sentTo = sentMessageRequestedReview.sentTo[0];\n                const message = sentMessageRequestedReview.message;\n                await Promise.all([\n                  repoContext.slack.updateMessage(sentTo.ts, sentTo.channel, {\n                    ...message,\n                    text: message.text\n                      .split('\\n')\n                      .map((l) => `~${l}~`)\n                      .join('\\n'),\n                  }),\n                  repoContext.slack.addReaction(\n                    sentTo.ts,\n                    sentTo.channel,\n                    'skull_and_crossbones',\n                  ),\n                  appContext.mongoStores.slackSentMessages.deleteOne(\n                    sentMessageRequestedReview,\n                  ),\n                ]);\n              }\n            }),\n          );\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\n\nexport default function reviewRequested(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request.review_requested',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const sender = context.payload.sender;\n\n        const requestedReviewer = (context.payload as any).requested_reviewer;\n        const requestedTeam = (context.payload as any).requested_team;\n        const requestedReviewers = requestedReviewer\n          ? [requestedReviewer]\n          : await repoContext.getMembersForTeam(requestedTeam.id);\n\n        const reviewerGroup = requestedReviewer\n          ? repoContext.getReviewerGroup(requestedReviewer.login)\n          : repoContext.getTeamGroup(requestedTeam.name);\n        const shouldWait = false;\n        // repoContext.approveShouldWait(reviewerGroup, pr.requested_reviewers, { includesWaitForGroups: true });\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          await updateReviewStatus(\n            pullRequest,\n            context,\n            repoContext,\n            reviewerGroup,\n            {\n              add: ['needsReview', !shouldWait && 'requested'],\n              remove: ['approved'],\n            },\n          );\n\n          const assigneesLogins: string[] = [];\n          if (pullRequest.assignees) {\n            pullRequest.assignees.forEach((assignee) => {\n              assigneesLogins.push(assignee.login);\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n\n          requestedReviewers.forEach((potentialReviewer) => {\n            if (assigneesLogins.includes(potentialReviewer)) return;\n            repoContext.slack.updateHome(potentialReviewer.login);\n          });\n        }\n\n        if (!shouldWait && repoContext.slack) {\n          const text = `:eyes: ${repoContext.slack.mention(\n            sender.login,\n          )} requests ${\n            requestedReviewer ? 'your' : `your team _${requestedTeam.name}_`\n          } review on ${slackUtils.createPrLink(\n            pullRequest,\n            repoContext,\n          )} !\\n> ${pullRequest.title}`;\n          const message = { text };\n\n          await Promise.all(\n            requestedReviewers.map(async (potentialReviewer) => {\n              if (sender.login === potentialReviewer.login) return;\n\n              const result = await repoContext.slack.postMessage(\n                'pr-review',\n                potentialReviewer.id,\n                potentialReviewer.login,\n                message,\n              );\n              if (result) {\n                await appContext.mongoStores.slackSentMessages.insertOne({\n                  type: 'review-requested',\n                  typeId: `${pullRequest.id}_${\n                    requestedTeam ? `${requestedTeam.id}_` : ''\n                  }${potentialReviewer.id}`,\n                  message,\n                  account: repoContext.accountEmbed,\n                  sentTo: [result],\n                });\n              }\n            }),\n          );\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport slackifyMarkdown from 'slackify-markdown';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { createSlackMessageWithSecondaryBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport { fetchPr } from './utils/fetchPr';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { getRolesFromPullRequestAndReviewers } from './utils/getRolesFromPullRequestAndReviewers';\n\nconst getEmojiFromState = (state: string): string => {\n  switch (state) {\n    case 'changes_requested':\n      return 'x';\n    case 'approved':\n      return 'white_check_mark';\n    default:\n      return 'speech_balloon';\n  }\n};\n\nexport default function reviewSubmitted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request_review.submitted',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const { payload } = context;\n\n        const {\n          user: reviewer,\n          state,\n          body,\n          html_url: reviewUrl,\n        } = payload.review;\n\n        const { reviewers, reviewStates } = await getReviewersAndReviewStates(\n          context,\n          repoContext,\n        );\n        const {\n          owner,\n          assignees,\n          followers,\n        } = getRolesFromPullRequestAndReviewers(pullRequest, reviewers);\n        const isReviewByOwner = owner.login === reviewer.login;\n\n        const filteredFollowers = followers.filter(\n          (follower) => follower.id !== reviewer.id,\n        );\n\n        if (!isReviewByOwner) {\n          const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n          let merged: boolean;\n\n          if (\n            reviewflowPrContext &&\n            !repoContext.shouldIgnore &&\n            reviewerGroup &&\n            repoContext.config.labels.review[reviewerGroup]\n          ) {\n            const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n              reviewerGroup,\n              pullRequest,\n              {\n                includesReviewerGroup: true,\n                // TODO reenable this when accepted can notify request review to slack (dev accepted => design requested) and flag to disable for label (approved design ; still waiting for dev ?)\n                // includesWaitForGroups: true,\n              },\n            );\n\n            const hasChangesRequestedInReviews =\n              reviewStates[reviewerGroup].changesRequested !== 0;\n\n            const approved =\n              !hasRequestedReviewsForGroup &&\n              !hasChangesRequestedInReviews &&\n              state === 'approved';\n\n            const updatedPr = await fetchPr(context, pullRequest.number);\n\n            const newLabels = await updateReviewStatus(\n              updatedPr,\n              context,\n              repoContext,\n              reviewerGroup,\n              {\n                add: [\n                  approved && 'approved',\n                  state === 'changes_requested' && 'needsReview',\n                  state === 'changes_requested' && 'changesRequested',\n                ],\n                remove: [\n                  approved && 'needsReview',\n                  !hasRequestedReviewsForGroup && 'requested',\n                  state === 'approved' &&\n                    !hasChangesRequestedInReviews &&\n                    'changesRequested',\n                  state === 'changes_requested' && 'approved',\n                ],\n              },\n            );\n\n            if (approved && !hasChangesRequestedInReviews) {\n              merged = await autoMergeIfPossible(\n                updatedPr,\n                context,\n                repoContext,\n                reviewflowPrContext,\n                newLabels,\n              );\n            }\n          }\n\n          if (assignees) {\n            assignees.forEach((assignee) => {\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n          if (\n            !assignees.some((assignee) => assignee.login === reviewer.login)\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n\n          const sentMessageRequestedReview = await appContext.mongoStores.slackSentMessages.findOne(\n            {\n              'account.id': repoContext.account._id,\n              'account.type': repoContext.accountType,\n              type: 'review-requested',\n              typeId: `${pullRequest.id}_${reviewer.id}`,\n            },\n          );\n\n          const emoji = getEmojiFromState(state);\n\n          if (sentMessageRequestedReview) {\n            const sentTo = sentMessageRequestedReview.sentTo[0];\n            const message = sentMessageRequestedReview.message;\n            await Promise.all([\n              repoContext.slack.updateMessage(sentTo.ts, sentTo.channel, {\n                ...message,\n                text: message.text\n                  .split('\\n')\n                  .map((l) => `~${l}~`)\n                  .join('\\n'),\n              }),\n              repoContext.slack.addReaction(sentTo.ts, sentTo.channel, emoji),\n              appContext.mongoStores.slackSentMessages.deleteOne(\n                sentMessageRequestedReview,\n              ),\n            ]);\n          }\n\n          if (!body && state !== 'changes_requested' && state !== 'approved') {\n            return;\n          }\n\n          const mention = repoContext.slack.mention(reviewer.login);\n          const prUrl = slackUtils.createPrLink(pullRequest, repoContext);\n          const ownerMention = repoContext.slack.mention(owner.login);\n\n          const createMessage = (\n            toOwner?: boolean,\n            isAssignedTo?: boolean,\n          ): string => {\n            const ownerPart = toOwner\n              ? 'your PR'\n              : `${ownerMention}'s PR${\n                  isAssignedTo ? \" you're assigned to\" : ''\n                }`;\n\n            if (state === 'changes_requested') {\n              return `:${emoji}: ${mention} requests changes on ${ownerPart} ${prUrl}`;\n            }\n            if (state === 'approved') {\n              return `${\n                toOwner ? ':clap: ' : ''\n              }:${emoji}: ${mention} approves ${ownerPart} ${prUrl}${\n                merged ? ' and PR is merged :tada:' : ''\n              }`;\n            }\n\n            const commentLink = slackUtils.createLink(reviewUrl, 'commented');\n            return `:${emoji}: ${mention} ${commentLink} on ${ownerPart} ${prUrl}`;\n          };\n\n          const slackifiedBody = slackifyMarkdown((body as unknown) as string);\n\n          assignees.forEach((assignee) => {\n            repoContext.slack.postMessage(\n              'pr-review',\n              assignee.id,\n              assignee.login,\n              createSlackMessageWithSecondaryBlock(\n                createMessage(assignee.id === owner.id, true),\n                slackifiedBody,\n              ),\n            );\n          });\n\n          const message = createSlackMessageWithSecondaryBlock(\n            createMessage(false),\n            slackifiedBody,\n          );\n\n          filteredFollowers.forEach((follower) => {\n            repoContext.slack.postMessage(\n              'pr-review-follow',\n              follower.id,\n              follower.login,\n              message,\n            );\n          });\n        } else if (body) {\n          const mention = repoContext.slack.mention(reviewer.login);\n          const prUrl = slackUtils.createPrLink(pullRequest, repoContext);\n          const commentLink = slackUtils.createLink(reviewUrl, 'commented');\n\n          const message = createSlackMessageWithSecondaryBlock(\n            `:speech_balloon: ${mention} ${commentLink} on his PR ${prUrl}`,\n            body,\n          );\n\n          filteredFollowers.forEach((follower) => {\n            repoContext.slack.postMessage(\n              'pr-review-follow',\n              follower.id,\n              follower.login,\n              message,\n            );\n          });\n        }\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot, Context } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport type { LockedMergePr } from '../../context/repoContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\n\nconst isSameBranch = (\n  payload: Context<EventPayloads.WebhookPayloadStatus>['payload'],\n  lockedPr: LockedMergePr,\n): boolean => {\n  if (!lockedPr) return false;\n  return !!payload.branches.some((b) => b.name === lockedPr.branch);\n};\n\nexport default function status(app: Probot, appContext: AppContext): void {\n  app.on(\n    'status',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext): LockedMergePr[] => {\n        if (repoContext.shouldIgnore) return [];\n\n        const lockedPr = repoContext.getMergeLockedPr();\n        if (!lockedPr) return [];\n\n        if (payload.state !== 'loading' && isSameBranch(payload, lockedPr)) {\n          return [lockedPr];\n        }\n\n        return [];\n      },\n      (pr, context, repoContext): void => {\n        const lockedPr = repoContext.getMergeLockedPr();\n        // check if changed\n        if (isSameBranch(context.payload, lockedPr)) {\n          repoContext.reschedule(context, lockedPr);\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateStatusCheckFromLabels } from './actions/updateStatusCheckFromLabels';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function synchronize(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.synchronize',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        if (!reviewflowPrContext) return;\n\n        const updatedPr = await fetchPr(context, pullRequest.number);\n        // old and new sha\n        // const { before, after } = context.payload;\n        const previousSha = (context.payload as any).before as string;\n\n        await Promise.all([\n          editOpenedPR(\n            updatedPr,\n            context,\n            repoContext,\n            reviewflowPrContext,\n            true,\n            previousSha,\n          ),\n          // addStatusCheckToLatestCommit\n          updateStatusCheckFromLabels(\n            updatedPr,\n            context,\n            repoContext,\n            updatedPr.labels,\n            previousSha,\n          ),\n        ]);\n\n        // call autoMergeIfPossible to re-add to the queue when push is fixed\n        await autoMergeIfPossible(\n          updatedPr,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { obtainRepoContext } from '../../context/repoContext';\nimport { getEmojiFromRepoDescription } from '../../context/utils';\nimport { createHandlerOrgChange } from '../account-handlers/utils/handler';\n\nexport default function repoEdited(app: Probot, appContext: AppContext): void {\n  app.on(\n    'repository.edited',\n    createHandlerOrgChange(\n      appContext,\n      async (context, orgContext): Promise<void> => {\n        const repoContext = await obtainRepoContext(appContext, context);\n        if (!repoContext) return;\n        const repo = context.payload.repository;\n        repoContext.repoFullName = repo.full_name;\n        repoContext.repoEmoji = getEmojiFromRepoDescription(repo.description);\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\n// import commands from 'probot-commands';\nimport type { AppContext } from './context/AppContext';\nimport { syncOrg } from './events/account-handlers/actions/syncOrg';\nimport {\n  syncTeams,\n  syncTeamsAndTeamMembers,\n} from './events/account-handlers/actions/syncTeams';\nimport { createHandlerOrgChange } from './events/account-handlers/utils/handler';\nimport checkrunCompleted from './events/pr-handlers/checkrunCompleted';\nimport checksuiteCompleted from './events/pr-handlers/checksuiteCompleted';\nimport closedHandler from './events/pr-handlers/closed';\nimport commentCreated from './events/pr-handlers/commentCreated';\nimport commentEditedOrDeleted from './events/pr-handlers/commentEditedOrDeleted';\nimport editedHandler from './events/pr-handlers/edited';\nimport labelsChanged from './events/pr-handlers/labelsChanged';\nimport openedHandler from './events/pr-handlers/opened';\nimport reopenedHandler from './events/pr-handlers/reopened';\nimport reviewDismissedHandler from './events/pr-handlers/reviewDismissed';\nimport reviewRequestRemovedHandler from './events/pr-handlers/reviewRequestRemoved';\nimport reviewRequestedHandler from './events/pr-handlers/reviewRequested';\nimport reviewSubmittedHandler from './events/pr-handlers/reviewSubmitted';\nimport status from './events/pr-handlers/status';\nimport synchronizeHandler from './events/pr-handlers/synchronize';\nimport repoEdited from './events/repository-handlers/repoEdited';\n\nexport default function initApp(app: Probot, appContext: AppContext): void {\n  /* https://developer.github.com/webhooks/event-payloads/#organization */\n  app.on(\n    ['organization.member_added', 'organization.member_removed'],\n    createHandlerOrgChange<EventPayloads.WebhookPayloadOrganization>(\n      appContext,\n      async (context, accountContext) => {\n        await syncOrg(\n          appContext.mongoStores,\n          context.octokit,\n          accountContext.account.installationId!,\n          context.payload.organization,\n        );\n      },\n    ),\n  );\n\n  /* https://developer.github.com/webhooks/event-payloads/#team */\n  app.on(\n    ['team.created', 'team.deleted', 'team.edited'],\n    createHandlerOrgChange<EventPayloads.WebhookPayloadTeam>(\n      appContext,\n      async (context, accountContext) => {\n        await syncTeams(\n          appContext.mongoStores,\n          context.octokit,\n          context.payload.organization,\n        );\n      },\n    ),\n  );\n\n  /* https://developer.github.com/webhooks/event-payloads/#membership */\n  app.on(\n    ['membership.added', 'membership.removed'],\n    createHandlerOrgChange<EventPayloads.WebhookPayloadMembership>(\n      appContext,\n      async (context, accountContext) => {\n        // TODO: only sync team members and team parents members\n        // await syncTeamMembersWithTeamParents(\n        //   appContext.mongoStores,\n        //   context.octokit,\n        //   context.payload.organization,\n        //   {\n        //     id: context.payload.team.id,\n        //     name: context.payload.team.name,\n        //     slug: context.payload.team.slug,\n        //   },\n        // );\n        await syncTeamsAndTeamMembers(\n          appContext.mongoStores,\n          context.octokit,\n          context.payload.organization,\n        );\n      },\n    ),\n  );\n\n  // Repo\n  /* https://developer.github.com/webhooks/event-payloads/#repository */\n  repoEdited(app, appContext);\n\n  // PR\n  /* https://developer.github.com/webhooks/event-payloads/#pull_request */\n  openedHandler(app, appContext);\n  editedHandler(app, appContext);\n  closedHandler(app, appContext);\n  reopenedHandler(app, appContext);\n\n  reviewRequestedHandler(app, appContext);\n  reviewRequestRemovedHandler(app, appContext);\n  reviewSubmittedHandler(app, appContext);\n  reviewDismissedHandler(app, appContext);\n  labelsChanged(app, appContext);\n  synchronizeHandler(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#pull_request_review_comment */\n  /* https://developer.github.com/webhooks/event-payloads/#issue_comment */\n  commentCreated(app, appContext);\n  commentEditedOrDeleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#check_run */\n  checkrunCompleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#check_suite */\n  checksuiteCompleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#status */\n  status(app, appContext);\n\n  /* commands */\n  // commands(app, 'update-branch', () => {});\n}\n","/* eslint-disable @typescript-eslint/no-floating-promises */\nimport type { MongoBaseModel } from 'liwi-mongo';\nimport { MongoStore, MongoConnection } from 'liwi-mongo';\nimport type { SlackMessage } from './context/SlackMessage';\nimport type { MessageCategory } from './dm/MessageCategory';\n\n// export interface PrEventsModel extends MongoModel {\n//   owner: string;\n//   repo: string;\n//   prId: string;\n//   prNumber: string;\n//   event: string;\n// }\n\nexport type AccountType = 'Organization' | 'User';\n\nexport interface AccountEmbed {\n  id: number;\n  login: string;\n  type: AccountType;\n}\n\ninterface RepoEmbed {\n  id: number;\n  name: string;\n}\n\ninterface PrEmbed {\n  number: number;\n}\n\nexport type AccountEmbedWithoutType = Omit<AccountEmbed, 'type'>;\n\nexport interface UserDmSettings extends MongoBaseModel {\n  userId: number;\n  orgId: number;\n  settings: Record<MessageCategory, boolean>;\n}\n\n// TODO _id is number\ninterface BaseAccount extends MongoBaseModel<number> {\n  login: string;\n  installationId?: number;\n}\n\nexport interface User extends BaseAccount {\n  type: string;\n}\n\nexport interface Org extends BaseAccount {\n  slackToken?: string;\n}\n\nexport interface OrgTeam extends MongoBaseModel<number> {\n  org: AccountEmbedWithoutType;\n  name: string;\n  slug: string;\n  description: string | null;\n}\n\nexport interface OrgTeamEmbed {\n  id: OrgTeam['_id'];\n  name: OrgTeam['name'];\n  slug: OrgTeam['slug'];\n}\n\nexport interface OrgMember extends MongoBaseModel {\n  org: AccountEmbedWithoutType;\n  user: AccountEmbedWithoutType;\n  slack?: { id: string };\n  teams: OrgTeamEmbed[];\n}\n\nexport type SlackMessageType =\n  | 'review-comment'\n  | 'issue-comment'\n  | 'review-submitted'\n  | 'review-requested';\n\nexport interface SlackSentMessage extends MongoBaseModel {\n  type: SlackMessageType;\n  typeId: number | string;\n  account: AccountEmbed;\n  message: SlackMessage;\n  sentTo: {\n    channel: string;\n    ts: string;\n  }[];\n}\n\nexport interface AutomergeLog extends MongoBaseModel {\n  account: AccountEmbed;\n  repoFullName: string;\n  pr: {\n    id: number;\n    number: number;\n    isRenovate: boolean;\n    mergeableState: string;\n  };\n  type:\n    | 'rebase-renovate'\n    | 'unknown mergeable_state'\n    | 'blocked mergeable_state'\n    | 'behind mergeable_state'\n    | 'not mergeable'\n    | 'failed status or checks'\n    | 'already merged';\n  action: 'remove' | 'reschedule' | 'wait' | 'update branch';\n}\n\nexport interface ReviewflowPr extends MongoBaseModel {\n  account: AccountEmbed;\n  repo: RepoEmbed;\n  pr: PrEmbed;\n  commentId: number;\n}\n\nexport interface MongoStores {\n  connection: MongoConnection;\n  userDmSettings: MongoStore<UserDmSettings>;\n  users: MongoStore<User>;\n  orgs: MongoStore<Org>;\n  orgMembers: MongoStore<OrgMember>;\n  orgTeams: MongoStore<OrgTeam>;\n  slackSentMessages: MongoStore<SlackSentMessage>;\n  automergeLogs: MongoStore<AutomergeLog>;\n  prs: MongoStore<ReviewflowPr>;\n  // prEvents: MongoStore<PrEventsModel>;\n}\n\nif (!process.env.MONGO_DB) {\n  throw new Error('MONGO_DB is missing in process.env');\n}\n\nexport default function init(): MongoStores {\n  const config = new Map([\n    ['host', process.env.MONGO_HOST || 'localhost'],\n    ['port', process.env.MONGO_PORT || '27017'],\n    ['database', process.env.MONGO_DB!],\n  ]);\n  if (process.env.MONGO_USER) {\n    config.set('user', process.env.MONGO_USER);\n    config.set('password', process.env.MONGO_PASSWORD!);\n  }\n  const connection = new MongoConnection(config);\n\n  // const prEvents = new MongoStore<PrEventsModel>(connection, 'prEvents');\n  // prEvents.collection.then((coll) => {\n  //   coll.createIndex({ owner: 1, repo: 1, ???: 1 });\n  // });\n\n  const userDmSettings = new MongoStore<UserDmSettings>(\n    connection,\n    'userDmSettings',\n  );\n  userDmSettings.collection.then((coll) => {\n    coll.createIndex({ userId: 1, orgId: 1 }, { unique: true });\n  });\n\n  const users = new MongoStore<User>(connection, 'users');\n  users.collection.then((coll) => {\n    coll.createIndex({ login: 1 }, { unique: true });\n  });\n\n  const orgs = new MongoStore<Org>(connection, 'orgs');\n  orgs.collection.then((coll) => {\n    coll.createIndex({ login: 1 }, { unique: true });\n  });\n\n  const orgMembers = new MongoStore<OrgMember>(connection, 'orgMembers');\n  orgMembers.collection.then((coll) => {\n    coll.createIndex({ 'user.id': 1, 'org.id': 1 }, { unique: true });\n    coll.createIndex(\n      { 'org.id': 1, 'user.id': 1, 'teams.id': 1 },\n      { unique: true },\n    );\n    coll.createIndex({ 'org.id': 1, 'teams.id': 1 });\n  });\n\n  const orgTeams = new MongoStore<OrgTeam>(connection, 'orgTeams');\n  orgTeams.collection.then((coll) => {\n    coll.createIndex({ 'org.id': 1 });\n  });\n\n  const slackSentMessages = new MongoStore<SlackSentMessage>(\n    connection,\n    'slackSentMessages',\n  );\n  slackSentMessages.collection.then((coll) => {\n    coll.createIndex({\n      'account.id': 1,\n      'account.type': 1,\n      type: 1,\n      typeId: 1,\n    });\n    // remove older than 14 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  const automergeLogs = new MongoStore<AutomergeLog>(\n    connection,\n    'automergeLogs',\n  );\n  automergeLogs.collection.then((coll) => {\n    coll.createIndex({\n      repoFullName: 1,\n      type: 1,\n    });\n    coll.createIndex({\n      repoFullName: 1,\n      'pr.number': 1,\n    });\n    // remove older than 30 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  const prs = new MongoStore<ReviewflowPr>(connection, 'prs');\n  prs.collection.then((coll) => {\n    coll.createIndex(\n      {\n        'account.id': 1,\n        'repo.id': 1,\n        'pr.number': 1,\n      },\n      { unique: true },\n    );\n    // remove older than 12 * 30 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 12 * 30 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  // return { connection, prEvents };\n  return {\n    connection,\n    userDmSettings,\n    users,\n    orgs,\n    orgMembers,\n    orgTeams,\n    slackSentMessages,\n    automergeLogs,\n    prs,\n  };\n}\n","import { WebClient } from '@slack/web-api';\nimport type { MongoStores, Org, OrgMember } from '../mongo';\nimport type { Octokit } from '../octokit';\nimport { createLink } from './utils';\n\ninterface QueueItem {\n  github: Octokit;\n  slackClient: WebClient;\n  member: OrgMember;\n}\n\nexport const createSlackHomeWorker = (mongoStores: MongoStores) => {\n  const updateMember = async (\n    octokit: Octokit,\n    slackClient: WebClient,\n    member: OrgMember,\n  ): Promise<void> => {\n    if (!member.slack?.id) return;\n    // console.log('update member', member.org.login, member.user.login);\n\n    /* search limit: 30 requests per minute = 7 update/min max */\n    const [\n      prsWithRequestedReviews,\n      prsToMerge,\n      prsWithRequestedChanges,\n      prsInDraft,\n    ] = await Promise.all([\n      octokit.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open review-requested:${member.user.login} `,\n        sort: 'created',\n        order: 'desc',\n      }),\n      octokit.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} label:\":ok_hand: code/approved\"`,\n        sort: 'created',\n        order: 'desc',\n      }),\n      octokit.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} label:\":ok_hand: code/changes-requested\"`,\n        sort: 'created',\n        order: 'desc',\n      }),\n      octokit.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} draft:true`,\n        sort: 'created',\n        order: 'desc',\n        per_page: 5,\n      }),\n    ]);\n\n    const blocks: any[] = [];\n\n    const buildBlocks = (title: string, results: any) => {\n      if (!results.total_count) return;\n\n      blocks.push(\n        {\n          type: 'section',\n          text: {\n            type: 'mrkdwn',\n            text: `*${title}*`,\n          },\n        },\n        {\n          type: 'divider',\n        },\n        ...results.items\n          .map((pr: any) => {\n            const repoName = pr.repository_url.slice(\n              'https://api.github.com/repos/'.length,\n            );\n            const prFullName = `${repoName}#${pr.number}`;\n\n            return [\n              {\n                type: 'section',\n                text: {\n                  type: 'mrkdwn',\n                  text: `*${createLink(pr.html_url, pr.title)}*`,\n                  //  ${pr.labels.map((l) => `{${l.name}}`).join(' · ')}\n                },\n              },\n              {\n                type: 'context',\n                elements: [\n                  {\n                    type: 'mrkdwn',\n                    text: `${createLink(pr.html_url, prFullName)} ${\n                      pr.draft ? '· _Draft_' : ''\n                    }`,\n                  },\n                  {\n                    type: 'image',\n                    image_url: pr.user.avatar_url,\n                    alt_text: pr.user.login,\n                  },\n                  {\n                    type: 'mrkdwn',\n                    text: `${pr.user.login}`,\n                  },\n                ],\n              },\n            ];\n          })\n          .flat(),\n        {\n          type: 'context',\n          elements: [\n            {\n              type: 'image',\n              image_url:\n                'https://api.slack.com/img/blocks/bkb_template_images/placeholder.png',\n              alt_text: 'placeholder',\n            },\n          ],\n        },\n      );\n    };\n\n    buildBlocks(':eyes: Requested Reviews', prsWithRequestedReviews.data);\n    buildBlocks(':white_check_mark: Ready to Merge', prsToMerge.data);\n    buildBlocks(':x: Changes Requested', prsWithRequestedChanges.data);\n    buildBlocks(':construction: Drafts', prsInDraft.data);\n\n    if (blocks.length === 0) {\n      blocks.push({\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: \":tada: It looks like you don't have any PR to review!\",\n        },\n      });\n    }\n\n    slackClient.views.publish({\n      user_id: member.slack.id,\n      view: {\n        type: 'home',\n        blocks,\n      },\n    });\n  };\n\n  let workerInterval: ReturnType<typeof setInterval> | undefined;\n  const queueKeys = new Set<string>();\n  const queue: QueueItem[] = [];\n\n  const stop = (): void => {\n    if (workerInterval !== undefined) {\n      clearInterval(workerInterval);\n      workerInterval = undefined;\n    }\n  };\n\n  const start = (): void => {\n    if (workerInterval !== undefined) return;\n    workerInterval = setInterval(() => {\n      const item = queue.shift();\n      if (!item) {\n        stop();\n        return;\n      }\n\n      const { github, slackClient, member } = item;\n      const memberId = member.slack?.id;\n\n      const key = `${member.org.id}_${memberId}`;\n      queueKeys.delete(key);\n\n      updateMember(github, slackClient, member);\n    }, 9000); // 7/min 60s 1min = 1 ttes les 8.5s max\n  };\n\n  const scheduleUpdateMember = (\n    github: Octokit,\n    slackClient: WebClient,\n    member: OrgMember,\n  ): void => {\n    const memberId = member.slack?.id;\n    if (!memberId) return;\n\n    const key = `${member.org.id}_${memberId}`;\n\n    if (!queueKeys.has(key)) {\n      queueKeys.add(key);\n      queue.push({\n        github,\n        slackClient,\n        member,\n      });\n      start();\n    }\n  };\n\n  const scheduleUpdateOrg = async (\n    github: Octokit,\n    org: Org,\n    slackClient = new WebClient(org.slackToken),\n  ): Promise<void> => {\n    const cursor = await mongoStores.orgMembers.cursor();\n    cursor.forEach((member) => {\n      scheduleUpdateMember(github, slackClient, member);\n    });\n  };\n\n  const scheduleUpdateAllOrgs = async (\n    auth: (installationId: number) => Promise<Octokit>,\n  ): Promise<void> => {\n    const cursor = await mongoStores.orgs.cursor();\n    cursor.forEach(async (org) => {\n      if (!org.slackToken || !org.installationId) return;\n      const github = await auth(org.installationId);\n      await scheduleUpdateOrg(github, org);\n    });\n  };\n\n  return {\n    scheduleUpdateMember,\n    scheduleUpdateOrg,\n    scheduleUpdateAllOrgs,\n  };\n};\n","/* eslint-disable @typescript-eslint/no-floating-promises */\nimport 'dotenv/config';\nimport { run } from 'probot';\nimport appRouter from './appRouter';\nimport type { AppContext } from './context/AppContext';\nimport initApp from './initApp';\nimport mongoInit from './mongo';\nimport { createSlackHomeWorker } from './slack/home';\n\nif (!process.env.REVIEWFLOW_NAME) process.env.REVIEWFLOW_NAME = 'reviewflow';\n\n// eslint-disable-next-line no-console\nconsole.log({ name: process.env.REVIEWFLOW_NAME });\n\n// const getConfig = require('probot-config')\n// const { MongoClient } = require('mongodb');\n\n// const connect = MongoClient.connect(process.env.MONGO_URL);\n// const db = connect.then(client => client.db(process.env.MONGO_DB));\n\n// let config = await getConfig(context, 'reviewflow.yml');\n\nrun((app, { getRouter }) => {\n  const mongoStores = mongoInit();\n  const slackHome = createSlackHomeWorker(mongoStores);\n  const appContext: AppContext = { mongoStores, slackHome };\n  appRouter(app, getRouter, appContext);\n  initApp(app, appContext);\n  slackHome.scheduleUpdateAllOrgs((id: number) => app.auth(id));\n});\n"],"names":["process","env","GITHUB_CLIENT_ID","Error","GITHUB_CLIENT_SECRET","oauth2","create","client","id","secret","auth","tokenHost","tokenPath","authorizePath","Layout","lang","title","REVIEWFLOW_NAME","children","React","padding","AUTH_SECRET_KEY","signPromisified","promisify","sign","verifyPromisified","verify","secure","SECURE_COOKIE","createRedirectUri","req","host","hostname","PORT","readAuthCookie","strategy","cookie","cookies","algorithm","audience","headers","getAuthInfoFromCookie","res","authInfo","clearCookie","undefined","createApi","accessToken","Octokit","getUser","redirect","api","router","get","redirectUri","githubAuth","authorizationCode","authorizeURL","redirect_uri","scope","query","error","send","error_description","code","result","getToken","renderToStaticMarkup","access_token","user","users","getAuthenticated","data","login","time","Date","now","token","expiresIn","httpOnly","home","orgs","listForAuthenticatedUser","display","flexGrow","map","org","config","autoAssignToCreator","trimTitle","requiresReviewRequest","prDefaultOptions","autoMerge","autoMergeWithSkipCi","deleteAfterMerge","parsePR","regExp","createStatusInfo","match","type","summary","groups","dev","christophehurpeau","tilap","waitForGroups","teams","labels","list","name","color","review","ci","inProgress","succeeded","failed","needsReview","requested","changesRequested","approved","ignoreRepoPattern","autoMergeRenovateWithSkipCi","status","prInfo","isPrFromBot","issue","inBody","url","head","bot","idealBranchName","replace","base","botUsers","JulienBreux","ORNIKAR_EMAIL_DOMAIN","TheR3aLp3nGuinJM","AymenBac","abarreir","damienorny","darame07","Pixy","machartier","camillebaronnet","HugoGarrido","CorentinAndre","Mxime","vlbr","mdcarter","ChibiBlasphem","PSniezak","GaelFerrand","aenario","design","jperriere","CoralineColasse","Lenamari","loicleser","carlbouville","groupsGithubTeams","ops","githubTeamName","logins","backends","frontends","description","duplicate","documentation","rfc","bug","enhancement","question","wontfix","chrisconfig","accountConfigs","ornikar","reviewflow","defaultDmSettings","cache","Map","getDefaultDmSettings","accountConfig","defaultConfig","updateCache","userId","newSettings","orgCache","set","getUserDmSettings","mongoStores","orgId","orgDefaultDmSettings","userDmSettingsConfig","userDmSettings","findOne","settings","syncOrg","octokit","installationId","orgInStore","upsertOne","_id","orgEmbed","memberIds","paginate","iterator","listMembers","Promise","all","member","push","orgMembers","deleteMany","$not","$in","ExcludesFalsy","Boolean","ExcludesNullish","syncTeamMembers","team","listMembersInOrg","team_slug","slug","currentIterationMemberIds","filter","partialUpdateMany","memberId","$ne","$push","$pull","syncTeams","teamEmbeds","teamIds","orgTeams","syncTeamsAndTeamMembers","dmMessages","orgSettings","octokitApp","find","o","params","findByKey","installation","apps","getOrgInstallation","catch","err","width","Object","entries","key","__html","patch","bodyParser","json","body","collection","updateOne","$set","value","updated","$setOnInsert","created","upsert","repository","repos","per_page","repo","owner","length","permissions","admin","data2","getRepoInstallation","syncUser","github","userInfo","userSettings","u","getUserInstallation","username","appRouter","app","getRouter","use","cookieParser","getOrCreateAccount","accountInfo","getKeys","keys","emojiRegex","createEmojiRegex","getEmojiFromRepoDescription","startsWith","emoji","exec","voidTeamSlack","mention","postMessage","resolve","updateMessage","deleteMessage","addReaction","updateHome","initTeamSlack","slackHome","context","account","slackToken","githubLoginToSlackEmail","reduce","acc","groupName","assign","slackEmails","values","slackClient","WebClient","membersInDb","findAll","members","foundEmailMembers","forEach","email","m","slack","im","missingEmails","includes","memberEmailToMemberId","page","profile","has","conversations","open","channel","log","membersMap","getUserFromGithubLogin","githubLogin","endsWith","slice","category","githubId","message","debug","DRY_RUN","chat","text","blocks","attachments","secondaryBlocks","thread_ts","ts","ok","update","delete","reactions","add","timestamp","scheduleUpdateMember","initAccountContext","appContext","payload","slackPromise","githubLoginToGroup","githubTeamNameToGroup","teamName","githubLoginToTeams","getReviewerGroups","githubLogins","Set","getGithubTeamsGroups","githubTeamNames","lock","Lock","accountEmbed","accountType","callback","reject","logInfos","info","createReleaseCallback","release","getReviewerGroup","getTeamGroup","getTeamsForLogin","getMembersForTeam","teamId","cursor","limit","toArray","approveShouldWait","reviewerGroup","pullRequest","includesReviewerGroup","includesWaitForGroups","requested_reviewers","requested_teams","requestedReviewerGroups","request","some","group","accountContextsPromise","accountContexts","obtainAccountContext","existingAccountContext","existingPromise","promise","then","accountContext","handlerOrgChange","organization","createHandlerOrgChange","checkIfUserIsBot","repoContext","checkIfIsThisBot","updateBranch","ref","merge","sha","issues","createComment","issue_number","number","options","optionsRegexps","option","regexp","RegExp","optionsDescriptions","labelKey","icon","parseOptions","content","defaultOptions","parseCommitNotes","commitNotes","trim","parseBody","hasLabelInPR","prLabels","label","l","readPullRequestCommits","pr","pull_request","pulls","listCommits","pull_number","hasFailedStatusOrChecks","checks","listForRef","failedChecks","check_runs","check","conclusion","combinedStatus","getCombinedStatusForRef","state","failedStatuses","statuses","autoMergeIfPossible","reviewflowPrContext","autoMergeLabel","removePrFromAutomergeQueue","isRenovatePr","createMergeLockPrFromPr","branch","addLog","action","repoFullName","full_name","automergeLogs","insertOne","isRenovate","mergeableState","mergeable_state","hasNeedsReview","hasRequestedReview","lockedPr","getMergeLockedPr","String","prId","prNumber","lockedPrNumber","pushAutomergeQueue","addMergeLockPr","mergeable","prResult","merged","reschedule","commits","c","author","renovateRebaseBody","parsedBody","commentBody","mergeResult","merge_method","commit_title","commit_message","errorMessage","defaultCommentBody","toMarkdownOptions","repoLink","labelsConfig","iconValue","checkboxWithId","labelDescription","labelLink","encodeURIComponent","join","toMarkdownInfos","infos","getReplacement","updateOptions","optionsToUpdate","internalUpdateBodyOptionsAndInfos","infosAndCommitNotesParagraph","createCommentBody","updateCommentOptions","updatedOptions","updateCommentBodyInfos","updateCommentBodyCommitsNotes","removeDeprecatedReviewflowInPrBody","prBody","createReviewflowComment","pullRequestNumber","getReviewflowCommentById","commentId","getComment","comment_id","getReviewflowPrContext","reviewflowCommentPromise","prEmbed","comment","reviewflowPr","prs","repoEmbed","existing","partialUpdateByKey","fetchPr","getLabelsForRepo","listLabelsForRepo","initRepoLabels","finalLabels","labelConfig","labelColor","existingLabel","createLabel","current_name","updateLabel","new_name","shouldIgnoreRepo","repoName","ignoreRepoRegexp","test","createGetReviewLabelIds","shouldIgnore","reviewGroupNames","initRepoContext","fullName","repoEmoji","getReviewLabelIds","needsReviewLabelIds","requestedReviewLabelIds","changesRequestedLabelIds","approvedReviewLabelIds","protectedLabelIds","labelIdToGroupName","reviewGroupLabels","lockMergePr","automergeQueue","lockPR","prOrPrIssueId","setTimeout","hasChangesRequestedReview","hasApprovesReview","getNeedsReviewGroupNames","console","reason","shift","previousLength","p","lockPullRequest","repoContextsPromise","repoContexts","obtainRepoContext","existingRepoContext","createRepoHandler","createPullRequestHandler","getPullRequestInPayload","callbackPr","callbackBeforeLock","createPullRequestsHandler","getPrs","checkrunCompleted","on","check_run","pull_requests","updatedPr","checksuiteCompleted","check_suite","createLink","createPrLink","html_url","createOwnerPart","ownerMention","sendTo","isAssignedTo","assignees","a","createStatus","createCommitStatus","target_url","addStatusCheck","previousSha","hasPrCheck","head_sha","started_at","created_at","completed_at","toISOString","output","updateStatusCheckFromLabels","createFailedStatusCheck","rr","rt","needsReviewGroupNames","updateReviewStatus","reviewGroup","labelsToAdd","remove","labelsToRemove","newLabelNames","toAdd","toAddNames","toDelete","toDeleteNames","getLabelFromKey","reviewConfig","prLabel","size","addLabels","toDeleteName","removeLabel","warn","newLabelNamesArray","oldLabels","setLabels","getReviewersAndReviewStates","userIds","reviewers","reviewStatesByUser","listReviews","reviews","toUpperCase","reviewStates","dismissed","reviewer","getRolesFromPullRequestAndReviewers","assigneeIds","followers","requestedReviewers","isRequestedByName","requestedByTeams","f","closed","isNotFork","git","deleteRef","requestedReviewer","assignee","senderMention","sender","prLink","slackUtils","createMessage","to","ownerPart","follower","createMrkdwnSectionBlock","createSlackMessageWithSecondaryBlock","secondaryBlockText","getPullRequestFromPayload","parse","issueParser","actions","issuePrefixes","parseMentions","mentions","slackifyCommentBody","multipleLines","slackifyMarkdown","getDiscussion","in_reply_to_id","listReviewComments","getMentions","discussion","getUsersInThread","prCommentCreated","saveInDb","results","filtered","slackSentMessages","typeId","sentTo","prUser","pull_request_review_id","commentByOwner","usersInThread","prUrl","commentLink","toOwner","promisesOwner","promisesNotOwner","slackifiedBody","start_line","isBotUser","slackMessage","updatePrCommentBody","newBody","updateComment","updatePrCommentBodyIfNeeded","updatePrCommentBodyOptions","syncLabel","shouldHaveLabel","prHasLabel","onRemove","onAdd","response","calcDefaultOptions","automergeLabel","skipCiLabel","prHasSkipCiLabel","prHasAutoMergeLabel","syncLabelsAfterCommentBodyEdited","prCommentEditedOrDeleted","closed_at","criteria","sentMessages","sentMessage","readCommitsAndUpdateInfos","conventionalCommits","commit","breakingChangesCommits","index","breakingChangesNotes","notes","note","breakingChangesLabel","newCommentBody","cleanNewLines","checkIfHasDiff","text1","text2","updatePrIfNeeded","hasDiffInTitle","hasDiffInBody","diff","cleanTitle","s","arg1","arg2","toLowerCase","editOpenedPR","shouldUpdateCommentBodyInfos","parsePRValue","errorStatus","parsePRKey","rules","rule","date","hasLintPrCheck","promises","commentBodyInfos","shouldCreateCommentBody","edited","updatedPullRequest","isFromRenovate","labelsChanged","fromRenovate","codeApprovedLabel","codeNeedsReviewLabel","autoMergeSkipCiLabel","createReview","event","updateBranchLabel","autoApproveAndAutoMerge","autoAssignPRToCreator","addAssignees","opened","reopened","reviewDismissed","hasChangesRequestedInReviews","hasApprovals","hasRequestedReviewsForGroup","reviewRequestRemoved","requested_reviewer","requestedTeam","requested_team","hasApprovedInReviews","assigneesLogins","potentialReviewer","sentMessageRequestedReview","split","deleteOne","reviewRequested","getEmojiFromState","reviewSubmitted","reviewUrl","isReviewByOwner","filteredFollowers","newLabels","isSameBranch","branches","b","synchronize","before","repoEdited","initApp","openedHandler","editedHandler","closedHandler","reopenedHandler","reviewRequestedHandler","reviewRequestRemovedHandler","reviewSubmittedHandler","reviewDismissedHandler","synchronizeHandler","commentCreated","commentEditedOrDeleted","MONGO_DB","init","MONGO_HOST","MONGO_PORT","MONGO_USER","MONGO_PASSWORD","connection","MongoConnection","MongoStore","coll","createIndex","unique","$lt","createSlackHomeWorker","updateMember","prsWithRequestedReviews","prsToMerge","prsWithRequestedChanges","prsInDraft","search","issuesAndPullRequests","q","sort","order","buildBlocks","total_count","items","repository_url","prFullName","elements","draft","image_url","avatar_url","alt_text","flat","views","publish","user_id","view","workerInterval","queueKeys","queue","stop","clearInterval","start","setInterval","item","scheduleUpdateOrg","scheduleUpdateAllOrgs","run","mongoInit"],"mappings":"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"}