{"version":3,"file":"index-node12.cjs.js","sources":["../src/auth/github.ts","../src/views/Layout.tsx","../src/app/auth.tsx","../src/app/home.tsx","../src/accountConfigs/christophehurpeau.ts","../src/accountConfigs/defaultConfig.ts","../src/accountConfigs/ornikar.ts","../src/accountConfigs/reviewflow.ts","../src/accountConfigs/index.ts","../src/dm/defaultDmSettings.ts","../src/dm/getUserDmSettings.ts","../src/events/account-handlers/actions/syncOrg.ts","../src/utils/Excludes.ts","../src/events/account-handlers/actions/syncTeamMembers.ts","../src/events/account-handlers/actions/syncTeams.ts","../src/app/org-settings.tsx","../src/app/repository.tsx","../src/events/account-handlers/actions/syncUser.ts","../src/app/user-settings.tsx","../src/appRouter.tsx","../src/context/getOrCreateAccount.ts","../src/context/utils.ts","../src/context/voidTeamSlack.ts","../src/context/initTeamSlack.ts","../src/context/accountContext.ts","../src/events/account-handlers/utils/handler.ts","../src/events/pr-handlers/actions/utils/body/prOptions.ts","../src/events/pr-handlers/actions/utils/body/parseBody.ts","../src/events/pr-handlers/actions/utils/hasLabelInPR.ts","../src/events/pr-handlers/actions/autoMergeIfPossible.ts","../src/events/pr-handlers/actions/utils/body/updateBody.ts","../src/events/pr-handlers/utils/reviewflowComment.ts","../src/events/pr-handlers/utils/createPullRequestContext.ts","../src/events/pr-handlers/utils/fetchPr.ts","../src/context/initRepoLabels.ts","../src/context/repoContext.ts","../src/events/repository-handlers/utils/createRepoHandler.ts","../src/events/pr-handlers/utils/createPullRequestHandler.ts","../src/events/pr-handlers/checkrunCompleted.ts","../src/events/pr-handlers/checksuiteCompleted.ts","../src/slack/utils.ts","../src/events/pr-handlers/actions/utils/createStatus.ts","../src/events/pr-handlers/actions/updateStatusCheckFromLabels.ts","../src/events/pr-handlers/actions/updateReviewStatus.ts","../src/events/pr-handlers/utils/getReviewersAndReviewStates.ts","../src/events/pr-handlers/utils/getRolesFromPullRequestAndReviewers.ts","../src/events/pr-handlers/closed.ts","../src/events/pr-handlers/utils/createSlackMessageWithSecondaryBlock.ts","../src/events/pr-handlers/utils/getPullRequestFromPayload.ts","../src/events/pr-handlers/utils/isBotUser.ts","../src/events/pr-handlers/utils/parseMentions.ts","../src/events/pr-handlers/utils/slackifyCommentBody.ts","../src/events/pr-handlers/commentCreated.ts","../src/events/pr-handlers/actions/updatePrCommentBody.ts","../src/events/pr-handlers/actions/utils/syncLabel.ts","../src/events/pr-handlers/actions/syncLabelsAfterCommentBodyEdited.ts","../src/events/pr-handlers/commentEditedOrDeleted.ts","../src/events/pr-handlers/actions/readCommitsAndUpdateInfos.ts","../src/events/pr-handlers/actions/updatePr.ts","../src/events/pr-handlers/actions/utils/cleanTitle.ts","../src/events/pr-handlers/actions/editOpenedPR.ts","../src/events/pr-handlers/edited.ts","../src/events/pr-handlers/actions/updateBranch.ts","../src/events/pr-handlers/labelsChanged.ts","../src/events/pr-handlers/actions/autoApproveAndAutoMerge.ts","../src/events/pr-handlers/actions/autoAssignPRToCreator.ts","../src/events/pr-handlers/opened.ts","../src/events/pr-handlers/reopened.ts","../src/events/pr-handlers/reviewDismissed.ts","../src/events/pr-handlers/reviewRequestRemoved.ts","../src/events/pr-handlers/reviewRequested.ts","../src/events/pr-handlers/reviewSubmitted.ts","../src/events/pr-handlers/status.ts","../src/events/pr-handlers/synchronize.ts","../src/events/repository-handlers/repoEdited.ts","../src/initApp.ts","../src/mongo.ts","../src/slack/home.ts","../src/index.ts"],"sourcesContent":["import { create } from 'simple-oauth2';\n\nif (!process.env.GITHUB_CLIENT_ID) {\n  throw new Error('Missing env variable: GITHUB_CLIENT_ID');\n}\n\nif (!process.env.GITHUB_CLIENT_SECRET) {\n  throw new Error('Missing env variable: GITHUB_CLIENT_SECRET');\n}\n\nexport const oauth2 = create({\n  client: {\n    id: process.env.GITHUB_CLIENT_ID,\n    secret: process.env.GITHUB_CLIENT_SECRET,\n  },\n  auth: {\n    tokenHost: 'https://github.com',\n    tokenPath: '/login/oauth/access_token',\n    authorizePath: '/login/oauth/authorize',\n  },\n});\n","import type { ReactElement, ReactNode } from 'react';\nimport React from 'react';\n\ninterface LayoutProps {\n  lang?: string;\n  title?: string;\n  children: ReactNode;\n}\n\nexport default function Layout({\n  lang = 'en',\n  title = process.env.REVIEWFLOW_NAME,\n  children,\n}: LayoutProps): ReactElement {\n  return (\n    <html lang={lang}>\n      <head>\n        <meta charSet=\"UTF-8\" />\n        <meta name=\"robots\" content=\"noindex\" />\n        <title>{title}</title>\n        <link\n          rel=\"stylesheet\"\n          type=\"text/css\"\n          href=\"https://christophe.hurpeau.com/index.css\"\n        />\n        <style>{`html,body,html body\n            #container{height:100%} footer{position:absolute;bottom:5px;left:0;right:0;}`}</style>\n      </head>\n      <body>\n        <div style={{ padding: '24px 48px' }}>{children}</div>\n      </body>\n    </html>\n  );\n}\n","import { promisify } from 'util';\nimport { Octokit } from '@octokit/rest';\nimport type { Router, Request, Response } from 'express';\nimport { sign, verify } from 'jsonwebtoken';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport * as githubAuth from '../auth/github';\nimport Layout from '../views/Layout';\n\nif (!process.env.AUTH_SECRET_KEY) {\n  throw new Error('Missing env variable: AUTH_SECRET_KEY');\n}\n\nconst AUTH_SECRET_KEY: string = process.env.AUTH_SECRET_KEY;\n\nconst signPromisified: any = promisify(sign);\nconst verifyPromisified: any = promisify(verify);\n\nconst secure =\n  !!process.env.SECURE_COOKIE && process.env.SECURE_COOKIE !== 'false';\n\nconst createRedirectUri = (req: Request): string => {\n  const host = `http${secure ? 's' : ''}://${req.hostname}${\n    req.hostname === 'localhost' ? `:${process.env.PORT || 3000}` : ''\n  }`;\n  return `${host}/app/login-response`;\n};\n\ninterface AuthInfo {\n  id: number;\n  login: string;\n  accessToken: string;\n  time: number;\n}\n\nconst readAuthCookie = (\n  req: Request,\n  strategy: string,\n): undefined | Promise<undefined | AuthInfo> => {\n  const cookie = req.cookies[`auth_${strategy}`];\n  if (!cookie) return;\n\n  return verifyPromisified(cookie, AUTH_SECRET_KEY, {\n    algorithm: 'HS512',\n    audience: req.headers['user-agent'],\n  });\n};\n\nconst getAuthInfoFromCookie = async (\n  req: Request,\n  res: Response,\n): Promise<undefined | AuthInfo> => {\n  const strategy = 'gh'; // req.params.strategy\n  try {\n    const authInfo = await readAuthCookie(req, strategy);\n\n    if (authInfo?.id) {\n      return authInfo;\n    }\n  } catch {}\n\n  res.clearCookie(`auth_${strategy}`);\n  return undefined;\n};\n\nfunction createApi(accessToken: string): Octokit {\n  return new Octokit({ auth: accessToken });\n}\n\nexport const getUser = async (\n  req: Request,\n  res: Response,\n): Promise<{\n  authInfo: AuthInfo;\n  api: Octokit;\n} | null> => {\n  const authInfo = await getAuthInfoFromCookie(req, res);\n  if (!authInfo) {\n    res.redirect('/app/login');\n    return null;\n  }\n\n  const api = createApi(authInfo.accessToken);\n\n  return {\n    authInfo,\n    api,\n  };\n};\n\nexport default function auth(router: Router): void {\n  router.get('/login', async (req: Request, res: Response) => {\n    if (await getAuthInfoFromCookie(req, res)) {\n      return res.redirect('/app');\n    }\n\n    // const state = await randomHex(8);\n    // res.cookie(`auth_${strategy}_${state}`, strategy, {\n    //   maxAge: 10 * 60 * 1000,\n    //   httpOnly: true,\n    //   secure,\n    // });\n\n    const redirectUri = githubAuth.oauth2.authorizationCode.authorizeURL({\n      redirect_uri: createRedirectUri(req),\n      scope: 'read:user,repo',\n      // state,\n      // grant_type: options.grantType,\n      // access_type: options.accessType,\n      // login_hint: req.query.loginHint,\n      // include_granted_scopes: options.includeGrantedScopes,\n    });\n\n    // console.log(redirectUri);\n\n    res.redirect(redirectUri);\n  });\n\n  router.get('/login-response', async (req, res) => {\n    if (req.query.error) {\n      res.send(req.query.error_description);\n      return;\n    }\n\n    const strategy = 'gh';\n    const code: string = req.query.code as string;\n    // const state = req.query.state;\n    // const cookieName = `auth_${strategy}_${state}`;\n    // const cookie = req.cookies && req.cookies[cookieName];\n    // if (!cookie) {\n    //   // res.redirect(`/${strategy}/login`);\n    //   res.send(\n    //     '<html><body>No cookie for this state. <a href=\"/app/login\">Retry ?</a></body></html>',\n    //   );\n    //   return;\n    // }\n    // res.clearCookie(cookieName);\n\n    const result = await githubAuth.oauth2.authorizationCode.getToken({\n      code,\n      redirect_uri: createRedirectUri(req),\n    });\n\n    if (!result) {\n      res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              Could not get access token. <a href=\"/app/login\">Retry ?</a>\n            </div>\n          </Layout>,\n        ),\n      );\n      return;\n    }\n\n    const accessToken = result.access_token;\n    const api = createApi(accessToken);\n    const user = await api.users.getAuthenticated({});\n    const id = user.data.id;\n    const login = user.data.login;\n\n    const authInfo: AuthInfo = { id, login, accessToken, time: Date.now() };\n    const token = await signPromisified(authInfo, AUTH_SECRET_KEY, {\n      algorithm: 'HS512',\n      audience: req.headers['user-agent'],\n      expiresIn: '10 days',\n    });\n\n    res.cookie(`auth_${strategy}`, token, {\n      httpOnly: true,\n      secure,\n    });\n\n    res.redirect('/app');\n  });\n}\n","import type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function home(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n  mongoStores: MongoStores,\n): void {\n  router.get('/', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    const orgs = await user.api.orgs.listForAuthenticatedUser();\n\n    res.send(\n      renderToStaticMarkup(\n        <Layout>\n          <div>\n            <h1>{process.env.REVIEWFLOW_NAME}</h1>\n            <div style={{ display: 'flex' }}>\n              <div style={{ flexGrow: 1 }}>\n                <h4>Choose your account</h4>\n                <ul>\n                  <li>\n                    <a href=\"/app/user\">{user.authInfo.login}</a>\n                  </li>\n                  {orgs.data.map((org) => (\n                    <li key={org.id}>\n                      <a href={`/app/org/${org.login}`}>{org.login}</a>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n        </Layout>,\n      ),\n    );\n  });\n}\n","import type { Config } from './types';\n\nconst config: Config<'dev', never> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  requiresReviewRequest: false,\n  prDefaultOptions: {\n    featureBranch: false,\n    autoMergeWithSkipCi: false,\n    autoMerge: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [\n      {\n        regExp:\n          // eslint-disable-next-line unicorn/no-unsafe-regex\n          /^(revert: )?(build|chore|ci|docs|feat|fix|perf|refactor|style|test)(\\(([/a-z-]*)\\))?(!)?:\\s/,\n        error: {\n          title: 'Title does not match commitlint conventional',\n          summary:\n            'https://www.npmjs.com/package/@commitlint/config-conventional',\n        },\n      },\n    ],\n  },\n  groups: {\n    dev: {\n      christophehurpeau: 'christophe@hurpeau.com',\n      tilap: 'jlavinh@gmail.com',\n    },\n  },\n  waitForGroups: {\n    dev: [],\n  },\n  teams: {},\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* code */\n      'code/needs-review': {\n        name: ':ok_hand: code/needs-review',\n        color: '#FFD57F',\n      },\n      'code/review-requested': {\n        name: ':ok_hand: code/review-requested',\n        color: '#B2E1FF',\n      },\n      'code/changes-requested': {\n        name: ':ok_hand: code/changes-requested',\n        color: '#e11d21',\n      },\n      'code/approved': {\n        name: ':ok_hand: code/approved',\n        color: '#64DD17',\n      },\n\n      /* auto merge */\n      'merge/automerge': {\n        name: ':vertical_traffic_light: automerge',\n        color: '#64DD17',\n      },\n      'merge/skip-ci': {\n        name: 'automerge/skip-ci',\n        color: '#e1e8ed',\n      },\n      'merge/update-branch': {\n        name: ':arrows_counterclockwise: update branch',\n        color: '#64DD17',\n      },\n\n      /* feature-branch */\n      'feature-branch': {\n        name: 'feature-branch',\n        color: '#7FCEFF',\n      },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        color: '#ef7934',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n      dev: {\n        needsReview: 'code/needs-review',\n        requested: 'code/review-requested',\n        changesRequested: 'code/changes-requested',\n        approved: 'code/approved',\n      },\n    },\n  },\n};\n\nexport default config;\n","import type { Config } from './types';\n\nconst config: Config<never, never> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  requiresReviewRequest: false,\n  prDefaultOptions: {\n    featureBranch: false,\n    autoMergeWithSkipCi: false,\n    autoMerge: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [],\n  },\n  groups: {},\n  waitForGroups: {},\n  teams: {},\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        color: '#ef7934',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n    },\n  },\n};\n\nexport default config;\n","import type { Config } from './types';\n\nconst config: Config<'dev' | 'design', 'ops' | 'frontends' | 'backends'> = {\n  autoAssignToCreator: true,\n  trimTitle: true,\n  ignoreRepoPattern: '(infra-.*|devenv)',\n  requiresReviewRequest: true,\n  autoMergeRenovateWithSkipCi: false,\n  prDefaultOptions: {\n    featureBranch: false,\n    autoMergeWithSkipCi: false,\n    autoMerge: false,\n    deleteAfterMerge: true,\n  },\n  parsePR: {\n    title: [\n      {\n        regExp:\n          // eslint-disable-next-line unicorn/no-unsafe-regex\n          /^(revert: )?(build|chore|ci|docs|feat|fix|perf|refactor|style|test)(\\(([/a-z-]*)\\))?:\\s/,\n        error: {\n          title: 'Title does not match commitlint conventional',\n          summary:\n            'https://www.npmjs.com/package/@commitlint/config-conventional',\n        },\n      },\n      {\n        bot: false,\n        regExp: /\\s([A-Z][\\dA-Z]+-(\\d+)|\\[no issue])$/,\n        error: {\n          title: 'Title does not have JIRA issue',\n          summary: 'The PR title should end with ONK-0000, or [no issue]',\n        },\n        status: 'jira-issue',\n        statusInfoFromMatch: (match) => {\n          const issue = match[1];\n          if (issue === '[no issue]') {\n            return {\n              title: 'No issue',\n              summary: '',\n            };\n          }\n          return {\n            inBody: true,\n            url: `https://ornikar.atlassian.net/browse/${issue}`,\n            title: `JIRA issue: ${issue}`,\n            summary: `[${issue}](https://ornikar.atlassian.net/browse/${issue})`,\n          };\n        },\n      },\n    ],\n  },\n\n  botUsers: ['michael-robot'],\n\n  groups: {\n    dev: {\n      /* ops */\n      JulienBreux: `julien.breux${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      TheR3aLp3nGuinJM: `jean-michel${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n\n      /* back */\n      abarreir: `alexandre${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      damienorny: `damien.orny${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      'Thierry-girod': `thierry${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      darame07: `kevin${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      Pixy: `pierre-alexis${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      machartier: `marie-anne${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      camillebaronnet: `camille.baronnet${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n\n      /* front */\n      christophehurpeau: `christophe${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      HugoGarrido: `hugo${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      CorentinAndre: `corentin${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      Mxime: `maxime${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      vlbr: `valerian${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      'budet-b': `benjamin.budet${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      mdcarter: `maxime.dehaye${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      ChibiBlasphem: `christopher${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      PSniezak: `paul.sniezak${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      GaelFerrand: 'gael.ferrand@othrys.dev',\n      aenario: `romain.foucault${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n    },\n    design: {\n      jperriere: `julien${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      CoralineColasse: `coraline${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      Lenamari: `lena${process.env.ORNIKAR_EMAIL_DOMAIN}`,\n      loicleser: null,\n      carlbouville: `carl.bouville{process.env.ORNIKAR_EMAIL_DOMAIN}`,\n    },\n  },\n\n  teams: {\n    ops: {\n      logins: ['JulienBreux', 'Alan-pad', 'CamilSadiki', 'busser'],\n      labels: ['teams/ops'],\n    },\n\n    backends: {\n      logins: [\n        'abarreir',\n        'arthurflachs',\n        'damienorny',\n        'Thierry-girod',\n        'darame07',\n        'Pixy',\n        'machartier',\n        'camillebaronnet',\n      ],\n      labels: ['teams/backend'],\n    },\n\n    frontends: {\n      logins: [\n        'christophehurpeau',\n        'HugoGarrido',\n        'LentnerStefan',\n        'CorentinAndre',\n        'Mxime',\n        'vlbr',\n        'budet-b',\n        'mdcarter',\n        'ChibiBlasphem',\n        'PSniezak',\n        'aenario',\n      ],\n      labels: ['teams/frontend'],\n    },\n  },\n\n  waitForGroups: {\n    dev: [],\n    design: ['dev'],\n  },\n  labels: {\n    list: {\n      // /* ci */\n      // 'ci/in-progress': { name: ':green_heart: ci/in-progress', color: '#0052cc' },\n      // 'ci/fail': { name: ':green_heart: ci/fail', color: '#e11d21' },\n      // 'ci/passed': { name: ':green_heart: ci/passed', color: '#86f9b4' },\n\n      /* code */\n      'code/needs-review': {\n        name: ':ok_hand: code/needs-review',\n        color: '#FFC44C',\n      },\n      'code/review-requested': {\n        name: ':ok_hand: code/review-requested',\n        color: '#DAE1E6',\n      },\n      'code/changes-requested': {\n        name: ':ok_hand: code/changes-requested',\n        color: '#e11d21',\n      },\n      'code/approved': {\n        name: ':ok_hand: code/approved',\n        color: '#64DD17',\n      },\n\n      /* design */\n      'design/needs-review': {\n        name: ':art: design/needs-review',\n        color: '#FFC44C',\n      },\n      'design/review-requested': {\n        name: ':art: design/review-requested',\n        color: '#DAE1E6',\n      },\n      'design/changes-requested': {\n        name: ':art: design/changes-requested',\n        color: '#e11d21',\n      },\n      'design/approved': {\n        name: ':art: design/approved',\n        color: '#64DD17',\n      },\n\n      /* teams */\n      'teams/ops': {\n        name: 'ops',\n        color: '#003b55',\n      },\n      'teams/backend': {\n        name: 'backend',\n        color: '#6ad8cb',\n      },\n      'teams/frontend': {\n        name: 'frontend',\n        color: '#8a5abc',\n      },\n\n      /* auto merge */\n      'merge/automerge': {\n        name: ':soon: automerge',\n        color: '#64DD17',\n      },\n      'merge/skip-ci': {\n        name: 'automerge/skip-ci',\n        color: '#e1e8ed',\n      },\n      'merge/update-branch': {\n        name: ':arrows_counterclockwise: update branch',\n        color: '#e1e8ed',\n      },\n\n      /* feature-branch */\n      'feature-branch': {\n        name: 'feature-branch',\n        color: '#7FCEFF',\n      },\n\n      /* infos */\n      'breaking-changes': {\n        name: ':warning: Breaking Changes',\n        description: 'This issue or pull request will need a new major version',\n        color: '#FF6F00',\n      },\n      duplicate: {\n        name: 'duplicate',\n        description: 'This issue or pull request already exists',\n        color: '#ECEFF1',\n      },\n      documentation: {\n        name: 'documentation',\n        description: 'Improvements or additions to documentation',\n        color: '#7FCEFF',\n      },\n      rfc: {\n        name: 'RFC',\n        description: 'Request For Comments',\n        color: '#FFD3B2',\n      },\n      bug: {\n        name: 'bug',\n        description: \"Something isn't working\",\n        color: '#FF3D00',\n      },\n      enhancement: {\n        name: 'enhancement',\n        description: 'New feature or request',\n        color: '#7FCEFF',\n      },\n      'help-wanted': {\n        name: 'help wanted',\n        description: 'Extra attention is needed',\n        color: '#B1EE8B',\n      },\n      question: {\n        name: 'question',\n        description: 'Further information is requested',\n        color: '#F860A4',\n      },\n      wontfix: {\n        name: 'wontfix',\n        description: 'This will not be worked on',\n        color: '#ECEFF1',\n      },\n    },\n\n    review: {\n      ci: {\n        inProgress: 'ci/in-progress',\n        succeeded: 'ci/success',\n        failed: 'ci/fail',\n      },\n      dev: {\n        needsReview: 'code/needs-review',\n        requested: 'code/review-requested',\n        changesRequested: 'code/changes-requested',\n        approved: 'code/approved',\n      },\n      design: {\n        needsReview: 'design/needs-review',\n        requested: 'design/review-requested',\n        changesRequested: 'design/changes-requested',\n        approved: 'design/approved',\n      },\n    },\n  },\n};\n\nexport default config;\n","import chrisconfig from './christophehurpeau';\nimport type { Config } from './types';\n\nconst config: Config<'dev', never> = {\n  ...chrisconfig,\n  requiresReviewRequest: true,\n  groups: {\n    dev: {\n      christophehurpeau: 'christophe@hurpeau.com',\n      'chris-reviewflow': 'christophe.hurpeau+reviewflow@gmail.com',\n    },\n  },\n};\nexport default config;\n","import christophehurpeau from './christophehurpeau';\nimport defaultConfig from './defaultConfig';\nimport ornikar from './ornikar';\nimport reviewflow from './reviewflow';\nimport type { Config as ConfigType } from './types';\n\nexport type Config<\n  GroupNames extends string = any,\n  TeamNames extends string = any\n> = ConfigType<GroupNames, TeamNames>;\n\nexport const accountConfigs: { [owner: string]: Config } = {\n  ornikar,\n  christophehurpeau,\n  reviewflow,\n};\n\nexport { defaultConfig };\n\n// flat requires node 11\n// export const getMembers = <GroupNames extends string = any>(\n//   groups: Record<GroupNames, Group>,\n// ): string[] => {\n//   return Object.values(groups).flat(1);\n// };\n","import type { MessageCategory } from './MessageCategory';\n\nexport const defaultDmSettings: Record<MessageCategory, boolean> = {\n  'pr-lifecycle': true,\n  'pr-lifecycle-follow': true,\n  'pr-review': true,\n  'pr-review-follow': true,\n  'pr-comment': true,\n  'pr-comment-bots': true,\n  'pr-comment-follow': true,\n  'pr-comment-follow-bots': false,\n  'pr-comment-mention': true,\n  'pr-comment-thread': true,\n  'pr-merge-conflicts': true,\n  'issue-comment-mention': true,\n};\n","import { accountConfigs, defaultConfig } from '../accountConfigs';\nimport type { MongoStores } from '../mongo';\nimport type { MessageCategory } from './MessageCategory';\nimport { defaultDmSettings } from './defaultDmSettings';\n\nexport type UserDmSettings = Record<MessageCategory, boolean>;\nconst cache = new Map<string, Map<number, UserDmSettings>>();\n\nconst getDefaultDmSettings = (org: string): UserDmSettings => {\n  const accountConfig = accountConfigs[org] || defaultConfig;\n  return accountConfig.defaultDmSettings\n    ? { ...defaultDmSettings, ...accountConfig.defaultDmSettings }\n    : defaultDmSettings;\n};\n\nexport const updateCache = (\n  org: string,\n  userId: number,\n  newSettings: Partial<UserDmSettings>,\n): void => {\n  let orgCache = cache.get(org);\n  if (!orgCache) {\n    orgCache = new Map();\n    cache.set(org, orgCache);\n  }\n  orgCache.set(userId, { ...getDefaultDmSettings(org), ...newSettings });\n};\n\nexport const getUserDmSettings = async (\n  mongoStores: MongoStores,\n  org: string,\n  orgId: number,\n  userId: number,\n): Promise<UserDmSettings> => {\n  const orgDefaultDmSettings = getDefaultDmSettings(org);\n\n  const userDmSettingsConfig = await mongoStores.userDmSettings.findOne({\n    orgId,\n    userId,\n  });\n\n  const config = userDmSettingsConfig\n    ? {\n        ...orgDefaultDmSettings,\n        ...userDmSettingsConfig.settings,\n      }\n    : orgDefaultDmSettings;\n\n  updateCache(org, userId, config);\n  return config;\n};\n","import type { MongoStores, Org } from '../../../mongo';\nimport type { Octokit } from '../../../octokit';\n\ninterface OrgInfo {\n  login: string;\n  id: number;\n}\n\nexport const syncOrg = async <T extends Octokit>(\n  mongoStores: MongoStores,\n  octokit: T,\n  installationId: number,\n  org: OrgInfo,\n): Promise<Org> => {\n  const orgInStore = await mongoStores.orgs.upsertOne({\n    _id: org.id,\n    login: org.login,\n    installationId,\n  });\n\n  const orgEmbed = { id: org.id, login: org.login };\n\n  const memberIds: number[] = [];\n\n  for await (const { data } of octokit.paginate.iterator(\n    octokit.orgs.listMembers,\n    { org: org.login },\n  )) {\n    await Promise.all(\n      data.map(async (member) => {\n        if (!member) return;\n        memberIds.push(member.id);\n        return Promise.all([\n          mongoStores.orgMembers.upsertOne<'teams'>(\n            {\n              _id: `${org.id}_${member.id}`,\n              org: orgEmbed,\n              user: {\n                id: member.id,\n                login: member.login,\n              },\n            },\n            {\n              teams: [], // teams is synced in syncTeamMembers\n            },\n          ),\n          mongoStores.users.upsertOne({\n            _id: member.id as any,\n            login: member.login,\n            type: member.type,\n          }),\n        ]);\n      }),\n    );\n  }\n\n  await mongoStores.orgMembers.deleteMany({\n    'org.id': org.id,\n    'user.id': { $not: { $in: memberIds } },\n  });\n\n  return orgInStore;\n};\n","export const ExcludesFalsy = (Boolean as any) as <T>(\n  x: T | false | null | undefined,\n) => x is T;\n\nexport const ExcludesNullish = (((res: any) => res !== null) as any) as <T>(\n  x: T | null,\n) => x is T;\n","import type { MongoStores, OrgTeamEmbed } from '../../../mongo';\nimport type { Octokit } from '../../../octokit';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\n\nexport const syncTeamMembers = async (\n  mongoStores: MongoStores,\n  octokit: Octokit,\n  org: { login: string; id: number },\n  team: OrgTeamEmbed,\n): Promise<void> => {\n  const memberIds: number[] = [];\n  for await (const { data } of octokit.paginate.iterator(\n    octokit.teams.listMembersInOrg,\n    {\n      org: org.login,\n      team_slug: team.slug,\n    },\n  )) {\n    const currentIterationMemberIds = data\n      .filter(ExcludesFalsy)\n      .map((member) => member.id);\n    memberIds.push(...currentIterationMemberIds);\n\n    await mongoStores.orgMembers.partialUpdateMany(\n      {\n        _id: {\n          $in: currentIterationMemberIds.map(\n            (memberId) => `${org.id}_${memberId}`,\n          ),\n        },\n        'org.id': org.id,\n        'teams.id': { $ne: team.id },\n      },\n      { $push: { teams: team } },\n    );\n  }\n\n  await mongoStores.orgMembers.partialUpdateMany(\n    {\n      'org.id': org.id,\n      'user.id': { $not: { $in: memberIds } },\n    },\n    { $pull: { teams: { id: team.id } } },\n  );\n};\n\nexport const syncTeamMembersWithTeamParents = async (\n  mongoStores: MongoStores,\n  octokit: Octokit,\n  org: { login: string; id: number },\n  team: OrgTeamEmbed,\n): Promise<void> => {};\n","import type { MongoStores, OrgTeamEmbed } from '../../../mongo';\nimport type { Octokit } from '../../../octokit';\nimport { syncTeamMembers } from './syncTeamMembers';\n\nexport const syncTeams = async (\n  mongoStores: MongoStores,\n  octokit: Octokit,\n  org: { login: string; id: number },\n): Promise<OrgTeamEmbed[]> => {\n  const orgEmbed = { id: org.id, login: org.login };\n\n  const teamEmbeds: OrgTeamEmbed[] = [];\n  const teamIds: number[] = [];\n\n  for await (const { data } of octokit.paginate.iterator(octokit.teams.list, {\n    org: org.login,\n  })) {\n    await Promise.all(\n      data.map(async (team) => {\n        teamIds.push(team.id);\n        teamEmbeds.push({\n          id: team.id,\n          name: team.name,\n          slug: team.slug,\n        });\n        return mongoStores.orgTeams.upsertOne({\n          _id: team.id,\n          org: orgEmbed,\n          name: team.name,\n          slug: team.slug,\n          description: team.description,\n        });\n      }),\n    );\n  }\n\n  await Promise.all([\n    mongoStores.orgTeams.deleteMany({\n      'org.id': org.id,\n      _id: { $not: { $in: teamIds } },\n    }),\n\n    mongoStores.orgMembers.partialUpdateMany(\n      {\n        'org.id': org.id,\n      },\n      { $pull: { teams: { id: { $not: { $in: teamIds } } } } },\n    ),\n  ]);\n\n  return teamEmbeds;\n};\n\nexport const syncTeamsAndTeamMembers = async (\n  mongoStores: MongoStores,\n  octokit: Octokit,\n  org: { login: string; id: number },\n): Promise<void> => {\n  const teams = await syncTeams(mongoStores, octokit, org);\n  for (const team of teams) {\n    await syncTeamMembers(mongoStores, octokit, org, team);\n  }\n};\n","import bodyParser from 'body-parser';\nimport type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { accountConfigs } from '../accountConfigs';\nimport type { MessageCategory } from '../dm/MessageCategory';\nimport { getUserDmSettings, updateCache } from '../dm/getUserDmSettings';\nimport { syncOrg } from '../events/account-handlers/actions/syncOrg';\nimport { syncTeamsAndTeamMembers } from '../events/account-handlers/actions/syncTeams';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nconst dmMessages: Record<MessageCategory, string> = {\n  'pr-lifecycle': 'Your PR is closed, merged, reopened',\n  'pr-lifecycle-follow':\n    \"Someone closed, merged, reopened a PR you're reviewing\",\n  'pr-review': 'You are assigned to a review, someone reviewed your PR',\n  'pr-review-follow': \"Someone reviewed a PR you're also reviewing\",\n  'pr-comment': 'Someone commented on your PR',\n  'pr-comment-bots': 'A bot commented on your PR',\n  'pr-comment-follow': \"Someone commented on a PR you're reviewing\",\n  'pr-comment-follow-bots': \"A bot commented on a PR you're reviewing\",\n  'pr-comment-mention': 'Someone mentioned you in a PR',\n  'pr-comment-thread': \"Someone replied to a discussion you're in\",\n  'pr-merge-conflicts': 'Your PR has a merge conflict (not implemented)',\n  'issue-comment-mention':\n    'Someone mentioned you in an issue (not implemented)',\n};\n\nexport default function orgSettings(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n  mongoStores: MongoStores,\n): void {\n  router.get('/org/:org/force-sync', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    const orgs = await user.api.orgs.listForAuthenticatedUser();\n    const org = orgs.data.find((o) => o.login === req.params.org);\n    if (!org) return res.redirect('/app');\n\n    const o = await mongoStores.orgs.findByKey(org.id);\n    if (!o) return res.redirect('/app');\n\n    await syncOrg(mongoStores, user.api, o.installationId as number, org);\n    await syncTeamsAndTeamMembers(mongoStores, user.api, org);\n\n    res.redirect(`/app/org/${req.params.org}`);\n  });\n\n  router.get('/org/:org', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    const orgs = await user.api.orgs.listForAuthenticatedUser();\n    const org = orgs.data.find((o) => o.login === req.params.org);\n    if (!org) return res.redirect('/app');\n\n    const installation = await octokitApp.apps\n      .getOrgInstallation({ org: org.login })\n      .catch((err) => {\n        return { status: err.status, data: undefined };\n      });\n\n    if (!installation) {\n      return res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              {process.env.REVIEWFLOW_NAME}{' '}\n              {\"isn't installed for this user. Go to \"}\n              <a\n                href={`https://github.com/settings/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n              >\n                Github Configuration\n              </a>{' '}\n              to install it.\n            </div>\n          </Layout>,\n        ),\n      );\n    }\n\n    const accountConfig = accountConfigs[org.login];\n    const userDmSettings = await getUserDmSettings(\n      mongoStores,\n      org.login,\n      org.id,\n      user.authInfo.id,\n    );\n\n    res.send(\n      renderToStaticMarkup(\n        <Layout>\n          <div>\n            <h1>{process.env.REVIEWFLOW_NAME}</h1>\n            <div style={{ display: 'flex' }}>\n              <h2 style={{ flexGrow: 1 }}>{org.login}</h2>\n              <a href=\"/app\">Switch account</a>\n            </div>\n\n            <div style={{ display: 'flex' }}>\n              <div style={{ flexGrow: 1 }}>\n                <h4>Information</h4>\n                {!accountConfig\n                  ? 'Default config is used: https://github.com/christophehurpeau/reviewflow/blob/master/src/accountConfigs/defaultConfig.ts'\n                  : `Custom config: https://github.com/christophehurpeau/reviewflow/blob/master/src/accountConfigs/${org.login}.ts`}\n              </div>\n              <div style={{ width: '380px' }}>\n                <h4>My DM Settings</h4>\n                {Object.entries(dmMessages).map(([key, name]) => (\n                  <div key={key}>\n                    <label htmlFor={key}>\n                      <span\n                        // eslint-disable-next-line react/no-danger\n                        dangerouslySetInnerHTML={{\n                          __html: `<input id=\"${key}\" type=\"checkbox\" autocomplete=\"off\" ${\n                            userDmSettings[key as MessageCategory]\n                              ? 'checked=\"checked\" '\n                              : ''\n                          }onclick=\"fetch(location.pathname, { method: 'PATCH', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ key: '${key}', value: event.currentTarget.checked }) })\" />`,\n                        }}\n                      />\n                      {name}\n                    </label>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </Layout>,\n      ),\n    );\n  });\n\n  router.patch('/org/:org', bodyParser.json(), async (req, res) => {\n    if (!req.body) {\n      res.status(400).send('not ok');\n      return;\n    }\n\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    const orgs = await user.api.orgs.listForAuthenticatedUser();\n    const org = orgs.data.find((o) => o.login === req.params.org);\n    if (!org) return res.redirect('/app');\n\n    (await mongoStores.userDmSettings.collection).updateOne(\n      {\n        _id: `${org.id}_${user.authInfo.id}`,\n      },\n      {\n        $set: {\n          [`settings.${req.body.key}`]: req.body.value,\n          updated: new Date(),\n        },\n        $setOnInsert: {\n          orgId: org.id,\n          userId: user.authInfo.id,\n          created: new Date(),\n        },\n      },\n      { upsert: true },\n    );\n\n    const userDmSettingsConfig = await mongoStores.userDmSettings.findOne({\n      orgId: org.id,\n      userId: user.authInfo.id,\n    });\n\n    if (userDmSettingsConfig) {\n      updateCache(org.login, user.authInfo.id, userDmSettingsConfig.settings);\n    }\n\n    res.send('ok');\n  });\n}\n","import type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function repository(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n): void {\n  router.get('/repositories', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n    const { data } = await user.api.repos.listForAuthenticatedUser({\n      per_page: 100,\n    });\n\n    res.send(\n      renderToStaticMarkup(\n        <Layout>\n          <div>\n            <h4>Your repositories</h4>\n            <ul>\n              {data.map((repo: any) => (\n                <li key={repo.id}>\n                  <a href={`/app/repository/${repo.owner.login}/${repo.name}`}>\n                    {repo.name}\n                  </a>\n                </li>\n              ))}\n            </ul>\n\n            {data.length === 100 && (\n              <div>We currently have a limit to 100 repositories</div>\n            )}\n          </div>\n        </Layout>,\n      ),\n    );\n  });\n\n  router.get('/repository/:owner/:repository', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n    const { data } = await user.api.repos.get({\n      owner: req.params.owner,\n      repo: req.params.repository,\n    });\n\n    if (!data) {\n      res.status(404).send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>repo not found</div>\n          </Layout>,\n        ),\n      );\n      return;\n    }\n\n    if (!data.permissions || !data.permissions.admin) {\n      res.status(401).send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              not authorized to see this repo, you need to have admin permission\n            </div>\n          </Layout>,\n        ),\n      );\n      return;\n    }\n\n    const { data: data2 } = await octokitApp.apps\n      .getRepoInstallation({\n        owner: req.params.owner,\n        repo: req.params.repository,\n      })\n      .catch((err) => {\n        return { status: err.status, data: undefined };\n      });\n\n    if (!data2) {\n      res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              {process.env.REVIEWFLOW_NAME}{' '}\n              {\"isn't installed on this repo. Go to \"}\n              <a\n                href={`https://github.com/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n              >\n                Github Configuration\n              </a>{' '}\n              to add it.\n            </div>\n          </Layout>,\n        ),\n      );\n      return;\n    }\n\n    res.send(\n      renderToStaticMarkup(\n        <Layout>\n          <div>\n            <h4>{req.params.repository}</h4>\n          </div>\n        </Layout>,\n      ),\n    );\n  });\n}\n","import type { MongoStores, User } from '../../../mongo';\nimport type { Octokit } from '../../../octokit';\n\ninterface UserInfo {\n  login: string;\n  id: number;\n}\n\nexport const syncUser = async (\n  mongoStores: MongoStores,\n  github: Octokit,\n  installationId: number,\n  userInfo: UserInfo,\n): Promise<User> => {\n  const user = await mongoStores.users.upsertOne({\n    _id: userInfo.id,\n    login: userInfo.login,\n    type: 'User',\n    installationId,\n  });\n\n  return user;\n};\n","import type { Router } from 'express';\nimport type { ProbotOctokit } from 'probot';\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { syncUser } from '../events/account-handlers/actions/syncUser';\nimport type { MongoStores } from '../mongo';\nimport Layout from '../views/Layout';\nimport { getUser } from './auth';\n\nexport default function userSettings(\n  router: Router,\n  octokitApp: InstanceType<typeof ProbotOctokit>,\n  mongoStores: MongoStores,\n): void {\n  router.get('/user/force-sync', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    // const { data: installation } = await api.apps\n    //   .getUserInstallation({\n    //     username: user.authInfo.login,\n    //   })\n    //   .catch((err) => {\n    //     return { status: err.status, data: undefined };\n    //   });\n\n    // console.log(installation);\n\n    const u = await mongoStores.users.findByKey(user.authInfo.id);\n    if (!u || !u.installationId) return res.redirect('/app');\n\n    await syncUser(\n      mongoStores,\n      user.api,\n      u.installationId as number,\n      user.authInfo,\n    );\n\n    res.redirect('/app/user');\n  });\n\n  router.get('/user', async (req, res) => {\n    const user = await getUser(req, res);\n    if (!user) return;\n\n    const { data: installation } = await octokitApp.apps\n      .getUserInstallation({\n        username: user.authInfo.login,\n      })\n      .catch((err) => {\n        return { status: err.status, data: undefined };\n      });\n\n    if (!installation) {\n      return res.send(\n        renderToStaticMarkup(\n          <Layout>\n            <div>\n              {process.env.REVIEWFLOW_NAME}{' '}\n              {\"isn't installed for this user. Go to \"}\n              <a\n                href={`https://github.com/settings/apps/${process.env.REVIEWFLOW_NAME}/installations/new`}\n              >\n                Github Configuration\n              </a>{' '}\n              to install it.\n            </div>\n          </Layout>,\n        ),\n      );\n    }\n\n    return res.send(\n      renderToStaticMarkup(\n        <Layout>\n          <div>{process.env.REVIEWFLOW_NAME} is installed for this user</div>\n        </Layout>,\n      ),\n    );\n  });\n}\n","import cookieParser from 'cookie-parser';\nimport type { Probot, run } from 'probot';\nimport auth from './app/auth';\nimport home from './app/home';\nimport orgSettings from './app/org-settings';\nimport repository from './app/repository';\nimport userSettings from './app/user-settings';\nimport type { AppContext } from './context/AppContext';\n\nexport default async function appRouter(\n  app: Probot,\n  getRouter: Parameters<\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    Extract<Parameters<typeof run>[0], Function>\n  >[1]['getRouter'],\n  { mongoStores }: AppContext,\n): Promise<void> {\n  const router = (getRouter as NonNullable<typeof getRouter>)('/app');\n  const octokitApp = await app.auth();\n\n  router.use(cookieParser());\n\n  auth(router);\n  repository(router, octokitApp);\n  home(router, octokitApp, mongoStores);\n  orgSettings(router, octokitApp, mongoStores);\n  userSettings(router, octokitApp, mongoStores);\n}\n","import { syncOrg } from '../events/account-handlers/actions/syncOrg';\nimport { syncTeamsAndTeamMembers } from '../events/account-handlers/actions/syncTeams';\nimport { syncUser } from '../events/account-handlers/actions/syncUser';\nimport type { Org, User } from '../mongo';\nimport type { Octokit } from '../octokit';\nimport type { AppContext } from './AppContext';\n\nexport interface AccountInfo {\n  id: number;\n  login: string;\n  type: string;\n}\n\nexport const getOrCreateAccount = async (\n  { mongoStores }: AppContext,\n  github: Octokit,\n  installationId: number,\n  accountInfo: AccountInfo,\n): Promise<Org | User> => {\n  switch (accountInfo.type) {\n    case 'Organization': {\n      let org = await mongoStores.orgs.findByKey(accountInfo.id);\n      if (org?.installationId) return org;\n\n      // TODO diff org vs user...\n      org = await syncOrg(mongoStores, github, installationId, accountInfo);\n      await syncTeamsAndTeamMembers(mongoStores, github, accountInfo);\n      return org;\n    }\n\n    case 'User': {\n      let user = await mongoStores.users.findByKey(accountInfo.id);\n      if (user?.installationId) return user;\n\n      user = await syncUser(mongoStores, github, installationId, accountInfo);\n      return user;\n    }\n\n    default:\n      throw new Error(`Account type not supported ${accountInfo.type}`);\n  }\n};\n","import createEmojiRegex from 'emoji-regex';\n\nexport const getKeys = <T extends Record<keyof T, unknown>>(\n  o: T,\n): (keyof T)[] => Object.keys(o) as (keyof T)[];\n\nconst emojiRegex = createEmojiRegex();\n\nexport const getEmojiFromRepoDescription = (\n  description: string | null,\n): string => {\n  if (!description) return '';\n  if (description.startsWith(':')) {\n    const [, emoji] = /^(:\\w+:)/.exec(description) || [];\n    return emoji || '';\n  }\n  const match = emojiRegex.exec(description);\n  if (match && description.startsWith(match[0])) return match[0];\n  return '';\n};\n","import type { TeamSlack } from './TeamSlack';\n\nexport const voidTeamSlack = (): TeamSlack => ({\n  mention: (): string => '',\n  postMessage: (): Promise<null> => Promise.resolve(null),\n  updateMessage: (): Promise<null> => Promise.resolve(null),\n  deleteMessage: (): Promise<undefined> => Promise.resolve(undefined),\n  addReaction: (): Promise<undefined> => Promise.resolve(undefined),\n  updateHome: (): void => undefined,\n});\n","import { WebClient } from '@slack/web-api';\nimport type { Context } from 'probot';\nimport type { Config } from '../accountConfigs';\nimport type { MessageCategory } from '../dm/MessageCategory';\nimport { getUserDmSettings } from '../dm/getUserDmSettings';\nimport type { Org, User } from '../mongo';\nimport type { AppContext } from './AppContext';\nimport type { SlackMessage } from './SlackMessage';\nimport type { TeamSlack, PostSlackMessageResult } from './TeamSlack';\nimport { getKeys } from './utils';\nimport { voidTeamSlack } from './voidTeamSlack';\n\nexport type { TeamSlack };\n\nexport const initTeamSlack = async <GroupNames extends string>(\n  { mongoStores, slackHome }: AppContext,\n  context: Context<any>,\n  config: Config<GroupNames>,\n  account: Org | User,\n): Promise<TeamSlack> => {\n  const slackToken = 'slackToken' in account && account.slackToken;\n\n  if (!slackToken) {\n    return voidTeamSlack();\n  }\n\n  const githubLoginToSlackEmail = getKeys(config.groups).reduce<{\n    [login: string]: string;\n  }>((acc, groupName) => {\n    Object.assign(acc, config.groups[groupName]);\n    return acc;\n  }, {});\n\n  const slackEmails = Object.values(githubLoginToSlackEmail);\n  const slackClient = new WebClient(slackToken);\n\n  const membersInDb = await mongoStores.orgMembers.findAll({\n    'org.id': account._id,\n  });\n\n  const members: [string, { member: any; im: any }][] = [];\n  const foundEmailMembers: string[] = [];\n\n  Object.entries(githubLoginToSlackEmail).forEach(([login, email]) => {\n    const member = membersInDb.find((m) => m.user.login === login);\n    if (member?.slack?.id) {\n      foundEmailMembers.push(email);\n      members.push([email, { member: { id: member.slack.id }, im: undefined }]);\n    }\n  });\n\n  if (foundEmailMembers.length !== slackEmails.length) {\n    const missingEmails = slackEmails.filter(\n      (email) => !foundEmailMembers.includes(email),\n    );\n\n    const memberEmailToMemberId = new Map<string, number>(\n      Object.entries(githubLoginToSlackEmail).map(([login, email]) => [\n        email,\n        membersInDb.find((m) => m.user.login === login)?._id as any,\n      ]),\n    );\n\n    await slackClient.paginate('users.list', {}, (page: any) => {\n      page.members.forEach((member: any) => {\n        const email = member.profile?.email;\n        if (email && missingEmails.includes(email)) {\n          members.push([email, { member, im: undefined }]);\n          if (memberEmailToMemberId.has(email)) {\n            mongoStores.orgMembers.partialUpdateMany(\n              {\n                _id: memberEmailToMemberId.get(email),\n              },\n              { $set: { slack: { id: member.id } } },\n            );\n          }\n        }\n      });\n      return false;\n    });\n  }\n\n  for (const [, user] of members) {\n    try {\n      const im: any = await slackClient.conversations.open({\n        users: user.member.id,\n      });\n      user.im = im.channel;\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const membersMap = new Map(members);\n\n  const getUserFromGithubLogin = (githubLogin: string) => {\n    const email = githubLoginToSlackEmail[githubLogin];\n    if (!email) return null;\n    return membersMap.get(email);\n  };\n\n  return {\n    mention: (githubLogin: string): string => {\n      // TODO pass AccountInfo instead\n      if (githubLogin.endsWith('[bot]')) {\n        return `:robot_face: ${githubLogin.slice(0, -'[bot]'.length)}`;\n      }\n      const user = getUserFromGithubLogin(githubLogin);\n      if (!user) return githubLogin;\n      return `<@${user.member.id}>`;\n    },\n    postMessage: async (\n      category: MessageCategory,\n      githubId: number,\n      githubLogin: string,\n      message: SlackMessage,\n    ): Promise<PostSlackMessageResult> => {\n      context.log.debug(\n        {\n          category,\n          githubLogin,\n          message,\n        },\n        'slack: post message',\n      );\n      if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return null;\n\n      const userDmSettings = await getUserDmSettings(\n        mongoStores,\n        account.login,\n        account._id,\n        githubId,\n      );\n\n      if (!userDmSettings[category]) return null;\n\n      const user = getUserFromGithubLogin(githubLogin);\n      if (!user || !user.im) return null;\n      const result = await slackClient.chat.postMessage({\n        username: process.env.REVIEWFLOW_NAME,\n        channel: user.im.id,\n        text: message.text,\n        blocks: message.blocks,\n        attachments: message.secondaryBlocks\n          ? [{ blocks: message.secondaryBlocks }]\n          : undefined,\n        thread_ts: message.ts,\n      });\n      if (!result.ok) return null;\n      return { ts: result.ts as string, channel: result.channel as string };\n    },\n    updateMessage: async (\n      ts: string,\n      channel: string,\n      message: SlackMessage,\n    ): Promise<PostSlackMessageResult> => {\n      context.log.debug({ ts, channel, message }, 'slack: update message');\n      if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return null;\n\n      const result = await slackClient.chat.update({\n        ts,\n        channel,\n        text: message.text,\n        blocks: message.blocks,\n        attachments: message.secondaryBlocks\n          ? [{ blocks: message.secondaryBlocks }]\n          : undefined,\n      });\n      if (!result.ok) return null;\n      return { ts: result.ts as string, channel: result.channel as string };\n    },\n    deleteMessage: async (ts: string, channel: string): Promise<void> => {\n      context.log.debug({ ts, channel }, 'slack: delete message');\n      await slackClient.chat.delete({\n        ts,\n        channel,\n      });\n    },\n    addReaction: async (\n      ts: string,\n      channel: string,\n      name: string,\n    ): Promise<void> => {\n      context.log.debug({ ts, channel, name }, 'slack: add reaction');\n      await slackClient.reactions.add({\n        timestamp: ts,\n        channel,\n        name,\n      });\n    },\n\n    updateHome: (githubLogin: string): void => {\n      context.log.debug({ githubLogin }, 'update slack home');\n      const user = getUserFromGithubLogin(githubLogin);\n      if (!user || !user.member) return;\n\n      slackHome.scheduleUpdateMember(context.octokit, slackClient, {\n        user: { id: null, login: githubLogin },\n        org: { id: account._id, login: account.login },\n        slack: { id: user.member.id },\n      } as any);\n    },\n  };\n};\n","import { Lock } from 'lock';\nimport type { Context } from 'probot';\nimport type {\n  PullRequestWithDecentData,\n  PullRequestWithDecentDataFromWebhook,\n} from 'events/pr-handlers/utils/PullRequestData';\nimport type { Config } from '../accountConfigs';\nimport type { Org, User, AccountEmbed, AccountType } from '../mongo';\nimport { ExcludesFalsy } from '../utils/Excludes';\nimport type { AppContext } from './AppContext';\nimport type { AccountInfo } from './getOrCreateAccount';\nimport { getOrCreateAccount } from './getOrCreateAccount';\nimport type { TeamSlack } from './initTeamSlack';\nimport { initTeamSlack } from './initTeamSlack';\nimport { getKeys } from './utils';\n\nexport interface AccountContext<\n  GroupNames extends string = any,\n  TeamNames extends string = any\n> {\n  config: Config<GroupNames, TeamNames>;\n  accountType: AccountType;\n  account: Org | User;\n  accountEmbed: AccountEmbed;\n  slack: TeamSlack;\n  getReviewerGroup: (githubLogin: string) => GroupNames | undefined;\n  getReviewerGroups: (githubLogins: string[]) => GroupNames[];\n  getTeamsForLogin: (githubLogin: string) => TeamNames[];\n  approveShouldWait: (\n    reviewerGroup: GroupNames | undefined,\n    pullRequest: PullRequestWithDecentData,\n    {\n      includesReviewerGroup,\n      includesWaitForGroups,\n    }: { includesReviewerGroup?: boolean; includesWaitForGroups?: boolean },\n  ) => boolean;\n\n  lock: (callback: () => Promise<void> | void) => Promise<void>;\n}\n\nconst initAccountContext = async (\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config,\n  accountInfo: AccountInfo,\n): Promise<AccountContext> => {\n  const account = await getOrCreateAccount(\n    appContext,\n    context.octokit,\n    context.payload.installation.id,\n    accountInfo,\n  );\n  const slackPromise = initTeamSlack(appContext, context, config, account);\n\n  const githubLoginToGroup = new Map<string, string>();\n  getKeys(config.groups).forEach((groupName) => {\n    Object.keys(config.groups[groupName]).forEach((login) => {\n      githubLoginToGroup.set(login, groupName);\n    });\n  });\n\n  const githubLoginToTeams = new Map<string, string[]>();\n  getKeys(config.teams || {}).forEach((teamName) => {\n    (config.teams as NonNullable<typeof config.teams>)[teamName].logins.forEach(\n      (login) => {\n        const teams = githubLoginToTeams.get(login);\n        if (teams) {\n          teams.push(teamName);\n        } else {\n          githubLoginToTeams.set(login, [teamName]);\n        }\n      },\n    );\n  });\n\n  const getReviewerGroups = (githubLogins: string[]): string[] => [\n    ...new Set(\n      githubLogins\n        .map((githubLogin) => githubLoginToGroup.get(githubLogin))\n        .filter(ExcludesFalsy),\n    ),\n  ];\n\n  const lock = Lock();\n\n  return {\n    config,\n    account,\n    accountEmbed: {\n      id: accountInfo.id,\n      login: accountInfo.login,\n      type: accountInfo.type as AccountType,\n    },\n    accountType: accountInfo.type as AccountType,\n    lock: (callback: () => Promise<void> | void): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const logInfos = { account: accountInfo.login };\n        context.log.info(logInfos, 'lock: try to lock account');\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        lock('_', async (createReleaseCallback) => {\n          const release = createReleaseCallback(() => {});\n          context.log.info(logInfos, 'lock: lock account acquired');\n          try {\n            await callback();\n          } catch (err) {\n            context.log.info(logInfos, 'lock: release account (with error)');\n            release();\n            reject(err);\n            return;\n          }\n          context.log.info(logInfos, 'lock: release account');\n          release();\n          resolve();\n        });\n      });\n    },\n    getReviewerGroup: (githubLogin): string | undefined =>\n      githubLoginToGroup.get(githubLogin),\n    getReviewerGroups,\n\n    getTeamsForLogin: (githubLogin): string[] =>\n      githubLoginToTeams.get(githubLogin) || [],\n\n    approveShouldWait: (\n      reviewerGroup,\n      pullRequest,\n      { includesReviewerGroup, includesWaitForGroups },\n    ): boolean => {\n      if (!reviewerGroup || !pullRequest.requested_reviewers) return false;\n\n      const requestedReviewerGroups = getReviewerGroups(\n        (pullRequest.requested_reviewers as PullRequestWithDecentDataFromWebhook['requested_reviewers']).map(\n          (request) => request.login,\n        ),\n      );\n\n      // TODO pullRequest.requested_teams\n\n      // contains another request of a reviewer in the same group\n      if (\n        includesReviewerGroup &&\n        requestedReviewerGroups.includes(reviewerGroup)\n      ) {\n        return true;\n      }\n\n      // contains a request from a dependent group\n      if (config.waitForGroups && includesWaitForGroups) {\n        const waitForGroups = config.waitForGroups;\n        return requestedReviewerGroups.some((group) =>\n          waitForGroups[reviewerGroup].includes(group),\n        );\n      }\n\n      return false;\n    },\n\n    slack: await slackPromise,\n  };\n};\n\nconst accountContextsPromise = new Map();\nconst accountContexts = new Map();\n\nexport const obtainAccountContext = (\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config,\n  accountInfo: AccountInfo,\n): Promise<AccountContext> => {\n  const existingAccountContext = accountContexts.get(accountInfo.login);\n  if (existingAccountContext) return existingAccountContext;\n\n  const existingPromise = accountContextsPromise.get(accountInfo.login);\n  if (existingPromise) return Promise.resolve(existingPromise);\n\n  const promise = initAccountContext(appContext, context, config, accountInfo);\n  accountContextsPromise.set(accountInfo.login, promise);\n\n  return promise.then((accountContext) => {\n    accountContextsPromise.delete(accountInfo.login);\n    accountContexts.set(accountInfo.login, accountContext);\n    return accountContext;\n  });\n};\n","import type { Context } from 'probot';\nimport { accountConfigs, defaultConfig } from '../../../accountConfigs';\nimport type { AppContext } from '../../../context/AppContext';\nimport type { AccountContext } from '../../../context/accountContext';\nimport { obtainAccountContext } from '../../../context/accountContext';\n\ntype CallbackContextAndAccountContext<T> = (\n  context: Context<T>,\n  accountContext: AccountContext,\n) => void | Promise<void>;\n\nexport const handlerOrgChange = async <\n  T extends { organization?: { id: number; login: string } }\n>(\n  appContext: AppContext,\n  context: Context<T>,\n  callback: CallbackContextAndAccountContext<T>,\n): Promise<void> => {\n  const org = context.payload.organization;\n  if (!org) return;\n  const config = accountConfigs[org.login] || defaultConfig;\n  const accountContext = await obtainAccountContext(\n    appContext,\n    context,\n    config,\n    { ...org, type: 'Organization' },\n  );\n  if (!accountContext) return;\n\n  return accountContext.lock(async () => {\n    await callback(context, accountContext);\n  });\n};\n\nexport const createHandlerOrgChange = <\n  T extends { organization?: { id: number; login: string } }\n>(\n  appContext: AppContext,\n  callback: CallbackContextAndAccountContext<T>,\n) => (context: Context<T>) => {\n  return handlerOrgChange(appContext, context, callback);\n};\n","export type OptionsKeys =\n  | 'featureBranch'\n  | 'autoMergeWithSkipCi'\n  | 'autoMerge'\n  | 'deleteAfterMerge';\n\nexport type Options = Record<OptionsKeys, boolean>;\n\nexport const options: OptionsKeys[] = [\n  'featureBranch',\n  'autoMergeWithSkipCi',\n  'autoMerge',\n  'deleteAfterMerge',\n];\nexport const optionsRegexps: {\n  key: OptionsKeys;\n  regexp: RegExp;\n}[] = options.map((option) => ({\n  key: option,\n  regexp: new RegExp(`\\\\[([ xX]?)]\\\\s*<!-- reviewflow-${option} -->`),\n}));\n\nexport const optionsLabels: { key: OptionsKeys; label: string }[] = [\n  { key: 'featureBranch', label: 'This PR is a feature branch' },\n  {\n    key: 'autoMergeWithSkipCi',\n    label: 'Add `[skip ci]` on merge commit',\n  },\n  {\n    key: 'autoMerge',\n    label:\n      'Auto merge when this PR is ready and has no failed statuses. (Also has a queue per repo to prevent multiple useless \"Update branch\" triggers)',\n  },\n  {\n    key: 'deleteAfterMerge',\n    label: 'Automatic branch delete after this PR is merged',\n  },\n];\n","import { optionsRegexps } from './prOptions';\nimport type { Options } from './prOptions';\n\nexport type { Options } from './prOptions';\n\nexport const parseOptions = (\n  content: string,\n  defaultOptions: Options,\n): Options => {\n  return optionsRegexps.reduce<any>((acc, { key, regexp }) => {\n    const match = regexp.exec(content);\n    acc[key] = !match\n      ? defaultOptions[key] || false\n      : match[1] === 'x' || match[1] === 'X';\n    return acc;\n  }, {}) as Options;\n};\n\nexport const parseCommitNotes = (content: string): string => {\n  const commitNotes = content.replace(\n    /^.*#### Commits Notes:(.*)#### Options:.*$/s,\n    '$1',\n  );\n\n  if (commitNotes === content) {\n    return '';\n  } else {\n    return commitNotes.trim();\n  }\n};\n\ninterface ParsedBody {\n  options: Options;\n  commitNotes: string;\n}\n\nexport const parseBody = (\n  content: string,\n  defaultOptions: Options,\n): ParsedBody => {\n  return {\n    options: parseOptions(content, defaultOptions),\n    commitNotes: parseCommitNotes(content),\n  };\n};\n","import type { PullRequestLabels } from 'events/pr-handlers/utils/PullRequestData';\nimport type { LabelResponse } from '../../../../context/initRepoLabels';\n\nexport default function hasLabelInPR(\n  prLabels: PullRequestLabels,\n  label: LabelResponse,\n): boolean {\n  if (!label) return false;\n  return prLabels.some((l): boolean => l.id === label.id);\n}\n","import type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { AutomergeLog } from 'mongo';\nimport type {\n  PullRequestData,\n  PullRequestFromRestEndpoint,\n  PullRequestLabels,\n} from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { parseBody } from './utils/body/parseBody';\nimport hasLabelInPR from './utils/hasLabelInPR';\n\nconst hasFailedStatusOrChecks = async (\n  pr: PullRequestData,\n  context: Context<any>,\n): Promise<boolean> => {\n  const checks = await context.octokit.checks.listForRef(\n    context.repo({\n      ref: pr.head.sha,\n      per_page: 100,\n    }),\n  );\n\n  const failedChecks = checks.data.check_runs.filter(\n    (check) => check.conclusion === 'failure',\n  );\n\n  if (failedChecks.length > 0) {\n    context.log.info(\n      {\n        checks: failedChecks.map((check) => check.name),\n      },\n      `automerge not possible: failed check pr ${pr.id}`,\n    );\n    return true;\n  }\n\n  const combinedStatus = await context.octokit.repos.getCombinedStatusForRef(\n    context.repo({\n      ref: pr.head.sha,\n      per_page: 100,\n    }),\n  );\n\n  if (combinedStatus.data.state === 'failure') {\n    const failedStatuses = combinedStatus.data.statuses.filter(\n      (status) => status.state === 'failure' || status.state === 'error',\n    );\n\n    context.log.info(\n      {\n        statuses: failedStatuses.map((status) => status.context),\n      },\n      `automerge not possible: failed status pr ${pr.id}`,\n    );\n\n    return true;\n  }\n\n  return false;\n};\n\nexport const autoMergeIfPossible = async (\n  pullRequest: PullRequestFromRestEndpoint,\n  context: Context<any>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  prLabels: PullRequestLabels = pullRequest.labels,\n): Promise<boolean> => {\n  if (reviewflowPrContext === null) return false;\n\n  const autoMergeLabel = repoContext.labels['merge/automerge'];\n\n  if (!hasLabelInPR(prLabels, autoMergeLabel)) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'no automerge label',\n    );\n    return false;\n  }\n\n  const isRenovatePr = pullRequest.head.ref.startsWith('renovate/');\n\n  const createMergeLockPrFromPr = () => ({\n    id: pullRequest.id,\n    number: pullRequest.number,\n    branch: pullRequest.head.ref,\n  });\n\n  if (pullRequest.state !== 'open') {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'pr is not opened',\n    );\n    return false;\n  }\n\n  const addLog = (\n    type: AutomergeLog['type'],\n    action: AutomergeLog['action'],\n  ): void => {\n    const repoFullName = pullRequest.head.repo.full_name;\n    context.log.info(`automerge: ${repoFullName}#${pullRequest.id} ${type}`);\n    repoContext.appContext.mongoStores.automergeLogs.insertOne({\n      account: repoContext.accountEmbed,\n      repoFullName,\n      pr: {\n        id: pullRequest.id,\n        number: pullRequest.number,\n        isRenovate: isRenovatePr,\n        mergeableState: pullRequest.mergeable_state,\n      },\n      type,\n      action,\n    });\n  };\n\n  if (\n    repoContext.hasNeedsReview(prLabels) ||\n    repoContext.hasRequestedReview(prLabels)\n  ) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'blocking labels',\n    );\n    return false;\n  }\n\n  if (\n    pullRequest.requested_reviewers &&\n    pullRequest.requested_reviewers.length > 0\n  ) {\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'still has requested reviewers',\n    );\n    return false;\n  }\n\n  const lockedPr = repoContext.getMergeLockedPr();\n  if (lockedPr && String(lockedPr.number) !== String(pullRequest.number)) {\n    context.log.info(\n      {\n        prId: pullRequest.id,\n        prNumber: pullRequest.number,\n        lockedPrNumber: lockedPr.number,\n      },\n      'automerge not possible: locked pr',\n    );\n    repoContext.pushAutomergeQueue(createMergeLockPrFromPr());\n    return false;\n  }\n\n  repoContext.addMergeLockPr(createMergeLockPrFromPr());\n\n  if (pullRequest.mergeable == null) {\n    const prResult = await context.octokit.pulls.get(\n      context.repo({\n        pull_number: pullRequest.number,\n      }),\n    );\n    pullRequest = prResult.data;\n  }\n\n  if (pullRequest.merged) {\n    addLog('already merged', 'remove');\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'pr already merged',\n    );\n    return false;\n  }\n\n  context.log.info(\n    `automerge?: ${pullRequest.id}, #${pullRequest.number}, mergeable=${pullRequest.mergeable} state=${pullRequest.mergeable_state}`,\n  );\n\n  // https://github.com/octokit/octokit.net/issues/1763\n  if (\n    !(\n      pullRequest.mergeable_state === 'clean' ||\n      pullRequest.mergeable_state === 'has_hooks' ||\n      pullRequest.mergeable_state === 'unstable'\n    )\n  ) {\n    if (\n      !pullRequest.mergeable_state ||\n      pullRequest.mergeable_state === 'unknown'\n    ) {\n      addLog('unknown mergeable_state', 'reschedule');\n      // GitHub is determining whether the pull request is mergeable\n      repoContext.reschedule(context, createMergeLockPrFromPr());\n      return false;\n    }\n\n    if (isRenovatePr) {\n      if (\n        pullRequest.mergeable_state === 'behind' ||\n        pullRequest.mergeable_state === 'dirty'\n      ) {\n        addLog('rebase-renovate', 'wait');\n\n        // TODO check if has commits not made by renovate https://github.com/ornikar/shared-configs/pull/47#issuecomment-445767120\n        if (\n          pullRequest.body &&\n          pullRequest.body.includes('<!-- rebase-check -->')\n        ) {\n          if (pullRequest.body.includes('[x] <!-- rebase-check -->')) {\n            return false;\n          }\n\n          const renovateRebaseBody = pullRequest.body.replace(\n            '[ ] <!-- rebase-check -->',\n            '[x] <!-- rebase-check -->',\n          );\n          await context.octokit.issues.update(\n            context.repo({\n              issue_number: pullRequest.number,\n              body: renovateRebaseBody,\n            }),\n          );\n        } else if (!pullRequest.title.startsWith('rebase!')) {\n          await context.octokit.issues.update(\n            context.repo({\n              issue_number: pullRequest.number,\n              title: `rebase!${pullRequest.title}`,\n            }),\n          );\n        }\n        return false;\n      }\n\n      if (await hasFailedStatusOrChecks(pullRequest, context)) {\n        addLog('failed status or checks', 'remove');\n        repoContext.removePrFromAutomergeQueue(\n          context,\n          pullRequest.number,\n          'failed status or checks',\n        );\n        return false;\n      } else if (pullRequest.mergeable_state === 'blocked') {\n        addLog('blocked mergeable_state', 'wait');\n        // waiting for reschedule in status (pr-handler/status.ts)\n        return false;\n      }\n\n      context.log.info(\n        `automerge not possible: renovate with mergeable_state=${pullRequest.mergeable_state}`,\n      );\n      return false;\n    }\n\n    if (pullRequest.mergeable_state === 'blocked') {\n      if (await hasFailedStatusOrChecks(pullRequest, context)) {\n        addLog('failed status or checks', 'remove');\n        repoContext.removePrFromAutomergeQueue(\n          context,\n          pullRequest.number,\n          'failed status or checks',\n        );\n        return false;\n      } else {\n        addLog('blocked mergeable_state', 'wait');\n        // waiting for reschedule in status (pr-handler/status.ts)\n        return false;\n      }\n    }\n\n    if (pullRequest.mergeable_state === 'behind') {\n      addLog('behind mergeable_state', 'update branch');\n      context.log.info(\n        {\n          head: pullRequest.head.ref,\n          base: pullRequest.base.ref,\n        },\n        'automerge not possible: update branch',\n      );\n\n      await context.octokit.repos.merge({\n        owner: pullRequest.head.repo.owner.login,\n        repo: pullRequest.head.repo.name,\n        head: pullRequest.base.ref,\n        base: pullRequest.head.ref,\n      });\n\n      return false;\n    }\n\n    addLog('not mergeable', 'remove');\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      `mergeable_state=${pullRequest.mergeable_state}`,\n    );\n    context.log.info(\n      `automerge not possible: not mergeable mergeable_state=${pullRequest.mergeable_state}`,\n    );\n    return false;\n  }\n\n  try {\n    context.log.info(`automerge pr #${pullRequest.number}`);\n\n    const parsedBody = parseBody(\n      reviewflowPrContext.commentBody,\n      repoContext.config.prDefaultOptions,\n    );\n    const options = parsedBody?.options || repoContext.config.prDefaultOptions;\n\n    const mergeResult = await context.octokit.pulls.merge({\n      merge_method: options.featureBranch ? 'merge' : 'squash',\n      owner: pullRequest.head.repo.owner.login,\n      repo: pullRequest.head.repo.name,\n      pull_number: pullRequest.number,\n      commit_title: options.featureBranch\n        ? undefined\n        : `${pullRequest.title}${\n            options.autoMergeWithSkipCi ? ' [skip ci]' : ''\n          } (#${pullRequest.number})`,\n      commit_message: options.featureBranch ? undefined : '', // TODO add BC\n    });\n    context.log.debug(mergeResult.data, 'merge result:');\n    repoContext.removePrFromAutomergeQueue(\n      context,\n      pullRequest.number,\n      'merged',\n    );\n    return Boolean('merged' in mergeResult.data && mergeResult.data.merged);\n  } catch (err) {\n    context.log.info({ errorMessage: err.message }, 'could not merge:');\n    repoContext.reschedule(context, createMergeLockPrFromPr());\n    return false;\n  }\n};\n","import type { StatusInfo } from 'accountConfigs/types';\nimport type { Options } from './parseBody';\nimport { parseOptions } from './parseBody';\nimport { optionsLabels } from './prOptions';\n\nexport const defaultCommentBody = 'This will be auto filled by reviewflow.';\n\nconst toMarkdownOptions = (options: Options) => {\n  return optionsLabels\n    .map(\n      ({ key, label }) =>\n        `- [${options[key] ? 'x' : ' '}] <!-- reviewflow-${key} -->${label}`,\n    )\n    .join('\\n');\n};\n\nconst toMarkdownInfos = (infos: StatusInfo[]): string => {\n  return infos\n    .map((info) => {\n      if (info.url) return `[${info.title}](${info.url})`;\n      return info.title;\n    })\n    .join('\\n');\n};\n\ninterface UpdatedBodyWithOptions {\n  commentBody: string;\n  options?: Options;\n}\n\nconst getReplacement = (infos?: StatusInfo[]): string => {\n  if (!infos) return '$1$2';\n  return infos.length > 0\n    ? `#### Infos:\\n\\n${toMarkdownInfos(infos)}\\n\\n$2`\n    : '$2';\n};\n\nconst updateOptions = (\n  options: Options,\n  optionsToUpdate?: Partial<Options>,\n): Options => {\n  if (!optionsToUpdate) return options;\n  return { ...options, ...optionsToUpdate };\n};\n\nconst internalUpdateBodyOptionsAndInfos = (\n  body: string,\n  options: Options,\n  infos?: StatusInfo[],\n): string => {\n  const infosAndCommitNotesParagraph = body.replace(\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /^\\s*(?:(#### Infos:.*)?(#### Commits Notes:.*)?#### Options:)?.*$/s,\n    getReplacement(infos),\n  );\n\n  return `${infosAndCommitNotesParagraph}#### Options:\\n${toMarkdownOptions(\n    options,\n  )}`;\n};\n\nexport const createCommentBody = (\n  defaultOptions: Options,\n  infos?: StatusInfo[],\n): string => {\n  return internalUpdateBodyOptionsAndInfos('', defaultOptions, infos);\n};\n\nexport const updateCommentOptions = (\n  commentBody: string,\n  defaultOptions: Options,\n  optionsToUpdate?: Partial<Options>,\n): UpdatedBodyWithOptions => {\n  const options = parseOptions(commentBody, defaultOptions);\n  const updatedOptions = updateOptions(options, optionsToUpdate);\n\n  return {\n    options: updatedOptions,\n    commentBody: internalUpdateBodyOptionsAndInfos(commentBody, updatedOptions),\n  };\n};\n\nexport const updateCommentBodyInfos = (\n  commentBody: string,\n  infos?: StatusInfo[],\n): string => {\n  return commentBody.replace(\n    // *  - zero or more\n    // *? - zero or more (non-greedy)\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /^\\s*(?:(#### Infos:.*?)?(#### Commits Notes:.*?)?(#### Options:.*?)?)?$/s,\n    `${getReplacement(infos)}$3`,\n  );\n};\n\nexport const updateCommentBodyCommitsNotes = (\n  commentBody: string,\n  commitNotes?: string,\n): string => {\n  return commentBody.replace(\n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /(?:#### Commits Notes:.*?)?(#### Options:)/s,\n    !commitNotes ? '$1' : `#### Commits Notes:\\n\\n${commitNotes}\\n\\n$1`,\n  );\n};\n\nexport const removeDeprecatedReviewflowInPrBody = (\n  prBody: string | null,\n): string => {\n  if (!prBody) return '';\n  return prBody.replace(\n    /^(.*)<!---? do not edit after this -?-->(.*)<!---? end - don't add anything after this -?-->(.*)$/is,\n    '$1$3',\n  );\n};\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { Context } from 'probot';\nimport type { PullRequestWithDecentDataFromWebhook } from './PullRequestData';\n\nexport const createReviewflowComment = <T>(\n  pullRequestNumber: PullRequestWithDecentDataFromWebhook['number'],\n  context: Context<T>,\n  body: string,\n): Promise<\n  RestEndpointMethodTypes['issues']['createComment']['response']['data']\n> => {\n  return context.octokit.issues\n    .createComment(context.repo({ issue_number: pullRequestNumber, body }))\n    .then(({ data }) => data);\n};\n\nexport const getReviewflowCommentById = <T>(\n  pullRequestNumber: PullRequestWithDecentDataFromWebhook['number'],\n  context: Context<T>,\n  commentId: number,\n): Promise<\n  RestEndpointMethodTypes['issues']['getComment']['response']['data'] | null\n> => {\n  return context.octokit.issues\n    .getComment(\n      context.repo({\n        issue_number: pullRequestNumber,\n        comment_id: commentId,\n      }),\n    )\n    .then(\n      ({ data }) => data,\n      () => null,\n    );\n};\n","import type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { ReviewflowPr } from 'mongo';\nimport { defaultCommentBody } from '../actions/utils/body/updateBody';\nimport type { PullRequestWithDecentDataFromWebhook } from './PullRequestData';\nimport {\n  createReviewflowComment,\n  getReviewflowCommentById,\n} from './reviewflowComment';\n\nexport interface CreatePrContextOptions {\n  reviewflowCommentPromise?: ReturnType<typeof createReviewflowComment>;\n}\n\nexport interface ReviewflowPrContext {\n  reviewflowPr: ReviewflowPr;\n  commentBody: string;\n}\n\nexport const getReviewflowPrContext = async <T>(\n  pullRequestNumber: PullRequestWithDecentDataFromWebhook['number'],\n  context: Context<T>,\n  repoContext: RepoContext,\n  reviewflowCommentPromise?: ReturnType<typeof createReviewflowComment>,\n): Promise<ReviewflowPrContext> => {\n  const appContext = repoContext.appContext;\n  const prEmbed = { number: pullRequestNumber };\n\n  if (reviewflowCommentPromise) {\n    const comment = await reviewflowCommentPromise;\n    const reviewflowPr = await appContext.mongoStores.prs.insertOne({\n      account: repoContext.accountEmbed,\n      repo: repoContext.repoEmbed,\n      pr: prEmbed,\n      commentId: comment.id,\n    });\n    return { reviewflowPr, commentBody: comment.body as string };\n  }\n\n  const existing = await appContext.mongoStores.prs.findOne({\n    'account.id': repoContext.accountEmbed.id,\n    'repo.id': repoContext.repoEmbed.id,\n    'pr.number': pullRequestNumber,\n  });\n  const comment =\n    existing &&\n    (await getReviewflowCommentById(\n      pullRequestNumber,\n      context,\n      existing.commentId,\n    ));\n\n  if (!comment || !existing) {\n    const comment = await createReviewflowComment(\n      pullRequestNumber,\n      context,\n      defaultCommentBody,\n    );\n\n    if (!existing) {\n      const reviewflowPr = await appContext.mongoStores.prs.insertOne({\n        account: repoContext.accountEmbed,\n        repo: repoContext.repoEmbed,\n        pr: prEmbed,\n        commentId: comment.id,\n      });\n      return { reviewflowPr, commentBody: comment.body as string };\n    } else {\n      await appContext.mongoStores.prs.partialUpdateByKey(existing._id, {\n        $set: { commentId: comment.id },\n      });\n    }\n  }\n\n  return { reviewflowPr: existing, commentBody: comment!.body as string };\n};\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { Context } from 'probot';\n\nexport const fetchPr = async (\n  context: Context<any>,\n  prNumber: number,\n): Promise<RestEndpointMethodTypes['pulls']['get']['response']['data']> => {\n  const prResult = await context.octokit.pulls.get(\n    context.repo({ pull_number: prNumber }),\n  );\n\n  return prResult.data;\n};\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { Context } from 'probot';\nimport type { Config } from '../accountConfigs';\n\nexport interface LabelResponse {\n  id: number;\n  node_id: string;\n  url: string;\n  name: string;\n  description: string | null;\n  color: string;\n  default: boolean;\n}\n\nexport interface LabelsRecord {\n  [key: string]: LabelResponse;\n}\n\nexport const getLabelsForRepo = async (\n  context: Context<any>,\n): Promise<\n  RestEndpointMethodTypes['issues']['listLabelsForRepo']['response']['data']\n> => {\n  const { data: labels } = await context.octokit.issues.listLabelsForRepo(\n    context.repo({ per_page: 100 }),\n  );\n  return labels;\n};\n\nexport const initRepoLabels = async <GroupNames extends string>(\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<LabelsRecord> => {\n  const labels = await getLabelsForRepo(context);\n  const finalLabels: Record<string, LabelResponse> = {};\n\n  for (const [labelKey, labelConfig] of Object.entries(config.labels.list)) {\n    const labelColor = labelConfig.color.slice(1);\n    const description = labelConfig.description\n      ? `${labelConfig.description} - Synced by reviewflow`\n      : `Synced by reviewflow for ${labelKey}`;\n\n    let existingLabel = labels.find((label) => label.name === labelConfig.name);\n    if (!existingLabel) {\n      existingLabel = labels.find((label) => label.description === description);\n    }\n    if (!existingLabel) {\n      if (labelKey === 'design/needs-review') {\n        existingLabel = labels.find(\n          (label) => label.name === 'needs-design-review',\n        );\n      }\n      if (labelKey === 'design/approved') {\n        existingLabel = labels.find(\n          (label) => label.name === 'design-reviewed',\n        );\n      }\n      if (labelKey === 'teams/ops') {\n        existingLabel = labels.find((label) => label.name === 'archi');\n      }\n    }\n\n    if (!existingLabel) {\n      const result = await context.octokit.issues.createLabel(\n        context.repo({\n          name: labelConfig.name,\n          color: labelColor,\n          description,\n        }),\n      );\n      finalLabels[labelKey] = result.data;\n    } else if (\n      existingLabel.name !== labelConfig.name ||\n      existingLabel.color !== labelColor ||\n      existingLabel.description !== description\n    ) {\n      context.log.info(\n        {\n          current_name: existingLabel.name,\n          name: existingLabel.name !== labelConfig.name && labelConfig.name,\n          color: existingLabel.color !== labelColor && labelColor,\n          description: existingLabel.description !== description && description,\n        },\n        'Needs to update label',\n      );\n\n      const result = await context.octokit.issues.updateLabel(\n        context.repo({\n          name: existingLabel.name,\n          new_name: labelConfig.name,\n          color: labelColor,\n          description,\n        }),\n      );\n      finalLabels[labelKey] = result.data;\n    } else {\n      finalLabels[labelKey] = existingLabel;\n    }\n  }\n\n  return finalLabels;\n};\n","import { Lock } from 'lock';\nimport type { Context } from 'probot';\nimport type { Config } from '../accountConfigs';\nimport { accountConfigs, defaultConfig } from '../accountConfigs';\nimport type { GroupLabels } from '../accountConfigs/types';\nimport { autoMergeIfPossible } from '../events/pr-handlers/actions/autoMergeIfPossible';\nimport type {\n  PullRequestData,\n  PullRequestLabels,\n  PullRequestWithDecentData,\n} from '../events/pr-handlers/utils/PullRequestData';\nimport { getReviewflowPrContext } from '../events/pr-handlers/utils/createPullRequestContext';\nimport { fetchPr } from '../events/pr-handlers/utils/fetchPr';\nimport { ExcludesFalsy } from '../utils/Excludes';\nimport type { AppContext } from './AppContext';\nimport type { AccountContext } from './accountContext';\nimport { obtainAccountContext } from './accountContext';\nimport type { LabelResponse, LabelsRecord } from './initRepoLabels';\nimport { initRepoLabels } from './initRepoLabels';\nimport { getEmojiFromRepoDescription } from './utils';\n\nexport interface LockedMergePr {\n  id: number;\n  number: number;\n  branch: string;\n}\n\ninterface RepoContextWithoutTeamContext<GroupNames extends string> {\n  appContext: AppContext;\n  repoFullName: string;\n  repoEmbed: { id: number; name: string };\n  repoEmoji: string | undefined;\n  labels: LabelsRecord;\n  protectedLabelIds: readonly LabelResponse['id'][];\n  shouldIgnore: boolean;\n\n  hasNeedsReview: (labels: PullRequestLabels) => boolean;\n  hasRequestedReview: (labels: PullRequestLabels) => boolean;\n  hasChangesRequestedReview: (labels: PullRequestLabels) => boolean;\n  hasApprovesReview: (labels: PullRequestLabels) => boolean;\n  getNeedsReviewGroupNames: (labels: PullRequestLabels) => GroupNames[];\n\n  lockPullRequest: (\n    pullRequest: PullRequestData,\n    callback: () => Promise<void> | void,\n  ) => Promise<void>;\n\n  /** @deprecated */\n  lockPR: (\n    prId: string,\n    prNumber: number,\n    callback: () => Promise<void> | void,\n  ) => Promise<void>;\n\n  getMergeLockedPr: () => LockedMergePr;\n  addMergeLockPr: (pr: LockedMergePr) => void;\n  removePrFromAutomergeQueue: (\n    context: Context<any>,\n    prNumber: number,\n    reason: string,\n  ) => void;\n  reschedule: (context: Context<any>, pr: LockedMergePr) => void;\n  pushAutomergeQueue: (pr: LockedMergePr) => void;\n}\n\nexport type RepoContext<\n  GroupNames extends string = any\n> = AccountContext<GroupNames> & RepoContextWithoutTeamContext<GroupNames>;\n\nexport const shouldIgnoreRepo = (\n  repoName: string,\n  accountConfig: Config<any, any>,\n): boolean => {\n  const ignoreRepoRegexp =\n    accountConfig.ignoreRepoPattern &&\n    new RegExp(`^${accountConfig.ignoreRepoPattern}$`);\n\n  if (repoName === 'reviewflow-test') {\n    return process.env.REVIEWFLOW_NAME !== 'reviewflow-dev';\n  }\n\n  if (ignoreRepoRegexp) {\n    return ignoreRepoRegexp.test(repoName);\n  }\n\n  return false;\n};\n\nconst createGetReviewLabelIds = <GroupNames extends string>(\n  shouldIgnore: boolean,\n  config: Config<GroupNames>,\n  reviewGroupNames: GroupNames[],\n  labels: LabelsRecord,\n): ((labelKey: GroupLabels) => number[]) => {\n  if (shouldIgnore) return (labelKey: GroupLabels): number[] => [];\n  return (labelKey: GroupLabels): number[] =>\n    reviewGroupNames\n      .map((key) => config.labels.review[key][labelKey])\n      .filter(Boolean)\n      .map((name) => labels[name].id);\n};\n\nasync function initRepoContext<GroupNames extends string>(\n  appContext: AppContext,\n  context: Context<any>,\n  config: Config<GroupNames>,\n): Promise<RepoContext<GroupNames>> {\n  const {\n    id,\n    name,\n    full_name: fullName,\n    owner: org,\n    description,\n  } = context.payload.repository;\n  const repoEmoji = getEmojiFromRepoDescription(description);\n\n  const accountContext = await obtainAccountContext(\n    appContext,\n    context,\n    config,\n    org,\n  );\n  const repoContext = Object.create(accountContext);\n\n  const shouldIgnore = shouldIgnoreRepo(name, config);\n\n  const labels = shouldIgnore ? {} : await initRepoLabels(context, config);\n\n  const reviewGroupNames = Object.keys(config.groups) as GroupNames[];\n  const getReviewLabelIds = createGetReviewLabelIds(\n    shouldIgnore,\n    config,\n    reviewGroupNames,\n    labels,\n  );\n\n  const needsReviewLabelIds = getReviewLabelIds('needsReview');\n  const requestedReviewLabelIds = getReviewLabelIds('requested');\n  const changesRequestedLabelIds = getReviewLabelIds('changesRequested');\n  const approvedReviewLabelIds = getReviewLabelIds('approved');\n\n  const protectedLabelIds = [\n    ...requestedReviewLabelIds,\n    ...changesRequestedLabelIds,\n    ...approvedReviewLabelIds,\n  ];\n\n  const labelIdToGroupName = new Map<LabelResponse['id'], GroupNames>();\n  if (!shouldIgnore) {\n    reviewGroupNames.forEach((key) => {\n      const reviewGroupLabels = config.labels.review[key] as any;\n      Object.keys(reviewGroupLabels).forEach((labelKey: string) => {\n        labelIdToGroupName.set(labels[reviewGroupLabels[labelKey]].id, key);\n      });\n    });\n  }\n\n  // const updateStatusCheck = (context, reviewGroup, statusInfo) => {};\n\n  const hasNeedsReview = (labels: PullRequestLabels): boolean =>\n    labels.some((label) => label.id && needsReviewLabelIds.includes(label.id));\n  const hasRequestedReview = (labels: PullRequestLabels): boolean =>\n    labels.some(\n      (label) => label.id && requestedReviewLabelIds.includes(label.id),\n    );\n  const hasChangesRequestedReview = (labels: PullRequestLabels): boolean =>\n    labels.some(\n      (label) => label.id && changesRequestedLabelIds.includes(label.id),\n    );\n  const hasApprovesReview = (labels: PullRequestLabels): boolean =>\n    labels.some(\n      (label) => label.id && approvedReviewLabelIds.includes(label.id),\n    );\n\n  const getNeedsReviewGroupNames = (labels: PullRequestLabels): GroupNames[] =>\n    labels\n      .filter((label) => label.id && needsReviewLabelIds.includes(label.id))\n      .map((label) =>\n        labelIdToGroupName.get(label.id as NonNullable<typeof label.id>),\n      )\n      .filter(ExcludesFalsy);\n\n  const lock = Lock();\n  let lockMergePr: LockedMergePr | undefined;\n  let automergeQueue: LockedMergePr[] = [];\n\n  const lockPR = (\n    prOrPrIssueId: string,\n    prNumber: number,\n    callback: () => Promise<void> | void,\n  ): Promise<void> =>\n    new Promise((resolve, reject) => {\n      const logInfos = {\n        repo: fullName,\n        prOrPrIssueId,\n        prNumber,\n      };\n      context.log.debug(logInfos, 'lock: try to lock pr');\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      lock(String(prNumber), async (createReleaseCallback) => {\n        const release = createReleaseCallback(() => {});\n        context.log.info(logInfos, 'lock: lock pr acquired');\n        try {\n          await callback();\n        } catch (err) {\n          context.log.info(logInfos, 'lock: release pr (with error)');\n          release();\n          reject(err);\n          return;\n        }\n        context.log.info(logInfos, 'lock: release pr');\n        release();\n        resolve();\n      });\n    });\n\n  const lockPullRequest = (\n    pullRequest: PullRequestWithDecentData,\n    callback: () => Promise<void> | void,\n  ): Promise<void> => {\n    return lockPR(String(pullRequest.id), pullRequest.number, callback);\n  };\n\n  const reschedule = (context: Context<any>, pr: LockedMergePr): void => {\n    if (!pr) throw new Error('Cannot reschedule undefined');\n    context.log.info(pr, 'reschedule');\n    setTimeout(() => {\n      lockPR('reschedule', -1, () => {\n        return lockPR(String(pr.id), pr.number, async () => {\n          const [pullRequest, reviewflowPrContext] = await Promise.all([\n            fetchPr(context, pr.number),\n            getReviewflowPrContext(pr.number, context, repoContext),\n          ]);\n          await autoMergeIfPossible(\n            pullRequest,\n            context,\n            repoContext,\n            reviewflowPrContext,\n          );\n        });\n      });\n    }, 10_000);\n  };\n\n  return Object.assign(repoContext, {\n    appContext,\n    labels,\n    repoFullName: fullName,\n    repoEmbed: { id, name },\n    repoEmoji,\n    protectedLabelIds,\n    shouldIgnore,\n    hasNeedsReview,\n    hasRequestedReview,\n    hasChangesRequestedReview,\n    hasApprovesReview,\n    getNeedsReviewGroupNames,\n\n    getMergeLockedPr: () => lockMergePr,\n    addMergeLockPr: (pr: LockedMergePr): void => {\n      console.log('merge lock: lock', {\n        repo: fullName,\n        pr,\n      });\n      if (lockMergePr && String(lockMergePr.number) === String(pr.number)) {\n        return;\n      }\n      if (lockMergePr) throw new Error('Already have lock');\n      lockMergePr = pr;\n    },\n    removePrFromAutomergeQueue: (\n      context,\n      prNumber: number | string,\n      reason: string,\n    ): void => {\n      if (lockMergePr && String(lockMergePr.number) === String(prNumber)) {\n        lockMergePr = automergeQueue.shift();\n        context.log(`merge lock: remove ${fullName}#${prNumber}: ${reason}`);\n        if (lockMergePr) {\n          context.log(lockMergePr, `merge lock: next ${fullName}`);\n        } else {\n          context.log(`merge lock: nothing next ${fullName}`);\n        }\n        if (lockMergePr) {\n          reschedule(context, lockMergePr);\n        }\n      } else {\n        const previousLength = automergeQueue.length;\n        automergeQueue = automergeQueue.filter(\n          (value) => String(value.number) !== String(prNumber),\n        );\n        if (automergeQueue.length !== previousLength) {\n          context.log(`merge lock: remove ${fullName}#${prNumber}: ${reason}`);\n        }\n      }\n    },\n    pushAutomergeQueue: (pr: LockedMergePr): void => {\n      context.log(\n        {\n          repo: fullName,\n          pr,\n          lockMergePr,\n          automergeQueue,\n        },\n        'merge lock: push queue',\n      );\n      if (!automergeQueue.some((p) => p.number === pr.number)) {\n        automergeQueue.push(pr);\n      }\n    },\n    reschedule,\n\n    lockPR,\n    lockPullRequest,\n  } as RepoContextWithoutTeamContext<GroupNames>);\n}\n\nconst repoContextsPromise = new Map<number, Promise<RepoContext>>();\nconst repoContexts = new Map<number, RepoContext>();\n\nexport const obtainRepoContext = (\n  appContext: AppContext,\n  context: Context<any>,\n): Promise<RepoContext> | RepoContext | null => {\n  const repo = context.payload.repository;\n  const owner = repo.owner;\n  const key = repo.id;\n\n  const existingRepoContext = repoContexts.get(key);\n  if (existingRepoContext) return existingRepoContext;\n\n  const existingPromise = repoContextsPromise.get(key);\n  if (existingPromise) return Promise.resolve(existingPromise);\n\n  let accountConfig = accountConfigs[owner.login];\n\n  if (!accountConfig) {\n    console.warn(`using default config for ${owner.login}`);\n    accountConfig = defaultConfig as Config<any, any>;\n  }\n\n  const promise = initRepoContext(appContext, context, accountConfig);\n  repoContextsPromise.set(key, promise);\n\n  return promise.then((repoContext) => {\n    repoContextsPromise.delete(key);\n    repoContexts.set(key, repoContext);\n    return repoContext;\n  });\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { AppContext } from '../../../context/AppContext';\nimport type { RepoContext } from '../../../context/repoContext';\nimport { obtainRepoContext } from '../../../context/repoContext';\n\nexport const createRepoHandler = <\n  T extends { repository: EventPayloads.PayloadRepository }\n>(\n  appContext: AppContext,\n  callback: (\n    context: Context<T>,\n    repoContext: RepoContext,\n  ) => Promise<void> | void,\n): ((context: Context<T>) => Promise<void>) => {\n  return async (context): Promise<void> => {\n    const repoContext = await obtainRepoContext(appContext, context);\n    if (!repoContext) return;\n\n    return callback(context, repoContext);\n  };\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { AppContext } from '../../../context/AppContext';\nimport type { RepoContext, LockedMergePr } from '../../../context/repoContext';\nimport { createRepoHandler } from '../../repository-handlers/utils/createRepoHandler';\nimport type {\n  PullRequestData,\n  PullRequestFromWebhook,\n} from './PullRequestData';\nimport type {\n  CreatePrContextOptions,\n  ReviewflowPrContext,\n} from './createPullRequestContext';\nimport { getReviewflowPrContext } from './createPullRequestContext';\n\ntype OnCallback<T> = (context: Context<T>) => Promise<void>;\n\nexport type CallbackWithPRAndRepoContext<T extends PullRequestData> = (\n  pullRequest: T,\n  repoContext: RepoContext,\n) => void | Promise<void>;\n\nexport const createPullRequestHandler = <\n  T extends\n    | EventPayloads.WebhookPayloadPullRequest\n    | EventPayloads.WebhookPayloadPullRequestReview\n    | EventPayloads.WebhookPayloadPullRequestReviewComment\n    | EventPayloads.WebhookPayloadIssueComment\n    | EventPayloads.WebhookPayloadPullRequestReviewComment,\n  U extends PullRequestFromWebhook,\n  GroupNames extends string = string\n>(\n  appContext: AppContext,\n  getPullRequestInPayload: (\n    payload: Context<T>['payload'],\n    context: Context<T>,\n    repoContext: RepoContext<GroupNames>,\n  ) => U | null,\n  callbackPr: (\n    pullRequest: U,\n    context: Context<T>,\n    repoContext: RepoContext<GroupNames>,\n    reviewflowPrContext: ReviewflowPrContext | null,\n  ) => void | Promise<void>,\n  callbackBeforeLock?: (\n    pullRequest: U,\n    context: Context<T>,\n    repoContext: RepoContext<GroupNames>,\n  ) => CreatePrContextOptions,\n): OnCallback<T> => {\n  return createRepoHandler(appContext, async (context, repoContext) => {\n    const pullRequest: U | null = getPullRequestInPayload(\n      context.payload,\n      context,\n      repoContext,\n    );\n    if (pullRequest === null) return;\n    const options = callbackBeforeLock\n      ? callbackBeforeLock(pullRequest, context, repoContext)\n      : {};\n\n    await repoContext.lockPullRequest(pullRequest, async () => {\n      /*\n       * When repo are ignored, only slack notifications are sent.\n       * PR is not linted, commented, nor auto merged.\n       */\n      const reviewflowPrContext = repoContext.shouldIgnore\n        ? null\n        : await getReviewflowPrContext(\n            pullRequest.number,\n            context,\n            repoContext,\n            options.reviewflowCommentPromise,\n          );\n\n      return callbackPr(pullRequest, context, repoContext, reviewflowPrContext);\n    });\n  });\n};\n\nexport const createPullRequestsHandler = <\n  T extends { repository: EventPayloads.PayloadRepository },\n  U extends PullRequestFromWebhook | LockedMergePr,\n  GroupNames extends string\n>(\n  appContext: AppContext,\n  getPrs: (\n    payload: Context<T>['payload'],\n    repoContext: RepoContext<GroupNames>,\n  ) => U[],\n  callbackPr: (\n    pullRequest: U,\n    context: Context<T>,\n    repoContext: RepoContext<GroupNames>,\n  ) => void | Promise<void>,\n): OnCallback<T> => {\n  return createRepoHandler(appContext, async (context, repoContext) => {\n    const prs = getPrs(context.payload, repoContext);\n    if (prs.length === 0) return;\n\n    await Promise.all(\n      prs.map((pr) =>\n        repoContext.lockPR(String(pr.id), pr.number, async () => {\n          return callbackPr(pr, context, repoContext);\n        }),\n      ),\n    );\n  });\n};\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { getReviewflowPrContext } from './utils/createPullRequestContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function checkrunCompleted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'check_run.completed',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext) => {\n        if (repoContext.shouldIgnore) return [];\n        return payload.check_run.pull_requests;\n      },\n      async (pullRequest, context, repoContext) => {\n        const [updatedPr, reviewflowPrContext] = await Promise.all([\n          fetchPr(context, pullRequest.number),\n          getReviewflowPrContext(pullRequest.number, context, repoContext),\n        ]);\n\n        await autoMergeIfPossible(\n          updatedPr,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { getReviewflowPrContext } from './utils/createPullRequestContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function checksuiteCompleted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'check_suite.completed',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext) => {\n        if (repoContext.shouldIgnore) return [];\n        return payload.check_suite.pull_requests;\n      },\n      async (pullRequest, context, repoContext) => {\n        const [updatedPr, reviewflowPrContext] = await Promise.all([\n          fetchPr(context, pullRequest.number),\n          getReviewflowPrContext(pullRequest.number, context, repoContext),\n        ]);\n\n        await autoMergeIfPossible(\n          updatedPr,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { PullRequestWithDecentData } from 'events/pr-handlers/utils/PullRequestData';\nimport type { RepoContext } from '../context/repoContext';\n\nexport const createLink = (url: string, text: string): string => {\n  return `<${url}|${text}>`;\n};\n\nexport const createPrLink = (\n  pr: { html_url: string; number: number },\n  repoContext: RepoContext,\n): string => {\n  return createLink(\n    pr.html_url,\n    `${repoContext.repoEmoji ? `${repoContext.repoEmoji} ` : ''}${\n      repoContext.repoFullName\n    }#${pr.number}`,\n  );\n};\n\nexport const createOwnerPart = (\n  ownerMention: string,\n  pullRequest: PullRequestWithDecentData,\n  sendTo: AccountInfo,\n): string => {\n  const owner = pullRequest.user;\n\n  if (owner && owner.id === sendTo.id) return 'your PR';\n\n  const isAssignedTo: boolean =\n    !!pullRequest.assignees &&\n    pullRequest.assignees.some((a: any) => a && a.id === sendTo.id);\n\n  return `${ownerMention}'s PR${isAssignedTo ? \" you're assigned to\" : ''}`;\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\n\nexport default async function createStatus<\n  T extends { repository: EventPayloads.PayloadRepository }\n>(\n  context: Context<T>,\n  name: string,\n  sha: string,\n  type: 'failure' | 'success',\n  description: string,\n  url?: string,\n): Promise<void> {\n  await context.octokit.repos.createCommitStatus(\n    context.repo({\n      context:\n        name === ''\n          ? process.env.REVIEWFLOW_NAME\n          : `${process.env.REVIEWFLOW_NAME}/${name}`,\n      sha,\n      state: type,\n      description,\n      target_url: url,\n    }),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\nimport type {\n  PullRequestLabels,\n  PullRequestWithDecentData,\n  PullRequestWithDecentDataFromWebhook,\n} from '../utils/PullRequestData';\nimport createStatus from './utils/createStatus';\n\nconst addStatusCheck = async function <\n  T extends { repository: EventPayloads.PayloadRepository }\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<T>,\n  { state, description }: { state: 'failure' | 'success'; description: string },\n  previousSha?: string,\n): Promise<void> {\n  const hasPrCheck = (\n    await context.octokit.checks.listForRef(\n      context.repo({\n        ref: pullRequest.head.sha,\n      }),\n    )\n  ).data.check_runs.find((check) => check.name === process.env.REVIEWFLOW_NAME);\n\n  context.log.debug({ hasPrCheck, state, description }, 'add status check');\n\n  if (hasPrCheck) {\n    await context.octokit.checks.create(\n      context.repo({\n        name: process.env.REVIEWFLOW_NAME as string,\n        head_sha: pullRequest.head.sha,\n        started_at: pullRequest.created_at,\n        status: 'completed',\n        conclusion: state,\n        completed_at: new Date().toISOString(),\n        output: {\n          title: description,\n          summary: '',\n        },\n      }),\n    );\n  } else if (previousSha && state === 'failure') {\n    await Promise.all([\n      createStatus(\n        context,\n        '',\n        previousSha,\n        'success',\n        'New commits have been pushed',\n      ),\n      createStatus(context, '', pullRequest.head.sha, state, description),\n    ]);\n  } else {\n    await createStatus(context, '', pullRequest.head.sha, state, description);\n  }\n};\n\nexport const updateStatusCheckFromLabels = <\n  T extends { repository: EventPayloads.PayloadRepository }\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<T>,\n  repoContext: RepoContext,\n  labels: PullRequestLabels = pullRequest.labels || [],\n  previousSha?: string,\n): Promise<void> => {\n  context.log.debug(\n    {\n      labels: labels.map((l) => l?.name),\n      hasNeedsReview: repoContext.hasNeedsReview(labels),\n      hasApprovesReview: repoContext.hasApprovesReview(labels),\n    },\n    'updateStatusCheckFromLabels',\n  );\n\n  const createFailedStatusCheck = (description: string): Promise<void> =>\n    addStatusCheck(\n      pullRequest,\n      context,\n      {\n        state: 'failure',\n        description,\n      },\n      previousSha,\n    );\n\n  if (\n    pullRequest.requested_reviewers &&\n    pullRequest.requested_reviewers.length > 0\n  ) {\n    return createFailedStatusCheck(\n      `Awaiting review from: ${(pullRequest.requested_reviewers as PullRequestWithDecentDataFromWebhook['requested_reviewers'])\n        .filter(ExcludesFalsy)\n        .map((rr) => rr.login)\n        .join(', ')}`,\n    );\n  }\n\n  if (repoContext.hasChangesRequestedReview(labels)) {\n    return createFailedStatusCheck(\n      'Changes requested ! Push commits or discuss changes then re-request a review.',\n    );\n  }\n\n  const needsReviewGroupNames = repoContext.getNeedsReviewGroupNames(labels);\n\n  if (needsReviewGroupNames.length > 0) {\n    return createFailedStatusCheck(\n      `Awaiting review from: ${needsReviewGroupNames.join(\n        ', ',\n      )}. Perhaps request someone ?`,\n    );\n  }\n\n  if (!repoContext.hasApprovesReview(labels)) {\n    if (repoContext.config.requiresReviewRequest) {\n      return createFailedStatusCheck(\n        'Awaiting review... Perhaps request someone ?',\n      );\n    }\n  }\n\n  // if (\n  //   repoContext.config.requiresReviewRequest &&\n  //   !repoContext.hasRequestedReview(labels)\n  // ) {\n  //   return  createFailedStatusCheck(\n  //     context,\n  //     pr,\n  //     'You need to request someone to review the PR',\n  //   );\n  //   return;\n  // }\n  // return  createInProgressStatusCheck(context);\n  // } else if (repoContext.hasApprovesReview(labels)) {\n  return addStatusCheck(\n    pullRequest,\n    context,\n    {\n      state: 'success',\n      description: '✓ PR ready to merge !',\n    },\n    previousSha,\n  );\n  // }\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { GroupLabels } from '../../../accountConfigs/types';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\nimport type {\n  PullRequestLabels,\n  PullRequestWithDecentData,\n} from '../utils/PullRequestData';\nimport { updateStatusCheckFromLabels } from './updateStatusCheckFromLabels';\n\nexport const updateReviewStatus = async <\n  E extends { repository: EventPayloads.PayloadRepository },\n  GroupNames extends string = any\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewGroup: GroupNames,\n  {\n    add: labelsToAdd,\n    remove: labelsToRemove,\n  }: {\n    add?: (GroupLabels | false | undefined)[];\n    remove?: (GroupLabels | false | undefined)[];\n  },\n): Promise<PullRequestLabels> => {\n  context.log.debug(\n    {\n      reviewGroup,\n      labelsToAdd,\n      labelsToRemove,\n    },\n    'updateReviewStatus',\n  );\n\n  let prLabels: PullRequestLabels = pullRequest.labels || [];\n  if (!reviewGroup) return prLabels;\n\n  const newLabelNames = new Set<string>(\n    prLabels.map((label) => label.name).filter(ExcludesFalsy),\n  );\n\n  const toAdd = new Set<GroupLabels | string>();\n  const toAddNames = new Set<string>();\n  const toDelete = new Set<GroupLabels>();\n  const toDeleteNames = new Set<string>();\n  const labels = repoContext.labels;\n\n  const getLabelFromKey = (\n    key: GroupLabels,\n  ): undefined | PullRequestLabels[number] => {\n    const reviewConfig = repoContext.config.labels.review[reviewGroup];\n    if (!reviewConfig) return undefined;\n\n    return reviewConfig[key] && labels[reviewConfig[key]]\n      ? labels[reviewConfig[key]]\n      : undefined;\n  };\n\n  if (labelsToAdd) {\n    labelsToAdd.forEach((key) => {\n      if (!key) return;\n      const label = getLabelFromKey(key);\n      if (\n        !label ||\n        !label.name ||\n        prLabels.some((prLabel) => prLabel.id === label.id)\n      ) {\n        return;\n      }\n      newLabelNames.add(label.name);\n      toAdd.add(key);\n      toAddNames.add(label.name);\n    });\n  }\n\n  if (labelsToRemove) {\n    labelsToRemove.forEach((key) => {\n      if (!key) return;\n      const label = getLabelFromKey(key);\n      if (!label) return;\n      const existing = prLabels.find((prLabel) => prLabel.id === label.id);\n      if (existing && existing.name) {\n        newLabelNames.delete(existing.name);\n        toDelete.add(key);\n        toDeleteNames.add(existing.name);\n      }\n    });\n  }\n\n  // TODO move that elsewhere\n  if (pullRequest.user) {\n    repoContext.getTeamsForLogin(pullRequest.user.login).forEach((teamName) => {\n      const team = repoContext.config.teams[teamName];\n      if (team.labels) {\n        team.labels.forEach((labelKey) => {\n          const label = repoContext.labels[labelKey];\n          if (label && !prLabels.some((prLabel) => prLabel.id === label.id)) {\n            newLabelNames.add(label.name);\n            toAdd.add(labelKey);\n            toAddNames.add(label.name);\n          }\n        });\n      }\n    });\n  }\n\n  // if (process.env.DRY_RUN && process.env.DRY_RUN !== 'false') return;\n\n  if (toAdd.size !== 0 || toDelete.size !== 0) {\n    if (toDelete.size === 0 || toDelete.size < 4) {\n      context.log.debug(\n        {\n          reviewGroup,\n          toAdd: [...toAdd],\n          toDelete: [...toDelete],\n          toAddNames: [...toAddNames],\n          toDeleteNames: [...toDeleteNames],\n        },\n        'updateReviewStatus',\n      );\n\n      if (toAdd.size !== 0) {\n        const result = await context.octokit.issues.addLabels(\n          context.issue({\n            labels: [...toAddNames],\n          }),\n        );\n        prLabels = result.data;\n      }\n\n      if (toDelete.size !== 0) {\n        for (const toDeleteName of [...toDeleteNames]) {\n          try {\n            const result = await context.octokit.issues.removeLabel(\n              context.issue({\n                name: toDeleteName,\n              }),\n            );\n            prLabels = result.data;\n          } catch (err) {\n            context.log.warn(\n              {\n                err: err?.message,\n              },\n              'error removing label',\n            );\n          }\n        }\n      }\n    } else {\n      const newLabelNamesArray = [...newLabelNames];\n\n      context.log.debug(\n        {\n          reviewGroup,\n          toAdd: [...toAdd],\n          toDelete: [...toDelete],\n          oldLabels: prLabels.map((l) => l.name),\n          newLabelNames: newLabelNamesArray,\n        },\n        'updateReviewStatus',\n      );\n\n      const result = await context.octokit.issues.setLabels(\n        context.issue({\n          labels: newLabelNamesArray,\n        }),\n      );\n      prLabels = result.data;\n    }\n  }\n\n  // if (toAdd.has('needsReview')) {\n  //   createInProgressStatusCheck(context);\n  // } else if (\n  //   toDelete.has('needsReview') ||\n  //   (prLabels.length === 0 && toAdd.size === 1 && toAdd.has('approved'))\n  // ) {\n  await updateStatusCheckFromLabels(\n    pullRequest,\n    context,\n    repoContext,\n    prLabels,\n  );\n  // }\n\n  return prLabels;\n};\n","import type { Context } from 'probot';\nimport type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { RepoContext } from '../../../context/repoContext';\nimport { getKeys } from '../../../context/utils';\n\ntype ReviewState = 'CHANGES_REQUESTED' | 'APPROVED' | 'DISMISSED';\n\ninterface ReviewStates {\n  approved: number;\n  changesRequested: number;\n  dismissed: number;\n}\n\nexport type Reviewer = AccountInfo;\n\nexport const getReviewersAndReviewStates = async <GroupNames extends string>(\n  context: Context,\n  repoContext: RepoContext<GroupNames>,\n): Promise<{\n  reviewers: Reviewer[];\n  reviewStates: Record<GroupNames, ReviewStates>;\n}> => {\n  const userIds = new Set<number>();\n  const reviewers: Reviewer[] = [];\n  const reviewStatesByUser = new Map<number, ReviewState>();\n\n  await context.octokit.paginate(\n    context.octokit.pulls.listReviews,\n    context.pullRequest(),\n    ({ data: reviews }) => {\n      reviews.forEach((review) => {\n        if (!review.user) return;\n        if (!userIds.has(review.user.id)) {\n          userIds.add(review.user.id);\n          reviewers.push({\n            id: review.user.id,\n            login: review.user.login,\n            type: review.user.type,\n          });\n        }\n        const state = review.state.toUpperCase();\n        if (state !== 'COMMENTED') {\n          reviewStatesByUser.set(review.user.id, state as ReviewState);\n        }\n      });\n\n      return [];\n    },\n  );\n\n  const reviewStates: Record<GroupNames, ReviewStates> = {} as Record<\n    GroupNames,\n    ReviewStates\n  >;\n\n  getKeys(repoContext.config.groups).forEach((groupName) => {\n    reviewStates[groupName] = {\n      approved: 0,\n      changesRequested: 0,\n      dismissed: 0,\n    };\n  });\n\n  reviewers.forEach((reviewer) => {\n    const group = repoContext.getReviewerGroup(reviewer.login);\n    if (group) {\n      const state = reviewStatesByUser.get(reviewer.id);\n      switch (state) {\n        case 'APPROVED':\n          reviewStates[group].approved++;\n          break;\n        case 'CHANGES_REQUESTED':\n          reviewStates[group].changesRequested++;\n          break;\n        case 'DISMISSED':\n          reviewStates[group].dismissed++;\n          break;\n      }\n    }\n  });\n\n  return { reviewers, reviewStates };\n};\n","import type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { PullRequestWithDecentDataFromWebhook } from './PullRequestData';\nimport type { Reviewer } from './getReviewersAndReviewStates';\n\nexport interface RequestedReviewers extends AccountInfo {\n  isRequestedByName: boolean;\n  requestedByTeams: string[];\n}\n\nexport function getRolesFromPullRequestAndReviewers(\n  pullRequest: PullRequestWithDecentDataFromWebhook,\n  reviewers: Reviewer[],\n): {\n  owner: PullRequestWithDecentDataFromWebhook['user'];\n  assignees: PullRequestWithDecentDataFromWebhook['assignees'];\n  reviewers: Reviewer[];\n  requestedReviewers: RequestedReviewers[];\n  followers: AccountInfo[];\n} {\n  const owner = pullRequest.user;\n  const assignees = pullRequest.assignees;\n  const assigneeIds = assignees.map((a) => a.id);\n\n  const followers = reviewers.filter((user) => !assigneeIds.includes(user.id));\n  const requestedReviewers: RequestedReviewers[] = pullRequest.requested_reviewers.map(\n    (rr) => ({\n      ...rr,\n      isRequestedByName: true,\n      requestedByTeams: [],\n    }),\n  );\n\n  if (pullRequest.requested_teams) {\n    // TODO\n    // requestedReviewers.push ...\n  }\n\n  if (requestedReviewers) {\n    followers.push(\n      ...requestedReviewers.filter((rr) => {\n        return (\n          !followers.find((f) => f.id === rr.id) && !assigneeIds.includes(rr.id)\n        );\n      }),\n    );\n  }\n\n  return {\n    owner,\n    assignees,\n    reviewers,\n    requestedReviewers,\n    followers,\n  };\n}\n","import type { Probot } from 'probot';\nimport type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { parseOptions } from './actions/utils/body/parseBody';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { getRolesFromPullRequestAndReviewers } from './utils/getRolesFromPullRequestAndReviewers';\n\nexport default function closed(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.closed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (pullRequest, context, repoContext, reviewflowPrContext) => {\n        /* if repo is not ignored */\n        if (reviewflowPrContext) {\n          /* update status, update automerge queue, delete branch */\n          const repo = context.payload.repository;\n\n          if (pullRequest.merged) {\n            const isNotFork = pullRequest.head.repo.id === repo.id;\n            const options = parseOptions(\n              reviewflowPrContext.commentBody,\n              repoContext.config.prDefaultOptions,\n            );\n\n            await Promise.all([\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pullRequest.number,\n                'pr closed',\n              ),\n              isNotFork && options.deleteAfterMerge\n                ? context.octokit.git\n                    .deleteRef(\n                      context.repo({ ref: `heads/${pullRequest.head.ref}` }),\n                    )\n                    .catch(() => {})\n                : undefined,\n            ]);\n          } else {\n            await Promise.all([\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pullRequest.number,\n                'pr closed',\n              ),\n              updateReviewStatus(pullRequest, context, repoContext, 'dev', {\n                remove: ['needsReview'],\n              }),\n            ]);\n          }\n        }\n\n        /* update slack home */\n        if (pullRequest.requested_reviewers) {\n          pullRequest.requested_reviewers.forEach((requestedReviewer) => {\n            repoContext.slack.updateHome(requestedReviewer.login);\n          });\n        }\n\n        if (pullRequest.assignees) {\n          pullRequest.assignees.forEach((assignee) => {\n            repoContext.slack.updateHome(assignee.login);\n          });\n        }\n\n        /* send notifications to assignees and followers */\n        const { reviewers } = await getReviewersAndReviewStates(\n          context,\n          repoContext,\n        );\n        const {\n          owner,\n          assignees,\n          followers,\n        } = getRolesFromPullRequestAndReviewers(pullRequest, reviewers);\n\n        const senderMention = repoContext.slack.mention(\n          context.payload.sender.login,\n        );\n        const ownerMention = repoContext.slack.mention(owner.login);\n        const prLink = slackUtils.createPrLink(pullRequest, repoContext);\n\n        const createMessage = (to: AccountInfo): string => {\n          const ownerPart = slackUtils.createOwnerPart(\n            ownerMention,\n            pullRequest,\n            to,\n          );\n\n          return `${\n            pullRequest.merged\n              ? `:rocket: ${senderMention} merged`\n              : `:wastebasket: ${senderMention} closed`\n          } ${ownerPart} ${prLink}\\n> ${pullRequest.title}`;\n        };\n\n        assignees.map((assignee) => {\n          if (context.payload.sender.id === assignee.id) return;\n          return repoContext.slack.postMessage(\n            'pr-lifecycle',\n            assignee.id,\n            assignee.login,\n            {\n              text: createMessage(assignee),\n            },\n          );\n        });\n\n        followers.map((follower) => {\n          if (context.payload.sender.id === follower.id) return;\n          return repoContext.slack.postMessage(\n            'pr-lifecycle-follow',\n            follower.id,\n            follower.login,\n            {\n              text: createMessage(follower),\n            },\n          );\n        });\n      },\n    ),\n  );\n}\n","import type { KnownBlock } from '@slack/web-api';\nimport type { SlackMessage } from '../../../context/SlackMessage';\n\nexport const createMrkdwnSectionBlock = (text: string): KnownBlock => ({\n  type: 'section',\n  text: {\n    type: 'mrkdwn',\n    text,\n  },\n});\n\nexport const createSlackMessageWithSecondaryBlock = (\n  message: string,\n  secondaryBlockText?: string | null,\n): SlackMessage => {\n  return {\n    text: message,\n    blocks: [\n      {\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: message,\n        },\n      },\n    ],\n    secondaryBlocks: !secondaryBlockText\n      ? undefined\n      : [createMrkdwnSectionBlock(secondaryBlockText)],\n  };\n};\n","import type { EventPayloads } from '@octokit/webhooks';\n\ntype WebhookPr =\n  | EventPayloads.WebhookPayloadPullRequest['pull_request']\n  | EventPayloads.WebhookPayloadPullRequestReviewPullRequest;\n\ntype PullRequestHandlerAllowedPayloads =\n  | {\n      repository: EventPayloads.PayloadRepository;\n      pull_request: WebhookPr;\n    }\n  | {\n      repository: EventPayloads.PayloadRepository;\n      issue: EventPayloads.WebhookPayloadIssueCommentIssue;\n    };\n\nexport type PullRequestFromPayload<\n  T extends PullRequestHandlerAllowedPayloads\n> = T extends { pull_request: WebhookPr }\n  ? T['pull_request']\n  : T extends { issue: EventPayloads.WebhookPayloadIssueCommentIssue }\n  ? T['issue'] /* & T['issue']['pull_request'] */\n  : never;\n\n/** deprecated */\nexport const getPullRequestFromPayload = <\n  T extends PullRequestHandlerAllowedPayloads\n>(\n  payload: T,\n): PullRequestFromPayload<T> => {\n  const pullRequest: WebhookPr = (payload as any).pull_request;\n  if (pullRequest) {\n    return pullRequest as PullRequestFromPayload<T>;\n  }\n\n  const issue = (payload as any).issue;\n  if (issue?.pull_request) {\n    return {\n      ...issue,\n      ...issue.pull_request,\n    };\n  }\n\n  throw new Error('No pull_request in payload');\n};\n","import type { RepoContext } from '../../../context/repoContext';\n\nexport const checkIfUserIsBot = (\n  repoContext: RepoContext,\n  user: { login: string; type: string },\n): boolean => {\n  if (user.type === 'Bot') return true;\n  if (repoContext.config.botUsers) {\n    return repoContext.config.botUsers.includes(user.login);\n  }\n  return false;\n};\n\nexport const checkIfIsThisBot = (user: {\n  login: string;\n  type: string;\n}): boolean => {\n  return (\n    user.type === 'Bot' && user.login === `${process.env.REVIEWFLOW_NAME}[bot]`\n  );\n};\n","import issueParser from 'issue-parser';\n\nconst parse = issueParser('github', { actions: {}, issuePrefixes: [] });\n\nexport const parseMentions = (body: string): readonly string[] => {\n  return parse(body).mentions.map((m) => m.user);\n};\n","import slackifyMarkdown from 'slackify-markdown';\n\nexport const slackifyCommentBody = (\n  body: string,\n  multipleLines: boolean,\n): string => {\n  return slackifyMarkdown(\n    body\n      .replace('```suggestion', '_Suggested change:_\\n```suggestion')\n      .replace(\n        '```suggestion\\r\\n```',\n        `_Suggestion to remove line${multipleLines ? 's' : ''}._\\n`,\n      ),\n  );\n};\n","import type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot, Context } from 'probot';\nimport type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { AppContext } from '../../context/AppContext';\nimport type { SlackMessage } from '../../context/SlackMessage';\nimport type { PostSlackMessageResult } from '../../context/TeamSlack';\nimport type { AccountEmbed } from '../../mongo';\nimport * as slackUtils from '../../slack/utils';\nimport { ExcludesFalsy, ExcludesNullish } from '../../utils/Excludes';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { createSlackMessageWithSecondaryBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport { fetchPr } from './utils/fetchPr';\nimport type { PullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { getPullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { checkIfUserIsBot, checkIfIsThisBot } from './utils/isBotUser';\nimport { parseMentions } from './utils/parseMentions';\nimport { slackifyCommentBody } from './utils/slackifyCommentBody';\n\nconst getDiscussion = async (\n  context: Context,\n  comment: any,\n): Promise<\n  RestEndpointMethodTypes['pulls']['listReviewComments']['response']['data']\n> => {\n  if (!comment.in_reply_to_id) return [comment];\n  return context.octokit.paginate(\n    context.octokit.pulls.listReviewComments,\n    context.pullRequest() as any,\n    ({ data }) => {\n      return data.filter(\n        (c) =>\n          c.in_reply_to_id === comment.in_reply_to_id ||\n          c.id === comment.in_reply_to_id,\n      );\n    },\n  );\n};\n\nconst getMentions = (\n  discussion: RestEndpointMethodTypes['pulls']['listReviewComments']['response']['data'],\n): string[] => {\n  const mentions = new Set<string>();\n\n  discussion.forEach((c) => {\n    parseMentions(c.body).forEach((m) => mentions.add(m));\n  });\n\n  return [...mentions];\n};\n\nconst getUsersInThread = (\n  discussion: RestEndpointMethodTypes['pulls']['listReviewComments']['response']['data'],\n): { id: number; login: string }[] => {\n  const userIds = new Set<number>();\n  const users: { id: number; login: string }[] = [];\n\n  discussion.forEach((c) => {\n    if (!c.user || userIds.has(c.user.id)) return;\n    userIds.add(c.user.id);\n    users.push({ id: c.user.id, login: c.user.login });\n  });\n\n  return users;\n};\n\nexport default function prCommentCreated(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  const saveInDb = async (\n    type: 'review-comment' | 'issue-comment',\n    commentId: number,\n    accountEmbed: AccountEmbed,\n    results: PostSlackMessageResult[],\n    message: SlackMessage,\n  ): Promise<void> => {\n    const filtered = results.filter(ExcludesNullish);\n    if (filtered.length === 0) return;\n\n    await appContext.mongoStores.slackSentMessages.insertOne({\n      type,\n      typeId: commentId,\n      message,\n      account: accountEmbed,\n      sentTo: filtered,\n    });\n  };\n\n  app.on(\n    [\n      'pull_request_review_comment.created',\n      // comments without review and without path are sent with issue_comment.created.\n      // createHandlerPullRequestChange checks if pull_request event is present, removing real issues comments.\n      'issue_comment.created',\n    ],\n    createPullRequestHandler<\n      | EventPayloads.WebhookPayloadPullRequestReviewComment\n      | EventPayloads.WebhookPayloadIssueComment,\n      | PullRequestFromPayload<\n          | EventPayloads.WebhookPayloadPullRequestReviewComment\n          | EventPayloads.WebhookPayloadIssueComment\n        >\n      | any\n    >(\n      appContext,\n      (payload, context) => {\n        if (checkIfIsThisBot(payload.comment.user)) {\n          // ignore comments from this bot\n          return null;\n        }\n        return getPullRequestFromPayload(payload);\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const pr = await fetchPr(context, pullRequest.number);\n        const prUser = pr.user;\n        if (!prUser) return;\n        const { comment } = context.payload;\n        const type = (comment as any).pull_request_review_id\n          ? 'review-comment'\n          : 'issue-comment';\n\n        const body = comment.body;\n        if (!body) return;\n\n        const commentByOwner = prUser.login === comment.user.login;\n        const [discussion, { reviewers }] = await Promise.all([\n          getDiscussion(context, comment),\n          getReviewersAndReviewStates(context, repoContext),\n        ]);\n\n        const followers: AccountInfo[] = reviewers.filter(\n          (u) => u.id !== prUser.id && u.id !== comment.user.id,\n        );\n\n        if (pr.requested_reviewers) {\n          followers.push(\n            ...pr.requested_reviewers\n              .filter((rr) => {\n                return (\n                  rr &&\n                  !followers.find((f) => f.id === rr.id) &&\n                  rr.id !== (comment.user && comment.user.id) &&\n                  rr.id !== prUser.id\n                );\n              })\n              .filter(ExcludesFalsy)\n              .map<AccountInfo>((rr) => ({\n                id: rr.id,\n                login: rr.login,\n                type: rr.type,\n              })),\n          );\n        }\n\n        const usersInThread = getUsersInThread(discussion).filter(\n          (u) =>\n            u.id !== prUser.id &&\n            u.id !== comment.user.id &&\n            !followers.find((f) => f.id === u.id),\n        );\n        const mentions = getMentions(discussion).filter(\n          (m) =>\n            m !== prUser.login &&\n            m !== comment.user.login &&\n            !followers.find((f) => f.login === m) &&\n            !usersInThread.find((u) => u.login === m),\n        );\n\n        const mention = repoContext.slack.mention(comment.user.login);\n        const prUrl = slackUtils.createPrLink(pr, repoContext);\n        const ownerMention = repoContext.slack.mention(prUser.login);\n        const commentLink = slackUtils.createLink(\n          comment.html_url,\n          (comment as any).in_reply_to_id ? 'replied' : 'commented',\n        );\n\n        const createMessage = (toOwner?: boolean): string => {\n          const ownerPart = toOwner\n            ? 'your PR'\n            : `${\n                (prUser && prUser.id) === comment.user.id\n                  ? 'his'\n                  : `${ownerMention}'s`\n              } PR`;\n          return `:speech_balloon: ${mention} ${commentLink} on ${ownerPart} ${prUrl}`;\n        };\n\n        const promisesOwner = [];\n        const promisesNotOwner = [];\n        const slackifiedBody = slackifyCommentBody(\n          comment.body,\n          (comment as any).start_line !== null,\n        );\n        const isBotUser = checkIfUserIsBot(repoContext, comment.user);\n\n        if (!commentByOwner) {\n          const slackMessage = createSlackMessageWithSecondaryBlock(\n            createMessage(true),\n            slackifiedBody,\n          );\n\n          promisesOwner.push(\n            repoContext.slack\n              .postMessage(\n                isBotUser ? 'pr-comment-bots' : 'pr-comment',\n                prUser.id,\n                prUser.login,\n                slackMessage,\n              )\n              .then((res) =>\n                saveInDb(\n                  type,\n                  comment.id,\n                  repoContext.accountEmbed,\n                  [res],\n                  slackMessage,\n                ),\n              ),\n          );\n        }\n\n        const message = createSlackMessageWithSecondaryBlock(\n          createMessage(false),\n          slackifiedBody,\n        );\n\n        promisesNotOwner.push(\n          ...followers.map((follower) =>\n            repoContext.slack.postMessage(\n              isBotUser ? 'pr-comment-follow-bots' : 'pr-comment-follow',\n              follower.id,\n              follower.login,\n              message,\n            ),\n          ),\n        );\n\n        promisesNotOwner.push(\n          ...usersInThread.map((user) =>\n            repoContext.slack.postMessage(\n              'pr-comment-thread',\n              user.id,\n              user.login,\n              message,\n            ),\n          ),\n        );\n\n        if (mentions.length > 0) {\n          await appContext.mongoStores.users\n            .findAll({ login: { $in: mentions } })\n            .then((users) => {\n              promisesNotOwner.push(\n                ...users.map((u) =>\n                  repoContext.slack.postMessage(\n                    'pr-comment-mention',\n                    u._id,\n                    u.login,\n                    message,\n                  ),\n                ),\n              );\n            });\n        }\n\n        await Promise.all([\n          Promise.all(promisesOwner),\n          Promise.all(promisesNotOwner).then((results) =>\n            saveInDb(\n              type,\n              comment.id,\n              repoContext.accountEmbed,\n              results,\n              message,\n            ),\n          ),\n        ]);\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport type { Options } from './utils/body/prOptions';\nimport { updateCommentOptions } from './utils/body/updateBody';\n\nconst updatePrCommentBody = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  context: Context<E>,\n  reviewflowPrContext: ReviewflowPrContext,\n  newBody: string,\n): Promise<void> => {\n  await context.octokit.issues.updateComment(\n    context.repo({\n      comment_id: reviewflowPrContext.reviewflowPr.commentId,\n      body: newBody,\n    }),\n  );\n  reviewflowPrContext.commentBody = newBody;\n};\n\nexport const updatePrCommentBodyIfNeeded = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  context: Context<E>,\n  reviewflowPrContext: ReviewflowPrContext,\n  newBody: string,\n): Promise<void> => {\n  if (reviewflowPrContext.commentBody !== newBody) {\n    await updatePrCommentBody(context, reviewflowPrContext, newBody);\n  }\n};\n\nexport const updatePrCommentBodyOptions = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  updateOptions: Partial<Options>,\n): Promise<void> => {\n  const { commentBody: newBody } = updateCommentOptions(\n    reviewflowPrContext.commentBody,\n    repoContext.config.prDefaultOptions,\n    updateOptions,\n  );\n\n  await updatePrCommentBodyIfNeeded(context, reviewflowPrContext, newBody);\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { PullRequestWithDecentData } from 'events/pr-handlers/utils/PullRequestData';\nimport type { LabelResponse } from '../../../../context/initRepoLabels';\nimport hasLabelInPR from './hasLabelInPR';\n\ninterface SyncLabelOptions {\n  onRemove?: () => void | Promise<void>;\n  onAdd?: (prLabels: LabelResponse[]) => void | Promise<void>;\n}\n\nexport default async function syncLabel<\n  T extends EventPayloads.WebhookPayloadPullRequest\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<T>,\n  shouldHaveLabel: boolean,\n  label: LabelResponse,\n  prHasLabel = hasLabelInPR(pullRequest.labels, label),\n  { onRemove, onAdd }: SyncLabelOptions = {},\n): Promise<void> {\n  if (prHasLabel && !shouldHaveLabel) {\n    await context.octokit.issues.removeLabel(\n      context.issue({ name: label.name }),\n    );\n    if (onRemove) await onRemove();\n  }\n  if (shouldHaveLabel && !prHasLabel) {\n    const response = await context.octokit.issues.addLabels(\n      context.issue({ labels: [label.name] }),\n    );\n    if (onAdd) await onAdd(response.data);\n  }\n}\n","import type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type {\n  PullRequestFromRestEndpoint,\n  PullRequestWithDecentData,\n} from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { autoMergeIfPossible } from './autoMergeIfPossible';\nimport { updatePrCommentBodyIfNeeded } from './updatePrCommentBody';\nimport type { Options } from './utils/body/prOptions';\nimport { updateCommentOptions } from './utils/body/updateBody';\nimport hasLabelInPR from './utils/hasLabelInPR';\nimport syncLabel from './utils/syncLabel';\n\nexport const calcDefaultOptions = (\n  repoContext: RepoContext,\n  pullRequest: PullRequestWithDecentData,\n): Options => {\n  const featureBranchLabel = repoContext.labels['feature-branch'];\n  const automergeLabel = repoContext.labels['merge/automerge'];\n  const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n  const prHasFeatureBranchLabel = hasLabelInPR(\n    pullRequest.labels,\n    featureBranchLabel,\n  );\n  const prHasSkipCiLabel = hasLabelInPR(pullRequest.labels, skipCiLabel);\n  const prHasAutoMergeLabel = hasLabelInPR(pullRequest.labels, automergeLabel);\n\n  return {\n    ...repoContext.config.prDefaultOptions,\n    featureBranch: prHasFeatureBranchLabel,\n    autoMergeWithSkipCi: prHasSkipCiLabel,\n    autoMerge: prHasAutoMergeLabel,\n  };\n};\n\nexport const syncLabelsAfterCommentBodyEdited = async (\n  pullRequest: PullRequestFromRestEndpoint,\n  context: Context<any>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n): Promise<void> => {\n  const featureBranchLabel = repoContext.labels['feature-branch'];\n  const automergeLabel = repoContext.labels['merge/automerge'];\n  const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n  const prHasFeatureBranchLabel = hasLabelInPR(\n    pullRequest.labels,\n    featureBranchLabel,\n  );\n  const prHasSkipCiLabel = hasLabelInPR(pullRequest.labels, skipCiLabel);\n  const prHasAutoMergeLabel = hasLabelInPR(pullRequest.labels, automergeLabel);\n\n  const { commentBody, options } = updateCommentOptions(\n    reviewflowPrContext.commentBody,\n    calcDefaultOptions(repoContext, pullRequest),\n  );\n\n  await updatePrCommentBodyIfNeeded(context, reviewflowPrContext, commentBody);\n\n  if (options && (featureBranchLabel || automergeLabel)) {\n    await Promise.all([\n      featureBranchLabel &&\n        syncLabel(\n          pullRequest,\n          context,\n          options.featureBranch,\n          featureBranchLabel,\n          prHasFeatureBranchLabel,\n        ),\n      skipCiLabel &&\n        syncLabel(\n          pullRequest,\n          context,\n          options.autoMergeWithSkipCi,\n          skipCiLabel,\n          prHasSkipCiLabel,\n        ),\n      automergeLabel &&\n        syncLabel(\n          pullRequest,\n          context,\n          options.autoMerge,\n          automergeLabel,\n          prHasAutoMergeLabel,\n          {\n            onAdd: async (prLabels) => {\n              await autoMergeIfPossible(\n                pullRequest,\n                context,\n                repoContext,\n                reviewflowPrContext,\n                prLabels,\n              );\n            },\n            onRemove: () => {\n              repoContext.removePrFromAutomergeQueue(\n                context,\n                pullRequest.number,\n                'label removed',\n              );\n            },\n          },\n        ),\n    ]);\n  }\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { syncLabelsAfterCommentBodyEdited } from './actions/syncLabelsAfterCommentBodyEdited';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { createMrkdwnSectionBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport { fetchPr } from './utils/fetchPr';\nimport type { PullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { getPullRequestFromPayload } from './utils/getPullRequestFromPayload';\nimport { checkIfIsThisBot } from './utils/isBotUser';\nimport { slackifyCommentBody } from './utils/slackifyCommentBody';\n\nexport default function prCommentEditedOrDeleted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    [\n      'pull_request_review_comment.edited',\n      'pull_request_review_comment.deleted',\n      // comments without review and without path are sent with issue_comment.created.\n      // createHandlerPullRequestChange checks if pull_request event is present, removing real issues comments.\n      'issue_comment.edited',\n      'issue_comment.deleted',\n    ],\n    createPullRequestHandler<\n      | EventPayloads.WebhookPayloadPullRequestReviewComment\n      | EventPayloads.WebhookPayloadIssueComment,\n      | PullRequestFromPayload<\n          | EventPayloads.WebhookPayloadPullRequestReviewComment\n          | EventPayloads.WebhookPayloadIssueComment\n        >\n      | any\n    >(\n      appContext,\n      (payload) => {\n        if (checkIfIsThisBot(payload.sender)) {\n          // ignore edits made from this bot\n          return null;\n        }\n        return getPullRequestFromPayload(payload);\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const { comment } = context.payload;\n\n        if (\n          reviewflowPrContext !== null &&\n          context.payload.action === 'edited' &&\n          checkIfIsThisBot(comment.user)\n        ) {\n          const updatedPr = await fetchPr(context, pullRequest.number);\n          if (!updatedPr.closed_at) {\n            await syncLabelsAfterCommentBodyEdited(\n              updatedPr,\n              context,\n              repoContext,\n              reviewflowPrContext,\n            );\n          }\n          return;\n        }\n\n        const type = (comment as any).pull_request_review_id\n          ? 'review-comment'\n          : 'issue-comment';\n\n        const criteria = {\n          'account.id': repoContext.account._id,\n          'account.type': repoContext.accountType,\n          type,\n          typeId: comment.id,\n        };\n\n        const sentMessages = await appContext.mongoStores.slackSentMessages.findAll(\n          criteria,\n        );\n\n        if (sentMessages.length === 0) return;\n\n        if (context.payload.action === 'deleted') {\n          await Promise.all([\n            Promise.all(\n              sentMessages.map((sentMessage) =>\n                Promise.all(\n                  sentMessage.sentTo.map((sentTo) =>\n                    repoContext.slack.deleteMessage(sentTo.ts, sentTo.channel),\n                  ),\n                ),\n              ),\n            ),\n            appContext.mongoStores.slackSentMessages.deleteMany(criteria),\n          ]);\n        } else {\n          const secondaryBlocks = [\n            createMrkdwnSectionBlock(\n              slackifyCommentBody(\n                comment.body,\n                (comment as any).start_line !== null,\n              ),\n            ),\n          ];\n\n          await Promise.all([\n            Promise.all(\n              sentMessages.map((sentMessage) =>\n                Promise.all(\n                  sentMessage.sentTo.map((sentTo) =>\n                    repoContext.slack.updateMessage(sentTo.ts, sentTo.channel, {\n                      ...sentMessage.message,\n                      secondaryBlocks,\n                    }),\n                  ),\n                ),\n              ),\n            ),\n            appContext.mongoStores.slackSentMessages.partialUpdateMany(\n              criteria,\n              { $set: { 'message.secondaryBlocks': secondaryBlocks } },\n            ),\n          ]);\n        }\n      },\n    ),\n  );\n}\n","import parse from '@commitlint/parse';\nimport type { CommitNote } from '@commitlint/types';\nimport type { RestEndpointMethodTypes } from '@octokit/rest';\nimport type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { updatePrCommentBodyIfNeeded } from './updatePrCommentBody';\nimport { updateCommentBodyCommitsNotes } from './utils/body/updateBody';\nimport syncLabel from './utils/syncLabel';\n\ninterface BreakingChangesCommits {\n  commit: RestEndpointMethodTypes['pulls']['listCommits']['response']['data'][number];\n  breakingChangesNotes: CommitNote[];\n}\n\nexport const readCommitsAndUpdateInfos = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  commentBody = reviewflowPrContext.commentBody,\n): Promise<void> => {\n  // tmp.data[0].sha\n  // tmp.data[0].commit.message\n\n  const commits = await context.octokit.paginate(\n    context.octokit.pulls.listCommits,\n    context.pullRequest({\n      // A custom page size up to 100. Default is 30.\n      per_page: 100,\n    }),\n    (res) => res.data,\n  );\n\n  const conventionalCommits = await Promise.all(\n    commits.map((c) => parse(c.commit.message)),\n  );\n\n  const breakingChangesCommits: BreakingChangesCommits[] = [];\n  conventionalCommits.forEach((c, index) => {\n    const breakingChangesNotes = c.notes.filter(\n      (note) => note.title === 'BREAKING CHANGE',\n    );\n    if (breakingChangesNotes.length > 0) {\n      breakingChangesCommits.push({\n        commit: commits[index],\n        breakingChangesNotes,\n      });\n    }\n  });\n\n  const breakingChangesLabel = repoContext.labels['breaking-changes'];\n  const newCommentBody = updateCommentBodyCommitsNotes(\n    commentBody,\n    breakingChangesCommits.length === 0\n      ? ''\n      : `Breaking Changes:\\n${breakingChangesCommits\n          .map(({ commit, breakingChangesNotes }) =>\n            breakingChangesNotes.map(\n              (note) => `- ${note.text.replace('\\n', ' ')} (${commit.sha})`,\n            ),\n          )\n          .join('')}`,\n  );\n\n  await Promise.all([\n    syncLabel(\n      pullRequest,\n      context,\n      breakingChangesCommits.length !== 0,\n      breakingChangesLabel,\n    ),\n    updatePrCommentBodyIfNeeded(context, reviewflowPrContext, newCommentBody),\n  ]);\n\n  // TODO auto update ! in front of : to signal a breaking change when https://github.com/conventional-changelog/commitlint/issues/658 is closed\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\n\ninterface UpdatePr {\n  title?: string;\n  body?: string;\n}\n\nconst cleanNewLines = (text: string | null): string =>\n  !text ? '' : text.replace(/\\r\\n/g, '\\n');\nconst checkIfHasDiff = (text1: string | null, text2: string): boolean =>\n  cleanNewLines(text1) !== cleanNewLines(text2);\n\nexport const updatePrIfNeeded = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  update: UpdatePr,\n): Promise<void> => {\n  const hasDiffInTitle = update.title && pullRequest.title !== update.title;\n  const hasDiffInBody =\n    update.body && checkIfHasDiff(pullRequest.body, update.body);\n\n  if (hasDiffInTitle || hasDiffInBody) {\n    const diff: Partial<Record<'title' | 'body', string>> = {};\n    if (hasDiffInTitle) {\n      diff.title = update.title;\n      pullRequest.title = update.title as string;\n    }\n    if (hasDiffInBody) {\n      diff.body = update.body;\n      pullRequest.body = update.body as string;\n    }\n\n    await context.octokit.pulls.update(\n      context.repo({\n        pull_number: pullRequest.number,\n        ...diff,\n      }),\n    );\n  }\n};\n","export const cleanTitle = (title: string): string =>\n  title\n    .trim()\n    .replace(\n      /[\\s-]+\\[?\\s*([A-Za-z][\\dA-Za-z]+)[ -](\\d+)\\s*]?\\s*$/,\n      (s, arg1, arg2) => ` ${arg1.toUpperCase()}-${arg2}`,\n    )\n    .replace(/^([A-Za-z]+)[/:]\\s*/, (s, arg1) => `${arg1.toLowerCase()}: `)\n    .replace(/^Revert \"([^\"]+)\"$/, 'revert: $1')\n    .replace(/\\s+[[\\]]\\s*no\\s*issue\\s*[[\\]]$/i, ' [no issue]')\n    .replace(/^(revert:.*)(\\s+\\(#\\d+\\))$/, '$1');\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { StatusError, StatusInfo } from '../../../accountConfigs/types';\nimport { ExcludesFalsy } from '../../../utils/Excludes';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { readCommitsAndUpdateInfos } from './readCommitsAndUpdateInfos';\nimport { calcDefaultOptions } from './syncLabelsAfterCommentBodyEdited';\nimport { updatePrIfNeeded } from './updatePr';\nimport { updatePrCommentBodyIfNeeded } from './updatePrCommentBody';\nimport {\n  updateCommentBodyInfos,\n  defaultCommentBody,\n  createCommentBody,\n  removeDeprecatedReviewflowInPrBody,\n} from './utils/body/updateBody';\nimport { cleanTitle } from './utils/cleanTitle';\nimport createStatus from './utils/createStatus';\n\ninterface StatusWithInfo {\n  name: string;\n  info: StatusInfo;\n  error?: undefined;\n}\n\ninterface StatusWithError {\n  name: string;\n  error: StatusError;\n  info?: undefined;\n}\n\ntype Status = StatusWithInfo | StatusWithError;\n\nexport const editOpenedPR = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  pullRequest: PullRequestWithDecentData,\n  context: Context<E>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n  shouldUpdateCommentBodyInfos: boolean,\n  previousSha?: string,\n): Promise<void> => {\n  const title = repoContext.config.trimTitle\n    ? cleanTitle(pullRequest.title)\n    : pullRequest.title;\n\n  const isPrFromBot = pullRequest.user && pullRequest.user.type === 'Bot';\n\n  const statuses: Status[] = [];\n\n  const errorRule = repoContext.config.parsePR.title.find((rule) => {\n    if (rule.bot === false && isPrFromBot) return false;\n\n    const match = rule.regExp.exec(title);\n    if (match === null) {\n      if (rule.status) {\n        statuses.push({ name: rule.status, error: rule.error });\n      }\n      return true;\n    }\n\n    if (rule.status && rule.statusInfoFromMatch) {\n      statuses.push({\n        name: rule.status,\n        info: rule.statusInfoFromMatch(match),\n      });\n      return false;\n    }\n\n    return false;\n  });\n\n  const date = new Date().toISOString();\n\n  const hasLintPrCheck = (\n    await context.octokit.checks.listForRef(\n      context.repo({\n        ref: pullRequest.head.sha,\n      }),\n    )\n  ).data.check_runs.find(\n    (check): boolean => check.name === `${process.env.REVIEWFLOW_NAME}/lint-pr`,\n  );\n\n  const promises: Promise<unknown>[] = [\n    ...statuses.map(\n      ({ name, error, info }): Promise<void> =>\n        createStatus(\n          context,\n          name,\n          pullRequest.head.sha,\n          error ? 'failure' : 'success',\n          error ? error.title : (info as StatusInfo).title,\n          error ? undefined : (info as StatusInfo).url,\n        ),\n    ),\n    ...(previousSha\n      ? statuses\n          .map(({ name, error, info }): Promise<void> | undefined =>\n            error\n              ? createStatus(\n                  context,\n                  name,\n                  previousSha,\n                  'success',\n                  'New commits have been pushed',\n                )\n              : undefined,\n          )\n          .filter(ExcludesFalsy)\n      : []),\n    hasLintPrCheck &&\n      context.octokit.checks.create(\n        context.repo({\n          name: `${process.env.REVIEWFLOW_NAME}/lint-pr`,\n          head_sha: pullRequest.head.sha,\n          status: 'completed' as const,\n          conclusion: (errorRule ? 'failure' : 'success') as\n            | 'failure'\n            | 'success',\n          started_at: date,\n          completed_at: date,\n          output: errorRule\n            ? errorRule.error\n            : {\n                title: '✓ Your PR is valid',\n                summary: '',\n              },\n        }),\n      ),\n    !hasLintPrCheck && previousSha && errorRule\n      ? createStatus(\n          context,\n          'lint-pr',\n          previousSha,\n          'success',\n          'New commits have been pushed',\n        )\n      : undefined,\n    !hasLintPrCheck &&\n      createStatus(\n        context,\n        'lint-pr',\n        pullRequest.head.sha,\n        errorRule ? 'failure' : 'success',\n        errorRule ? errorRule.error.title : '✓ Your PR is valid',\n      ),\n  ].filter(ExcludesFalsy);\n\n  const body = removeDeprecatedReviewflowInPrBody(pullRequest.body);\n  promises.push(updatePrIfNeeded(pullRequest, context, { title, body }));\n\n  const commentBodyInfos = statuses\n    .filter((status) => status.info?.inBody)\n    .map((status) => status.info) as StatusInfo[];\n\n  const shouldCreateCommentBody =\n    reviewflowPrContext.commentBody === defaultCommentBody;\n\n  const newBody = shouldCreateCommentBody\n    ? createCommentBody(\n        calcDefaultOptions(repoContext, pullRequest),\n        commentBodyInfos,\n      )\n    : updateCommentBodyInfos(reviewflowPrContext.commentBody, commentBodyInfos);\n\n  if (shouldCreateCommentBody || shouldUpdateCommentBodyInfos) {\n    promises.push(\n      readCommitsAndUpdateInfos(\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n        newBody,\n      ),\n    );\n  } else {\n    promises.push(\n      updatePrCommentBodyIfNeeded(context, reviewflowPrContext, newBody),\n    );\n  }\n\n  await Promise.all(promises);\n};\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\nimport { checkIfIsThisBot } from './utils/isBotUser';\n\nexport default function edited(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.edited',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        if (reviewflowPrContext == null) return;\n\n        const sender = context.payload.sender;\n        if (checkIfIsThisBot(sender)) {\n          return;\n        }\n\n        const updatedPullRequest = await fetchPr(\n          context,\n          context.payload.pull_request.number,\n        );\n\n        await editOpenedPR(\n          updatedPullRequest,\n          context,\n          repoContext,\n          reviewflowPrContext,\n          false,\n        );\n        await autoMergeIfPossible(\n          updatedPullRequest,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { Context } from 'probot';\nimport type { PullRequestWithDecentData } from '../utils/PullRequestData';\n\nexport const updateBranch = async (\n  pullRequest: PullRequestWithDecentData,\n  context: Context<any>,\n  login: string,\n): Promise<void> => {\n  context.log.info('update branch', {\n    head: pullRequest.head.ref,\n    base: pullRequest.base.ref,\n  });\n\n  const result = await context.octokit.repos\n    .merge({\n      owner: pullRequest.head.repo.owner.login,\n      repo: pullRequest.head.repo.name,\n      head: pullRequest.base.ref,\n      base: pullRequest.head.ref,\n    })\n    .catch((err) => ({ error: err } as any));\n\n  context.log.info(\n    {\n      status: result.status,\n      sha: result.data?.sha,\n      error: result.error,\n    },\n    'update branch result',\n  );\n\n  if (result.status === 204) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `@${login} could not update branch: base already contains the head, nothing to merge.`,\n      }),\n    );\n  } else if (result.status === 409) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `@${login} could not update branch: merge conflict. Please resolve manually.`,\n      }),\n    );\n  } else if (!result || !result.data || !result.data.sha) {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `@${login} could not update branch (unknown error)`,\n      }),\n    );\n  } else {\n    context.octokit.issues.createComment(\n      context.repo({\n        issue_number: pullRequest.number,\n        body: `@${login} branch updated: ${result.data.sha}`,\n      }),\n    );\n  }\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { updateBranch } from './actions/updateBranch';\nimport { updatePrCommentBodyOptions } from './actions/updatePrCommentBody';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { updateStatusCheckFromLabels } from './actions/updateStatusCheckFromLabels';\nimport hasLabelInPR from './actions/utils/hasLabelInPR';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nconst isFromRenovate = (\n  payload: EventPayloads.WebhookPayloadPullRequest,\n): boolean => {\n  const sender = payload.sender;\n  return (\n    sender.type === 'Bot' &&\n    sender.login === 'renovate[bot]' &&\n    payload.pull_request.head.ref.startsWith('renovate/')\n  );\n};\n\nexport default function labelsChanged(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    ['pull_request.labeled', 'pull_request.unlabeled'],\n    createPullRequestHandler<\n      EventPayloads.WebhookPayloadPullRequest,\n      EventPayloads.WebhookPayloadPullRequest['pull_request']\n    >(\n      appContext,\n      (payload, context, repoContext) => {\n        if (payload.sender.type === 'Bot' && !isFromRenovate(payload)) {\n          return null;\n        }\n\n        if (repoContext.shouldIgnore) return null;\n\n        return payload.pull_request;\n      },\n      async (pullRequest, context, repoContext, reviewflowPrContext) => {\n        if (reviewflowPrContext === null) return;\n\n        const fromRenovate = isFromRenovate(context.payload);\n        const updatedPr = await fetchPr(context, pullRequest.number);\n\n        const label = (context.payload as any).label;\n        if (fromRenovate) {\n          const codeApprovedLabel = repoContext.labels['code/approved'];\n          const codeNeedsReviewLabel = repoContext.labels['code/needs-review'];\n          const autoMergeLabel = repoContext.labels['merge/automerge'];\n          const autoMergeSkipCiLabel = repoContext.labels['merge/skip-ci'];\n          if (context.payload.action === 'labeled') {\n            if (codeApprovedLabel && label.id === codeApprovedLabel.id) {\n              // const { data: reviews } = await context.octokit.pulls.listReviews(\n              //   context.pullRequest({ per_page: 1 }),\n              // );\n              // if (reviews.length !== 0) {\n              await context.octokit.pulls.createReview(\n                context.pullRequest({ event: 'APPROVE' }),\n              );\n\n              let labels = updatedPr.labels;\n              const autoMergeWithSkipCi =\n                autoMergeSkipCiLabel &&\n                repoContext.config.autoMergeRenovateWithSkipCi;\n              if (autoMergeWithSkipCi) {\n                const result = await context.octokit.issues.addLabels(\n                  context.issue({\n                    labels: [autoMergeSkipCiLabel.name],\n                  }),\n                );\n                labels = result.data;\n              }\n              if (hasLabelInPR(labels, codeNeedsReviewLabel)) {\n                await updateReviewStatus(\n                  updatedPr,\n                  context,\n                  repoContext,\n                  'dev',\n                  {\n                    remove: ['needsReview'],\n                  },\n                );\n              } else {\n                await updateStatusCheckFromLabels(\n                  updatedPr,\n                  context,\n                  repoContext,\n                  labels,\n                );\n              }\n\n              await updatePrCommentBodyOptions(\n                context,\n                repoContext,\n                reviewflowPrContext,\n                {\n                  autoMergeWithSkipCi,\n                  // force label to avoid racing events (when both events are sent in the same time, reviewflow treats them one by one but the second event wont have its body updated)\n                  autoMerge: hasLabelInPR(labels, autoMergeLabel)\n                    ? true\n                    : repoContext.config.prDefaultOptions.autoMerge,\n                },\n              );\n              // }\n            } else if (autoMergeLabel && label.id === autoMergeLabel.id) {\n              await updatePrCommentBodyOptions(\n                context,\n                repoContext,\n                reviewflowPrContext,\n                {\n                  autoMerge: true,\n                  // force label to avoid racing events (when both events are sent in the same time, reviewflow treats them one by one but the second event wont have its body updated)\n                  // Note: si c'est renovate qui ajoute le label autoMerge, le label codeApprovedLabel n'aurait pu etre ajouté que par renovate également (on est a quelques secondes de l'ouverture de la pr par renovate)\n                  autoMergeWithSkipCi: hasLabelInPR(\n                    pullRequest.labels,\n                    codeApprovedLabel,\n                  )\n                    ? true\n                    : repoContext.config.prDefaultOptions.autoMergeWithSkipCi,\n                },\n              );\n            }\n            await autoMergeIfPossible(\n              updatedPr,\n              context,\n              repoContext,\n              reviewflowPrContext,\n            );\n          }\n          return;\n        }\n\n        if (repoContext.protectedLabelIds.includes(label.id)) {\n          if (context.payload.action === 'labeled') {\n            await context.octokit.issues.removeLabel(\n              context.issue({ name: label.name }),\n            );\n          } else {\n            await context.octokit.issues.addLabels(\n              context.issue({ labels: [label.name] }),\n            );\n          }\n          return;\n        }\n\n        await updateStatusCheckFromLabels(updatedPr, context, repoContext);\n\n        const updateBranchLabel = repoContext.labels['merge/update-branch'];\n        const featureBranchLabel = repoContext.labels['feature-branch'];\n        const automergeLabel = repoContext.labels['merge/automerge'];\n        const skipCiLabel = repoContext.labels['merge/skip-ci'];\n\n        const option = (() => {\n          if (featureBranchLabel && label.id === featureBranchLabel.id) {\n            return 'featureBranch';\n          }\n          if (automergeLabel && label.id === automergeLabel.id) {\n            return 'autoMerge';\n          }\n          if (skipCiLabel && label.id === skipCiLabel.id) {\n            return 'autoMergeWithSkipCi';\n          }\n          return null;\n        })();\n\n        if (option) {\n          await updatePrCommentBodyOptions(\n            context,\n            repoContext,\n            reviewflowPrContext,\n            {\n              [option]: context.payload.action === 'labeled',\n            },\n          );\n        } // not an else if\n        if (automergeLabel && label.id === automergeLabel.id) {\n          if (context.payload.action === 'labeled') {\n            await autoMergeIfPossible(\n              updatedPr,\n              context,\n              repoContext,\n              reviewflowPrContext,\n            );\n          } else {\n            repoContext.removePrFromAutomergeQueue(\n              context,\n              pullRequest.number,\n              'automerge label removed',\n            );\n          }\n        }\n        if (updateBranchLabel && label.id === updateBranchLabel.id) {\n          if (context.payload.action === 'labeled') {\n            await updateBranch(\n              updatedPr,\n              context,\n              context.payload.sender.login,\n            );\n            await context.octokit.issues.removeLabel(\n              context.issue({ name: label.name }),\n            );\n          }\n        }\n      },\n    ),\n  );\n}\n","import type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { PullRequestFromRestEndpoint } from '../utils/PullRequestData';\nimport type { ReviewflowPrContext } from '../utils/createPullRequestContext';\nimport { autoMergeIfPossible } from './autoMergeIfPossible';\nimport hasLabelInPR from './utils/hasLabelInPR';\n\nexport const autoApproveAndAutoMerge = async (\n  pullRequest: PullRequestFromRestEndpoint,\n  context: Context<any>,\n  repoContext: RepoContext,\n  reviewflowPrContext: ReviewflowPrContext,\n): Promise<boolean> => {\n  // const autoMergeLabel = repoContext.labels['merge/automerge'];\n  const codeApprovedLabel = repoContext.labels['code/approved'];\n  if (hasLabelInPR(pullRequest.labels, codeApprovedLabel)) {\n    await context.octokit.pulls.createReview(\n      context.pullRequest({ event: 'APPROVE' }),\n    );\n    await autoMergeIfPossible(\n      pullRequest,\n      context,\n      repoContext,\n      reviewflowPrContext,\n    );\n    return true;\n  }\n\n  return false;\n};\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Context } from 'probot';\nimport type { RepoContext } from 'context/repoContext';\nimport type { PullRequestFromRestEndpoint } from '../utils/PullRequestData';\n\nexport const autoAssignPRToCreator = async <\n  E extends EventPayloads.WebhookPayloadPullRequest\n>(\n  pullRequest: E['pull_request'] | PullRequestFromRestEndpoint,\n  context: Context<E>,\n  repoContext: RepoContext,\n): Promise<void> => {\n  if (!repoContext.config.autoAssignToCreator) return;\n  if (!pullRequest.assignees || pullRequest.assignees.length > 0) return;\n  if (!pullRequest.user || pullRequest.user.type === 'Bot') return;\n\n  await context.octokit.issues.addAssignees(\n    context.issue({\n      assignees: [pullRequest.user.login],\n    }),\n  );\n};\n","import type { Probot } from 'probot';\nimport type { AppContext } from 'context/AppContext';\nimport { autoApproveAndAutoMerge } from './actions/autoApproveAndAutoMerge';\nimport { autoAssignPRToCreator } from './actions/autoAssignPRToCreator';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { defaultCommentBody } from './actions/utils/body/updateBody';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\nimport { createReviewflowComment } from './utils/reviewflowComment';\n\nexport default function opened(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.opened',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (pullRequest, context, repoContext, reviewflowPrContext) => {\n        if (reviewflowPrContext === null) return;\n        const fromRenovate = pullRequest.head.ref.startsWith('renovate/');\n\n        await Promise.all<unknown>([\n          autoAssignPRToCreator(pullRequest, context, repoContext),\n          editOpenedPR(\n            pullRequest,\n            context,\n            repoContext,\n            reviewflowPrContext,\n            true,\n          ),\n          fromRenovate\n            ? fetchPr(context, pullRequest.number).then((updatedPr) =>\n                autoApproveAndAutoMerge(\n                  updatedPr,\n                  context,\n                  repoContext,\n                  reviewflowPrContext,\n                ).then(\n                  async (approved: boolean): Promise<void> => {\n                    if (!approved) {\n                      await updateReviewStatus(\n                        pullRequest,\n                        context,\n                        repoContext,\n                        'dev',\n                        {\n                          add: ['needsReview'],\n                        },\n                      );\n                    }\n                  },\n                ),\n              )\n            : updateReviewStatus(pullRequest, context, repoContext, 'dev', {\n                add: repoContext.config.requiresReviewRequest\n                  ? ['needsReview']\n                  : [],\n                remove: ['approved', 'changesRequested'],\n              }),\n        ]);\n      },\n      (pullRequest, context, repoContext) => {\n        return {\n          reviewflowCommentPromise: createReviewflowComment(\n            pullRequest.number,\n            context,\n            defaultCommentBody,\n          ),\n        };\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AccountInfo } from 'context/getOrCreateAccount';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { getRolesFromPullRequestAndReviewers } from './utils/getRolesFromPullRequestAndReviewers';\n\nexport default function reopened(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.reopened',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        return payload.pull_request;\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        /* if repo is not ignored */\n        if (reviewflowPrContext) {\n          await Promise.all([\n            updateReviewStatus(pullRequest, context, repoContext, 'dev', {\n              add: ['needsReview'],\n              remove: ['approved'],\n            }),\n            editOpenedPR(\n              pullRequest,\n              context,\n              repoContext,\n              reviewflowPrContext,\n              true,\n            ),\n          ]);\n        }\n\n        /* update slack home */\n        if (pullRequest.requested_reviewers) {\n          pullRequest.requested_reviewers.forEach((requestedReviewer) => {\n            repoContext.slack.updateHome(requestedReviewer.login);\n          });\n        }\n\n        if (pullRequest.assignees) {\n          pullRequest.assignees.forEach((assignee) => {\n            repoContext.slack.updateHome(assignee.login);\n          });\n        }\n\n        /* send notifications to assignees and followers */\n        const { reviewers } = await getReviewersAndReviewStates(\n          context,\n          repoContext,\n        );\n        const {\n          owner,\n          assignees,\n          followers,\n        } = getRolesFromPullRequestAndReviewers(pullRequest, reviewers);\n\n        const senderMention = repoContext.slack.mention(\n          context.payload.sender.login,\n        );\n        const ownerMention = repoContext.slack.mention(owner.login);\n        const prLink = slackUtils.createPrLink(pullRequest, repoContext);\n\n        const createMessage = (to: AccountInfo): string => {\n          const ownerPart = slackUtils.createOwnerPart(\n            ownerMention,\n            pullRequest,\n            to,\n          );\n\n          return `:recycle: ${senderMention} reopened ${ownerPart} ${prLink}\\n> ${pullRequest.title}`;\n        };\n\n        assignees.map((assignee) => {\n          if (context.payload.sender.id === assignee.id) return;\n          return repoContext.slack.postMessage(\n            'pr-lifecycle',\n            assignee.id,\n            assignee.login,\n            {\n              text: createMessage(assignee),\n            },\n          );\n        });\n\n        followers.map((follower) => {\n          if (context.payload.sender.id === follower.id) return;\n          return repoContext.slack.postMessage(\n            'pr-lifecycle-follow',\n            follower.id,\n            follower.login,\n            {\n              text: createMessage(follower),\n            },\n          );\n        });\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\n\nexport default function reviewDismissed(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request_review.dismissed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const sender = context.payload.sender;\n        const reviewer = context.payload.review.user;\n        const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          const updatedPr = await fetchPr(context, pullRequest.number);\n\n          const { reviewStates } = await getReviewersAndReviewStates(\n            context,\n            repoContext,\n          );\n\n          const hasChangesRequestedInReviews =\n            reviewStates[reviewerGroup].changesRequested !== 0;\n          const hasApprovals = reviewStates[reviewerGroup].approved !== 0;\n          const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n            reviewerGroup,\n            updatedPr,\n            { includesReviewerGroup: true },\n          );\n\n          await updateReviewStatus(\n            updatedPr,\n            context,\n            repoContext,\n            reviewerGroup,\n            {\n              add: [\n                !hasApprovals && 'needsReview',\n                hasApprovals &&\n                  !hasRequestedReviewsForGroup &&\n                  !hasChangesRequestedInReviews &&\n                  'approved',\n              ],\n              remove: [\n                !hasRequestedReviewsForGroup &&\n                  !hasChangesRequestedInReviews &&\n                  'requested',\n                !hasChangesRequestedInReviews && 'changesRequested',\n                !hasApprovals && 'approved',\n              ],\n            },\n          );\n\n          if (updatedPr.assignees) {\n            updatedPr.assignees.forEach((assignee) => {\n              if (assignee) {\n                repoContext.slack.updateHome(assignee.login);\n              }\n            });\n          }\n          if (\n            !updatedPr.assignees ||\n            !updatedPr.assignees.find(\n              (assignee) => assignee && assignee.login === reviewer.login,\n            )\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n        }\n\n        if (repoContext.slack) {\n          if (sender.login === reviewer.login) {\n            pullRequest.assignees.forEach((assignee) => {\n              repoContext.slack.postMessage(\n                'pr-review',\n                assignee.id,\n                assignee.login,\n                {\n                  text: `:recycle: ${repoContext.slack.mention(\n                    reviewer.login,\n                  )} dismissed his review on ${slackUtils.createPrLink(\n                    pullRequest,\n                    repoContext,\n                  )}`,\n                },\n              );\n            });\n          } else {\n            repoContext.slack.postMessage(\n              'pr-review',\n              reviewer.id,\n              reviewer.login,\n              {\n                text: `:recycle: ${repoContext.slack.mention(\n                  sender.login,\n                )} dismissed your review on ${slackUtils.createPrLink(\n                  pullRequest,\n                  repoContext,\n                )}`,\n              },\n            );\n          }\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\n\nexport default function reviewRequestRemoved(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request.review_request_removed',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const sender = context.payload.sender;\n        const reviewer = (context.payload as any).requested_reviewer;\n\n        const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n            reviewerGroup,\n            pullRequest,\n            {\n              includesReviewerGroup: true,\n            },\n          );\n\n          const { reviewStates } = await getReviewersAndReviewStates(\n            context,\n            repoContext,\n          );\n\n          const hasChangesRequestedInReviews =\n            reviewStates[reviewerGroup].changesRequested !== 0;\n\n          const hasApprovedInReviews =\n            reviewStates[reviewerGroup].approved !== 0;\n\n          const approved =\n            !hasRequestedReviewsForGroup &&\n            !hasChangesRequestedInReviews &&\n            hasApprovedInReviews;\n\n          await updateReviewStatus(\n            pullRequest,\n            context,\n            repoContext,\n            reviewerGroup,\n            {\n              add: [\n                // if changes requested by the one which requests was removed (should still be in changed requested anyway, but we never know)\n                hasChangesRequestedInReviews && 'changesRequested',\n                // if was already approved by another member in the group and has no other requests waiting\n                approved && 'approved',\n              ],\n              // remove labels if has no other requests waiting\n              remove: [\n                approved && 'needsReview',\n                !hasRequestedReviewsForGroup && 'requested',\n              ],\n            },\n          );\n\n          if (pullRequest.assignees) {\n            pullRequest.assignees.forEach((assignee) => {\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n          if (\n            !pullRequest.assignees.find(\n              (assignee) => assignee.login === reviewer.login,\n            )\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n        }\n\n        if (sender.login === reviewer.login) return;\n\n        repoContext.slack.postMessage(\n          'pr-review',\n          reviewer.id,\n          reviewer.login,\n          {\n            text: `:skull_and_crossbones: ${repoContext.slack.mention(\n              sender.login,\n            )} removed the request for your review on ${slackUtils.createPrLink(\n              pullRequest,\n              repoContext,\n            )}`,\n          },\n        );\n\n        const sentMessageRequestedReview = await appContext.mongoStores.slackSentMessages.findOne(\n          {\n            'account.id': repoContext.account._id,\n            'account.type': repoContext.accountType,\n            type: 'review-requested',\n            typeId: `${pullRequest.id}_${reviewer.id}`,\n          },\n        );\n\n        if (sentMessageRequestedReview) {\n          const sentTo = sentMessageRequestedReview.sentTo[0];\n          const message = sentMessageRequestedReview.message;\n          await Promise.all([\n            repoContext.slack.updateMessage(sentTo.ts, sentTo.channel, {\n              ...message,\n              text: message.text\n                .split('\\n')\n                .map((l) => `~${l}~`)\n                .join('\\n'),\n            }),\n            repoContext.slack.addReaction(\n              sentTo.ts,\n              sentTo.channel,\n              'skull_and_crossbones',\n            ),\n            appContext.mongoStores.slackSentMessages.deleteOne(\n              sentMessageRequestedReview,\n            ),\n          ]);\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\n\nexport default function reviewRequested(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request.review_requested',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const sender = context.payload.sender;\n\n        const reviewer = (context.payload as any).requested_reviewer;\n\n        const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n        const shouldWait = false;\n        // repoContext.approveShouldWait(reviewerGroup, pr.requested_reviewers, { includesWaitForGroups: true });\n\n        if (\n          !repoContext.shouldIgnore &&\n          reviewerGroup &&\n          repoContext.config.labels.review[reviewerGroup]\n        ) {\n          await updateReviewStatus(\n            pullRequest,\n            context,\n            repoContext,\n            reviewerGroup,\n            {\n              add: ['needsReview', !shouldWait && 'requested'],\n              remove: ['approved'],\n            },\n          );\n\n          if (pullRequest.assignees) {\n            pullRequest.assignees.forEach((assignee) => {\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n          if (\n            !pullRequest.assignees.find(\n              (assignee) => assignee.login === reviewer.login,\n            )\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n        }\n\n        if (sender.login === reviewer.login) return;\n\n        if (!shouldWait && repoContext.slack) {\n          const text = `:eyes: ${repoContext.slack.mention(\n            sender.login,\n          )} requests your review on ${slackUtils.createPrLink(\n            pullRequest,\n            repoContext,\n          )} !\\n> ${pullRequest.title}`;\n          const message = { text };\n          const result = await repoContext.slack.postMessage(\n            'pr-review',\n            reviewer.id,\n            reviewer.login,\n            message,\n          );\n          if (result) {\n            await appContext.mongoStores.slackSentMessages.insertOne({\n              type: 'review-requested',\n              typeId: `${pullRequest.id}_${reviewer.id}`,\n              message,\n              account: repoContext.accountEmbed,\n              sentTo: [result],\n            });\n          }\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport slackifyMarkdown from 'slackify-markdown';\nimport type { AppContext } from '../../context/AppContext';\nimport * as slackUtils from '../../slack/utils';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { updateReviewStatus } from './actions/updateReviewStatus';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { createSlackMessageWithSecondaryBlock } from './utils/createSlackMessageWithSecondaryBlock';\nimport { fetchPr } from './utils/fetchPr';\nimport { getReviewersAndReviewStates } from './utils/getReviewersAndReviewStates';\nimport { getRolesFromPullRequestAndReviewers } from './utils/getRolesFromPullRequestAndReviewers';\n\nconst getEmojiFromState = (state: string): string => {\n  switch (state) {\n    case 'changes_requested':\n      return 'x';\n    case 'approved':\n      return 'white_check_mark';\n    default:\n      return 'speech_balloon';\n  }\n};\n\nexport default function reviewSubmitted(\n  app: Probot,\n  appContext: AppContext,\n): void {\n  app.on(\n    'pull_request_review.submitted',\n    createPullRequestHandler(\n      appContext,\n      (payload) => payload.pull_request,\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        const { payload } = context;\n\n        const {\n          user: reviewer,\n          state,\n          body,\n          html_url: reviewUrl,\n        } = payload.review;\n\n        const { reviewers, reviewStates } = await getReviewersAndReviewStates(\n          context,\n          repoContext,\n        );\n        const {\n          owner,\n          assignees,\n          followers,\n        } = getRolesFromPullRequestAndReviewers(pullRequest, reviewers);\n        const isReviewByOwner = owner.login === reviewer.login;\n\n        const filteredFollowers = followers.filter(\n          (follower) => follower.id !== reviewer.id,\n        );\n\n        if (!isReviewByOwner) {\n          const reviewerGroup = repoContext.getReviewerGroup(reviewer.login);\n          let merged: boolean;\n\n          if (\n            reviewflowPrContext &&\n            !repoContext.shouldIgnore &&\n            reviewerGroup &&\n            repoContext.config.labels.review[reviewerGroup]\n          ) {\n            const hasRequestedReviewsForGroup = repoContext.approveShouldWait(\n              reviewerGroup,\n              pullRequest,\n              {\n                includesReviewerGroup: true,\n                // TODO reenable this when accepted can notify request review to slack (dev accepted => design requested) and flag to disable for label (approved design ; still waiting for dev ?)\n                // includesWaitForGroups: true,\n              },\n            );\n\n            const hasChangesRequestedInReviews =\n              reviewStates[reviewerGroup].changesRequested !== 0;\n\n            const approved =\n              !hasRequestedReviewsForGroup &&\n              !hasChangesRequestedInReviews &&\n              state === 'approved';\n\n            const updatedPr = await fetchPr(context, pullRequest.number);\n\n            const newLabels = await updateReviewStatus(\n              updatedPr,\n              context,\n              repoContext,\n              reviewerGroup,\n              {\n                add: [\n                  approved && 'approved',\n                  state === 'changes_requested' && 'needsReview',\n                  state === 'changes_requested' && 'changesRequested',\n                ],\n                remove: [\n                  approved && 'needsReview',\n                  !hasRequestedReviewsForGroup && 'requested',\n                  state === 'approved' &&\n                    !hasChangesRequestedInReviews &&\n                    'changesRequested',\n                  state === 'changes_requested' && 'approved',\n                ],\n              },\n            );\n\n            if (approved && !hasChangesRequestedInReviews) {\n              merged = await autoMergeIfPossible(\n                updatedPr,\n                context,\n                repoContext,\n                reviewflowPrContext,\n                newLabels,\n              );\n            }\n          }\n\n          if (assignees) {\n            assignees.forEach((assignee) => {\n              repoContext.slack.updateHome(assignee.login);\n            });\n          }\n          if (\n            !assignees.find((assignee) => assignee.login === reviewer.login)\n          ) {\n            repoContext.slack.updateHome(reviewer.login);\n          }\n\n          const sentMessageRequestedReview = await appContext.mongoStores.slackSentMessages.findOne(\n            {\n              'account.id': repoContext.account._id,\n              'account.type': repoContext.accountType,\n              type: 'review-requested',\n              typeId: `${pullRequest.id}_${reviewer.id}`,\n            },\n          );\n\n          const emoji = getEmojiFromState(state);\n\n          if (sentMessageRequestedReview) {\n            const sentTo = sentMessageRequestedReview.sentTo[0];\n            const message = sentMessageRequestedReview.message;\n            await Promise.all([\n              repoContext.slack.updateMessage(sentTo.ts, sentTo.channel, {\n                ...message,\n                text: message.text\n                  .split('\\n')\n                  .map((l) => `~${l}~`)\n                  .join('\\n'),\n              }),\n              repoContext.slack.addReaction(sentTo.ts, sentTo.channel, emoji),\n              appContext.mongoStores.slackSentMessages.deleteOne(\n                sentMessageRequestedReview,\n              ),\n            ]);\n          }\n\n          if (!body && state !== 'changes_requested' && state !== 'approved') {\n            return;\n          }\n\n          const mention = repoContext.slack.mention(reviewer.login);\n          const prUrl = slackUtils.createPrLink(pullRequest, repoContext);\n          const ownerMention = repoContext.slack.mention(owner.login);\n\n          const createMessage = (\n            toOwner?: boolean,\n            isAssignedTo?: boolean,\n          ): string => {\n            const ownerPart = toOwner\n              ? 'your PR'\n              : `${ownerMention}'s PR${\n                  isAssignedTo ? \" you're assigned to\" : ''\n                }`;\n\n            if (state === 'changes_requested') {\n              return `:${emoji}: ${mention} requests changes on ${ownerPart} ${prUrl}`;\n            }\n            if (state === 'approved') {\n              return `${\n                toOwner ? ':clap: ' : ''\n              }:${emoji}: ${mention} approves ${ownerPart} ${prUrl}${\n                merged ? ' and PR is merged :tada:' : ''\n              }`;\n            }\n\n            const commentLink = slackUtils.createLink(reviewUrl, 'commented');\n            return `:${emoji}: ${mention} ${commentLink} on ${ownerPart} ${prUrl}`;\n          };\n\n          const slackifiedBody = slackifyMarkdown((body as unknown) as string);\n\n          assignees.forEach((assignee) => {\n            repoContext.slack.postMessage(\n              'pr-review',\n              assignee.id,\n              assignee.login,\n              createSlackMessageWithSecondaryBlock(\n                createMessage(assignee.id === owner.id, true),\n                slackifiedBody,\n              ),\n            );\n          });\n\n          const message = createSlackMessageWithSecondaryBlock(\n            createMessage(false),\n            slackifiedBody,\n          );\n\n          filteredFollowers.forEach((follower) => {\n            repoContext.slack.postMessage(\n              'pr-review-follow',\n              follower.id,\n              follower.login,\n              message,\n            );\n          });\n        } else if (body) {\n          const mention = repoContext.slack.mention(reviewer.login);\n          const prUrl = slackUtils.createPrLink(pullRequest, repoContext);\n          const commentLink = slackUtils.createLink(reviewUrl, 'commented');\n\n          const message = createSlackMessageWithSecondaryBlock(\n            `:speech_balloon: ${mention} ${commentLink} on his PR ${prUrl}`,\n            body,\n          );\n\n          filteredFollowers.forEach((follower) => {\n            repoContext.slack.postMessage(\n              'pr-review-follow',\n              follower.id,\n              follower.login,\n              message,\n            );\n          });\n        }\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot, Context } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport type { LockedMergePr } from '../../context/repoContext';\nimport { createPullRequestsHandler } from './utils/createPullRequestHandler';\n\nconst isSameBranch = (\n  payload: Context<EventPayloads.WebhookPayloadStatus>['payload'],\n  lockedPr: LockedMergePr,\n): boolean => {\n  if (!lockedPr) return false;\n  return !!payload.branches.find((b) => b.name === lockedPr.branch);\n};\n\nexport default function status(app: Probot, appContext: AppContext): void {\n  app.on(\n    'status',\n    createPullRequestsHandler(\n      appContext,\n      (payload, repoContext): LockedMergePr[] => {\n        if (repoContext.shouldIgnore) return [];\n\n        const lockedPr = repoContext.getMergeLockedPr();\n        if (!lockedPr) return [];\n\n        if (payload.state !== 'loading' && isSameBranch(payload, lockedPr)) {\n          return [lockedPr];\n        }\n\n        return [];\n      },\n      (pr, context, repoContext): void => {\n        const lockedPr = repoContext.getMergeLockedPr();\n        // check if changed\n        if (isSameBranch(context.payload, lockedPr)) {\n          repoContext.reschedule(context, lockedPr);\n        }\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { autoMergeIfPossible } from './actions/autoMergeIfPossible';\nimport { editOpenedPR } from './actions/editOpenedPR';\nimport { updateStatusCheckFromLabels } from './actions/updateStatusCheckFromLabels';\nimport { createPullRequestHandler } from './utils/createPullRequestHandler';\nimport { fetchPr } from './utils/fetchPr';\n\nexport default function synchronize(app: Probot, appContext: AppContext): void {\n  app.on(\n    'pull_request.synchronize',\n    createPullRequestHandler(\n      appContext,\n      (payload, context, repoContext) => {\n        if (repoContext.shouldIgnore) return null;\n        return payload.pull_request;\n      },\n      async (\n        pullRequest,\n        context,\n        repoContext,\n        reviewflowPrContext,\n      ): Promise<void> => {\n        if (!reviewflowPrContext) return;\n\n        const updatedPr = await fetchPr(context, pullRequest.number);\n        // old and new sha\n        // const { before, after } = context.payload;\n        const previousSha = (context.payload as any).before as string;\n\n        await Promise.all([\n          editOpenedPR(\n            updatedPr,\n            context,\n            repoContext,\n            reviewflowPrContext,\n            true,\n            previousSha,\n          ),\n          // addStatusCheckToLatestCommit\n          updateStatusCheckFromLabels(\n            updatedPr,\n            context,\n            repoContext,\n            updatedPr.labels,\n            previousSha,\n          ),\n        ]);\n\n        // call autoMergeIfPossible to re-add to the queue when push is fixed\n        await autoMergeIfPossible(\n          updatedPr,\n          context,\n          repoContext,\n          reviewflowPrContext,\n        );\n      },\n    ),\n  );\n}\n","import type { Probot } from 'probot';\nimport type { AppContext } from '../../context/AppContext';\nimport { obtainRepoContext } from '../../context/repoContext';\nimport { getEmojiFromRepoDescription } from '../../context/utils';\nimport { createHandlerOrgChange } from '../account-handlers/utils/handler';\n\nexport default function repoEdited(app: Probot, appContext: AppContext): void {\n  app.on(\n    'repository.edited',\n    createHandlerOrgChange(\n      appContext,\n      async (context, orgContext): Promise<void> => {\n        const repoContext = await obtainRepoContext(appContext, context);\n        if (!repoContext) return;\n        const repo = context.payload.repository;\n        repoContext.repoFullName = repo.full_name;\n        repoContext.repoEmoji = getEmojiFromRepoDescription(repo.description);\n      },\n    ),\n  );\n}\n","import type { EventPayloads } from '@octokit/webhooks';\nimport type { Probot } from 'probot';\n// import commands from 'probot-commands';\nimport type { AppContext } from './context/AppContext';\nimport { syncOrg } from './events/account-handlers/actions/syncOrg';\nimport {\n  syncTeams,\n  syncTeamsAndTeamMembers,\n} from './events/account-handlers/actions/syncTeams';\nimport { createHandlerOrgChange } from './events/account-handlers/utils/handler';\nimport checkrunCompleted from './events/pr-handlers/checkrunCompleted';\nimport checksuiteCompleted from './events/pr-handlers/checksuiteCompleted';\nimport closedHandler from './events/pr-handlers/closed';\nimport commentCreated from './events/pr-handlers/commentCreated';\nimport commentEditedOrDeleted from './events/pr-handlers/commentEditedOrDeleted';\nimport editedHandler from './events/pr-handlers/edited';\nimport labelsChanged from './events/pr-handlers/labelsChanged';\nimport openedHandler from './events/pr-handlers/opened';\nimport reopenedHandler from './events/pr-handlers/reopened';\nimport reviewDismissedHandler from './events/pr-handlers/reviewDismissed';\nimport reviewRequestRemovedHandler from './events/pr-handlers/reviewRequestRemoved';\nimport reviewRequestedHandler from './events/pr-handlers/reviewRequested';\nimport reviewSubmittedHandler from './events/pr-handlers/reviewSubmitted';\nimport status from './events/pr-handlers/status';\nimport synchronizeHandler from './events/pr-handlers/synchronize';\nimport repoEdited from './events/repository-handlers/repoEdited';\n\nexport default function initApp(app: Probot, appContext: AppContext): void {\n  /* https://developer.github.com/webhooks/event-payloads/#organization */\n  app.on(\n    ['organization.member_added', 'organization.member_removed'],\n    createHandlerOrgChange<EventPayloads.WebhookPayloadOrganization>(\n      appContext,\n      async (context, accountContext) => {\n        await syncOrg(\n          appContext.mongoStores,\n          context.octokit,\n          accountContext.account.installationId as number,\n          context.payload.organization,\n        );\n      },\n    ),\n  );\n\n  /* https://developer.github.com/webhooks/event-payloads/#team */\n  app.on(\n    ['team.created', 'team.deleted', 'team.edited'],\n    createHandlerOrgChange<EventPayloads.WebhookPayloadTeam>(\n      appContext,\n      async (context, accountContext) => {\n        await syncTeams(\n          appContext.mongoStores,\n          context.octokit,\n          context.payload.organization,\n        );\n      },\n    ),\n  );\n\n  /* https://developer.github.com/webhooks/event-payloads/#membership */\n  app.on(\n    ['membership.added', 'membership.removed'],\n    createHandlerOrgChange<EventPayloads.WebhookPayloadMembership>(\n      appContext,\n      async (context, accountContext) => {\n        // TODO: only sync team members and team parents members\n        // await syncTeamMembersWithTeamParents(\n        //   appContext.mongoStores,\n        //   context.octokit,\n        //   context.payload.organization,\n        //   {\n        //     id: context.payload.team.id,\n        //     name: context.payload.team.name,\n        //     slug: context.payload.team.slug,\n        //   },\n        // );\n        await syncTeamsAndTeamMembers(\n          appContext.mongoStores,\n          context.octokit,\n          context.payload.organization,\n        );\n      },\n    ),\n  );\n\n  // Repo\n  /* https://developer.github.com/webhooks/event-payloads/#repository */\n  repoEdited(app, appContext);\n\n  // PR\n  /* https://developer.github.com/webhooks/event-payloads/#pull_request */\n  openedHandler(app, appContext);\n  editedHandler(app, appContext);\n  closedHandler(app, appContext);\n  reopenedHandler(app, appContext);\n\n  reviewRequestedHandler(app, appContext);\n  reviewRequestRemovedHandler(app, appContext);\n  reviewSubmittedHandler(app, appContext);\n  reviewDismissedHandler(app, appContext);\n  labelsChanged(app, appContext);\n  synchronizeHandler(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#pull_request_review_comment */\n  /* https://developer.github.com/webhooks/event-payloads/#issue_comment */\n  commentCreated(app, appContext);\n  commentEditedOrDeleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#check_run */\n  checkrunCompleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#check_suite */\n  checksuiteCompleted(app, appContext);\n\n  /* https://developer.github.com/webhooks/event-payloads/#status */\n  status(app, appContext);\n\n  /* commands */\n  // commands(app, 'update-branch', () => {});\n}\n","/* eslint-disable @typescript-eslint/no-floating-promises */\nimport type { MongoBaseModel } from 'liwi-mongo';\nimport { MongoStore, MongoConnection } from 'liwi-mongo';\nimport type { SlackMessage } from './context/SlackMessage';\nimport type { MessageCategory } from './dm/MessageCategory';\n\n// export interface PrEventsModel extends MongoModel {\n//   owner: string;\n//   repo: string;\n//   prId: string;\n//   prNumber: string;\n//   event: string;\n// }\n\nexport type AccountType = 'Organization' | 'User';\n\nexport interface AccountEmbed {\n  id: number;\n  login: string;\n  type: AccountType;\n}\n\ninterface RepoEmbed {\n  id: number;\n  name: string;\n}\n\ninterface PrEmbed {\n  number: number;\n}\n\ntype AccountEmbedWithoutType = Omit<AccountEmbed, 'type'>;\n\nexport interface UserDmSettings extends MongoBaseModel {\n  userId: number;\n  orgId: number;\n  settings: Record<MessageCategory, boolean>;\n}\n\n// TODO _id is number\ninterface BaseAccount extends MongoBaseModel<number> {\n  login: string;\n  installationId?: number;\n}\n\nexport interface User extends BaseAccount {\n  type: string;\n}\n\nexport interface Org extends BaseAccount {\n  slackToken?: string;\n}\n\nexport interface OrgTeam extends MongoBaseModel<number> {\n  org: AccountEmbedWithoutType;\n  name: string;\n  slug: string;\n  description: string | null;\n}\n\nexport interface OrgTeamEmbed {\n  id: OrgTeam['_id'];\n  name: OrgTeam['name'];\n  slug: OrgTeam['slug'];\n}\n\nexport interface OrgMember extends MongoBaseModel {\n  org: AccountEmbedWithoutType;\n  user: AccountEmbedWithoutType;\n  slack?: { id: string };\n  teams: OrgTeamEmbed[];\n}\n\nexport type SlackMessageType =\n  | 'review-comment'\n  | 'issue-comment'\n  | 'review-submitted'\n  | 'review-requested';\n\nexport interface SlackSentMessage extends MongoBaseModel {\n  type: SlackMessageType;\n  typeId: number | string;\n  account: AccountEmbed;\n  message: SlackMessage;\n  sentTo: {\n    channel: string;\n    ts: string;\n  }[];\n}\n\nexport interface AutomergeLog extends MongoBaseModel {\n  account: AccountEmbed;\n  repoFullName: string;\n  pr: {\n    id: number;\n    number: number;\n    isRenovate: boolean;\n    mergeableState: string;\n  };\n  type:\n    | 'rebase-renovate'\n    | 'unknown mergeable_state'\n    | 'blocked mergeable_state'\n    | 'behind mergeable_state'\n    | 'not mergeable'\n    | 'failed status or checks'\n    | 'already merged';\n  action: 'remove' | 'reschedule' | 'wait' | 'update branch';\n}\n\nexport interface ReviewflowPr extends MongoBaseModel {\n  account: AccountEmbed;\n  repo: RepoEmbed;\n  pr: PrEmbed;\n  commentId: number;\n}\n\nexport interface MongoStores {\n  connection: MongoConnection;\n  userDmSettings: MongoStore<UserDmSettings>;\n  users: MongoStore<User>;\n  orgs: MongoStore<Org>;\n  orgMembers: MongoStore<OrgMember>;\n  orgTeams: MongoStore<OrgTeam>;\n  slackSentMessages: MongoStore<SlackSentMessage>;\n  automergeLogs: MongoStore<AutomergeLog>;\n  prs: MongoStore<ReviewflowPr>;\n  // prEvents: MongoStore<PrEventsModel>;\n}\n\nif (!process.env.MONGO_DB) {\n  throw new Error('MONGO_DB is missing in process.env');\n}\n\nexport default function init(): MongoStores {\n  const config = new Map([\n    ['host', process.env.MONGO_HOST || 'localhost'],\n    ['port', process.env.MONGO_PORT || '27017'],\n    ['database', process.env.MONGO_DB as string],\n  ]);\n  if (process.env.MONGO_USER) {\n    config.set('user', process.env.MONGO_USER);\n    config.set('password', process.env.MONGO_PASSWORD as string);\n  }\n  const connection = new MongoConnection(config);\n\n  // const prEvents = new MongoStore<PrEventsModel>(connection, 'prEvents');\n  // prEvents.collection.then((coll) => {\n  //   coll.createIndex({ owner: 1, repo: 1, ???: 1 });\n  // });\n\n  const userDmSettings = new MongoStore<UserDmSettings>(\n    connection,\n    'userDmSettings',\n  );\n  userDmSettings.collection.then((coll) => {\n    coll.createIndex({ userId: 1, orgId: 1 }, { unique: true });\n  });\n\n  const users = new MongoStore<User>(connection, 'users');\n  users.collection.then((coll) => {\n    coll.createIndex({ login: 1 }, { unique: true });\n  });\n\n  const orgs = new MongoStore<Org>(connection, 'orgs');\n  orgs.collection.then((coll) => {\n    coll.createIndex({ login: 1 }, { unique: true });\n  });\n\n  const orgMembers = new MongoStore<OrgMember>(connection, 'orgMembers');\n  orgMembers.collection.then((coll) => {\n    coll.createIndex({ 'user.id': 1, 'org.id': 1 }, { unique: true });\n    coll.createIndex(\n      { 'org.id': 1, 'user.id': 1, 'teams.id': 1 },\n      { unique: true },\n    );\n  });\n\n  const orgTeams = new MongoStore<OrgTeam>(connection, 'orgTeams');\n  orgTeams.collection.then((coll) => {\n    coll.createIndex({ 'org.id': 1 });\n  });\n\n  const slackSentMessages = new MongoStore<SlackSentMessage>(\n    connection,\n    'slackSentMessages',\n  );\n  slackSentMessages.collection.then((coll) => {\n    coll.createIndex({\n      'account.id': 1,\n      'account.type': 1,\n      type: 1,\n      typeId: 1,\n    });\n    // remove older than 14 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  const automergeLogs = new MongoStore<AutomergeLog>(\n    connection,\n    'automergeLogs',\n  );\n  automergeLogs.collection.then((coll) => {\n    coll.createIndex({\n      repoFullName: 1,\n      type: 1,\n    });\n    coll.createIndex({\n      repoFullName: 1,\n      'pr.number': 1,\n    });\n    // remove older than 30 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  const prs = new MongoStore<ReviewflowPr>(connection, 'prs');\n  prs.collection.then((coll) => {\n    coll.createIndex(\n      {\n        'account.id': 1,\n        'repo.id': 1,\n        'pr.number': 1,\n      },\n      { unique: true },\n    );\n    // remove older than 12 * 30 days\n    coll.deleteMany({\n      created: { $lt: new Date(Date.now() - 12 * 30 * 24 * 60 * 60 * 1000) },\n    });\n  });\n\n  // return { connection, prEvents };\n  return {\n    connection,\n    userDmSettings,\n    users,\n    orgs,\n    orgMembers,\n    orgTeams,\n    slackSentMessages,\n    automergeLogs,\n    prs,\n  };\n}\n","import { WebClient } from '@slack/web-api';\nimport type { MongoStores, Org, OrgMember } from '../mongo';\nimport type { Octokit } from '../octokit';\nimport { createLink } from './utils';\n\ninterface QueueItem {\n  github: Octokit;\n  slackClient: WebClient;\n  member: OrgMember;\n}\n\nexport const createSlackHomeWorker = (mongoStores: MongoStores) => {\n  const updateMember = async (\n    octokit: Octokit,\n    slackClient: WebClient,\n    member: OrgMember,\n  ): Promise<void> => {\n    if (!member.slack?.id) return;\n    // console.log('update member', member.org.login, member.user.login);\n\n    /* search limit: 30 requests per minute = 7 update/min max */\n    const [\n      prsWithRequestedReviews,\n      prsToMerge,\n      prsWithRequestedChanges,\n      prsInDraft,\n    ] = await Promise.all([\n      octokit.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open review-requested:${member.user.login} `,\n        sort: 'created',\n        order: 'desc',\n      }),\n      octokit.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} label:\":ok_hand: code/approved\"`,\n        sort: 'created',\n        order: 'desc',\n      }),\n      octokit.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} label:\":ok_hand: code/changes-requested\"`,\n        sort: 'created',\n        order: 'desc',\n      }),\n      octokit.search.issuesAndPullRequests({\n        q: `is:pr user:${member.org.login} is:open assignee:${member.user.login} draft:true`,\n        sort: 'created',\n        order: 'desc',\n        per_page: 5,\n      }),\n    ]);\n\n    const blocks: any[] = [];\n\n    const buildBlocks = (title: string, results: any) => {\n      if (!results.total_count) return;\n\n      blocks.push(\n        {\n          type: 'section',\n          text: {\n            type: 'mrkdwn',\n            text: `*${title}*`,\n          },\n        },\n        {\n          type: 'divider',\n        },\n        ...results.items\n          .map((pr: any) => {\n            const repoName = pr.repository_url.slice(\n              'https://api.github.com/repos/'.length,\n            );\n            const prFullName = `${repoName}#${pr.number}`;\n\n            return [\n              {\n                type: 'section',\n                text: {\n                  type: 'mrkdwn',\n                  text: `*${createLink(pr.html_url, pr.title)}*`,\n                  //  ${pr.labels.map((l) => `{${l.name}}`).join(' · ')}\n                },\n              },\n              {\n                type: 'context',\n                elements: [\n                  {\n                    type: 'mrkdwn',\n                    text: `${createLink(pr.html_url, prFullName)} ${\n                      pr.draft ? '· _Draft_' : ''\n                    }`,\n                  },\n                  {\n                    type: 'image',\n                    image_url: pr.user.avatar_url,\n                    alt_text: pr.user.login,\n                  },\n                  {\n                    type: 'mrkdwn',\n                    text: `${pr.user.login}`,\n                  },\n                ],\n              },\n            ];\n          })\n          .flat(),\n        {\n          type: 'context',\n          elements: [\n            {\n              type: 'image',\n              image_url:\n                'https://api.slack.com/img/blocks/bkb_template_images/placeholder.png',\n              alt_text: 'placeholder',\n            },\n          ],\n        },\n      );\n    };\n\n    buildBlocks(':eyes: Requested Reviews', prsWithRequestedReviews.data);\n    buildBlocks(':white_check_mark: Ready to Merge', prsToMerge.data);\n    buildBlocks(':x: Changes Requested', prsWithRequestedChanges.data);\n    buildBlocks(':construction: Drafts', prsInDraft.data);\n\n    if (blocks.length === 0) {\n      blocks.push({\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: \":tada: It looks like you don't have any PR to review!\",\n        },\n      });\n    }\n\n    slackClient.views.publish({\n      user_id: member.slack.id,\n      view: {\n        type: 'home',\n        blocks,\n      },\n    });\n  };\n\n  let workerInterval: ReturnType<typeof setInterval> | undefined;\n  const queueKeys = new Set<string>();\n  const queue: QueueItem[] = [];\n\n  const stop = (): void => {\n    if (workerInterval !== undefined) {\n      clearInterval(workerInterval);\n      workerInterval = undefined;\n    }\n  };\n\n  const start = (): void => {\n    if (workerInterval !== undefined) return;\n    workerInterval = setInterval(() => {\n      const item = queue.shift();\n      if (!item) {\n        stop();\n        return;\n      }\n\n      const { github, slackClient, member } = item;\n      const memberId = member.slack?.id;\n\n      const key = `${member.org.id}_${memberId}`;\n      queueKeys.delete(key);\n\n      updateMember(github, slackClient, member);\n    }, 9000); // 7/min 60s 1min = 1 ttes les 8.5s max\n  };\n\n  const scheduleUpdateMember = (\n    github: Octokit,\n    slackClient: WebClient,\n    member: OrgMember,\n  ): void => {\n    const memberId = member.slack?.id;\n    if (!memberId) return;\n\n    const key = `${member.org.id}_${memberId}`;\n\n    if (!queueKeys.has(key)) {\n      queueKeys.add(key);\n      queue.push({\n        github,\n        slackClient,\n        member,\n      });\n      start();\n    }\n  };\n\n  const scheduleUpdateOrg = async (\n    github: Octokit,\n    org: Org,\n    slackClient = new WebClient(org.slackToken),\n  ): Promise<void> => {\n    const cursor = await mongoStores.orgMembers.cursor();\n    cursor.forEach((member) => {\n      scheduleUpdateMember(github, slackClient, member);\n    });\n  };\n\n  const scheduleUpdateAllOrgs = async (\n    auth: (installationId: number) => Promise<Octokit>,\n  ): Promise<void> => {\n    const cursor = await mongoStores.orgs.cursor();\n    cursor.forEach(async (org) => {\n      if (!org.slackToken || !org.installationId) return;\n      const github = await auth(org.installationId);\n      await scheduleUpdateOrg(github, org);\n    });\n  };\n\n  return {\n    scheduleUpdateMember,\n    scheduleUpdateOrg,\n    scheduleUpdateAllOrgs,\n  };\n};\n","/* eslint-disable @typescript-eslint/no-floating-promises */\nimport 'dotenv/config';\nimport { run } from 'probot';\nimport appRouter from './appRouter';\nimport type { AppContext } from './context/AppContext';\nimport initApp from './initApp';\nimport mongoInit from './mongo';\nimport { createSlackHomeWorker } from './slack/home';\n\nif (!process.env.REVIEWFLOW_NAME) process.env.REVIEWFLOW_NAME = 'reviewflow';\nconsole.log({ name: process.env.REVIEWFLOW_NAME });\n\n// const getConfig = require('probot-config')\n// const { MongoClient } = require('mongodb');\n\n// const connect = MongoClient.connect(process.env.MONGO_URL);\n// const db = connect.then(client => client.db(process.env.MONGO_DB));\n\n// let config = await getConfig(context, 'reviewflow.yml');\n\nrun((app, { getRouter }) => {\n  const mongoStores = mongoInit();\n  const slackHome = createSlackHomeWorker(mongoStores);\n  const appContext: AppContext = { mongoStores, slackHome };\n  appRouter(app, getRouter, appContext);\n  initApp(app, appContext);\n  slackHome.scheduleUpdateAllOrgs((id: number) => app.auth(id));\n});\n"],"names":["process","env","GITHUB_CLIENT_ID","Error","GITHUB_CLIENT_SECRET","oauth2","create","client","id","secret","auth","tokenHost","tokenPath","authorizePath","Layout","lang","title","REVIEWFLOW_NAME","children","React","padding","AUTH_SECRET_KEY","signPromisified","promisify","sign","verifyPromisified","verify","secure","SECURE_COOKIE","createRedirectUri","req","host","hostname","PORT","readAuthCookie","strategy","cookie","cookies","algorithm","audience","headers","getAuthInfoFromCookie","res","authInfo","clearCookie","undefined","createApi","accessToken","Octokit","getUser","redirect","api","router","get","redirectUri","githubAuth","authorizationCode","authorizeURL","redirect_uri","scope","query","error","send","error_description","code","result","getToken","renderToStaticMarkup","access_token","user","users","getAuthenticated","data","login","time","Date","now","token","expiresIn","httpOnly","home","orgs","listForAuthenticatedUser","display","flexGrow","map","org","config","autoAssignToCreator","trimTitle","requiresReviewRequest","prDefaultOptions","featureBranch","autoMergeWithSkipCi","autoMerge","deleteAfterMerge","parsePR","regExp","summary","groups","dev","christophehurpeau","tilap","waitForGroups","teams","labels","list","name","color","review","ci","inProgress","succeeded","failed","needsReview","requested","changesRequested","approved","ignoreRepoPattern","autoMergeRenovateWithSkipCi","bot","status","statusInfoFromMatch","match","issue","inBody","url","botUsers","JulienBreux","ORNIKAR_EMAIL_DOMAIN","TheR3aLp3nGuinJM","abarreir","damienorny","darame07","Pixy","machartier","camillebaronnet","HugoGarrido","CorentinAndre","Mxime","vlbr","mdcarter","ChibiBlasphem","PSniezak","GaelFerrand","aenario","design","jperriere","CoralineColasse","Lenamari","loicleser","carlbouville","ops","logins","backends","frontends","description","duplicate","documentation","rfc","bug","enhancement","question","wontfix","chrisconfig","accountConfigs","ornikar","reviewflow","defaultDmSettings","cache","Map","getDefaultDmSettings","accountConfig","defaultConfig","updateCache","userId","newSettings","orgCache","set","getUserDmSettings","mongoStores","orgId","orgDefaultDmSettings","userDmSettingsConfig","userDmSettings","findOne","settings","syncOrg","octokit","installationId","orgInStore","upsertOne","_id","orgEmbed","memberIds","paginate","iterator","listMembers","Promise","all","member","push","orgMembers","type","deleteMany","$not","$in","ExcludesFalsy","Boolean","ExcludesNullish","syncTeamMembers","team","listMembersInOrg","team_slug","slug","currentIterationMemberIds","filter","partialUpdateMany","memberId","$ne","$push","$pull","syncTeams","teamEmbeds","teamIds","orgTeams","syncTeamsAndTeamMembers","dmMessages","orgSettings","octokitApp","find","o","params","findByKey","installation","apps","getOrgInstallation","catch","err","width","Object","entries","key","__html","patch","bodyParser","json","body","collection","updateOne","$set","value","updated","$setOnInsert","created","upsert","repository","repos","per_page","repo","owner","length","permissions","admin","data2","getRepoInstallation","syncUser","github","userInfo","userSettings","u","getUserInstallation","username","appRouter","app","getRouter","use","cookieParser","getOrCreateAccount","accountInfo","getKeys","keys","emojiRegex","createEmojiRegex","getEmojiFromRepoDescription","startsWith","emoji","exec","voidTeamSlack","mention","postMessage","resolve","updateMessage","deleteMessage","addReaction","updateHome","initTeamSlack","slackHome","context","account","slackToken","githubLoginToSlackEmail","reduce","acc","groupName","assign","slackEmails","values","slackClient","WebClient","membersInDb","findAll","members","foundEmailMembers","forEach","email","m","slack","im","missingEmails","includes","memberEmailToMemberId","page","profile","has","conversations","open","channel","console","membersMap","getUserFromGithubLogin","githubLogin","endsWith","slice","category","githubId","message","log","debug","DRY_RUN","chat","text","blocks","attachments","secondaryBlocks","thread_ts","ts","ok","update","delete","reactions","add","timestamp","scheduleUpdateMember","initAccountContext","appContext","payload","slackPromise","githubLoginToGroup","githubLoginToTeams","teamName","getReviewerGroups","githubLogins","Set","lock","Lock","accountEmbed","accountType","callback","reject","logInfos","info","createReleaseCallback","release","getReviewerGroup","getTeamsForLogin","approveShouldWait","reviewerGroup","pullRequest","includesReviewerGroup","includesWaitForGroups","requested_reviewers","requestedReviewerGroups","request","some","group","accountContextsPromise","accountContexts","obtainAccountContext","existingAccountContext","existingPromise","promise","then","accountContext","handlerOrgChange","organization","createHandlerOrgChange","options","optionsRegexps","option","regexp","RegExp","optionsLabels","label","parseOptions","content","defaultOptions","parseCommitNotes","commitNotes","replace","trim","parseBody","hasLabelInPR","prLabels","l","hasFailedStatusOrChecks","pr","checks","listForRef","ref","head","sha","failedChecks","check_runs","check","conclusion","combinedStatus","getCombinedStatusForRef","state","failedStatuses","statuses","autoMergeIfPossible","repoContext","reviewflowPrContext","autoMergeLabel","removePrFromAutomergeQueue","number","isRenovatePr","createMergeLockPrFromPr","branch","addLog","action","repoFullName","full_name","automergeLogs","insertOne","isRenovate","mergeableState","mergeable_state","hasNeedsReview","hasRequestedReview","lockedPr","getMergeLockedPr","String","prId","prNumber","lockedPrNumber","pushAutomergeQueue","addMergeLockPr","mergeable","prResult","pulls","pull_number","merged","reschedule","renovateRebaseBody","issues","issue_number","base","merge","parsedBody","commentBody","mergeResult","merge_method","commit_title","commit_message","errorMessage","defaultCommentBody","toMarkdownOptions","join","toMarkdownInfos","infos","getReplacement","updateOptions","optionsToUpdate","internalUpdateBodyOptionsAndInfos","infosAndCommitNotesParagraph","createCommentBody","updateCommentOptions","updatedOptions","updateCommentBodyInfos","updateCommentBodyCommitsNotes","removeDeprecatedReviewflowInPrBody","prBody","createReviewflowComment","pullRequestNumber","createComment","getReviewflowCommentById","commentId","getComment","comment_id","getReviewflowPrContext","reviewflowCommentPromise","prEmbed","comment","reviewflowPr","prs","repoEmbed","existing","partialUpdateByKey","fetchPr","getLabelsForRepo","listLabelsForRepo","initRepoLabels","finalLabels","labelKey","labelConfig","labelColor","existingLabel","createLabel","current_name","updateLabel","new_name","shouldIgnoreRepo","repoName","ignoreRepoRegexp","test","createGetReviewLabelIds","shouldIgnore","reviewGroupNames","initRepoContext","fullName","repoEmoji","getReviewLabelIds","needsReviewLabelIds","requestedReviewLabelIds","changesRequestedLabelIds","approvedReviewLabelIds","protectedLabelIds","labelIdToGroupName","reviewGroupLabels","lockMergePr","automergeQueue","lockPR","prOrPrIssueId","setTimeout","hasChangesRequestedReview","hasApprovesReview","getNeedsReviewGroupNames","reason","shift","previousLength","p","lockPullRequest","repoContextsPromise","repoContexts","obtainRepoContext","existingRepoContext","warn","createRepoHandler","createPullRequestHandler","getPullRequestInPayload","callbackPr","callbackBeforeLock","createPullRequestsHandler","getPrs","checkrunCompleted","on","check_run","pull_requests","updatedPr","checksuiteCompleted","check_suite","createLink","createPrLink","html_url","createOwnerPart","ownerMention","sendTo","isAssignedTo","assignees","a","createStatus","createCommitStatus","target_url","addStatusCheck","previousSha","hasPrCheck","head_sha","started_at","created_at","completed_at","toISOString","output","updateStatusCheckFromLabels","createFailedStatusCheck","rr","needsReviewGroupNames","updateReviewStatus","reviewGroup","labelsToAdd","remove","labelsToRemove","newLabelNames","toAdd","toAddNames","toDelete","toDeleteNames","getLabelFromKey","reviewConfig","prLabel","size","addLabels","toDeleteName","removeLabel","newLabelNamesArray","oldLabels","setLabels","getReviewersAndReviewStates","userIds","reviewers","reviewStatesByUser","listReviews","reviews","toUpperCase","reviewStates","dismissed","reviewer","getRolesFromPullRequestAndReviewers","assigneeIds","followers","requestedReviewers","isRequestedByName","requestedByTeams","requested_teams","f","closed","pull_request","isNotFork","git","deleteRef","requestedReviewer","assignee","senderMention","sender","prLink","slackUtils","createMessage","to","ownerPart","follower","createMrkdwnSectionBlock","createSlackMessageWithSecondaryBlock","secondaryBlockText","getPullRequestFromPayload","checkIfUserIsBot","checkIfIsThisBot","parse","issueParser","actions","issuePrefixes","parseMentions","mentions","slackifyCommentBody","multipleLines","slackifyMarkdown","getDiscussion","in_reply_to_id","listReviewComments","c","getMentions","discussion","getUsersInThread","prCommentCreated","saveInDb","results","filtered","slackSentMessages","typeId","sentTo","prUser","pull_request_review_id","commentByOwner","usersInThread","prUrl","commentLink","toOwner","promisesOwner","promisesNotOwner","slackifiedBody","start_line","isBotUser","slackMessage","updatePrCommentBody","newBody","updateComment","updatePrCommentBodyIfNeeded","updatePrCommentBodyOptions","syncLabel","shouldHaveLabel","prHasLabel","onRemove","onAdd","response","calcDefaultOptions","featureBranchLabel","automergeLabel","skipCiLabel","prHasFeatureBranchLabel","prHasSkipCiLabel","prHasAutoMergeLabel","syncLabelsAfterCommentBodyEdited","prCommentEditedOrDeleted","closed_at","criteria","sentMessages","sentMessage","readCommitsAndUpdateInfos","commits","listCommits","conventionalCommits","commit","breakingChangesCommits","index","breakingChangesNotes","notes","note","breakingChangesLabel","newCommentBody","cleanNewLines","checkIfHasDiff","text1","text2","updatePrIfNeeded","hasDiffInTitle","hasDiffInBody","diff","cleanTitle","s","arg1","arg2","toLowerCase","editOpenedPR","shouldUpdateCommentBodyInfos","isPrFromBot","errorRule","rule","date","hasLintPrCheck","promises","commentBodyInfos","shouldCreateCommentBody","edited","updatedPullRequest","updateBranch","isFromRenovate","labelsChanged","fromRenovate","codeApprovedLabel","codeNeedsReviewLabel","autoMergeSkipCiLabel","createReview","event","updateBranchLabel","autoApproveAndAutoMerge","autoAssignPRToCreator","addAssignees","opened","reopened","reviewDismissed","hasChangesRequestedInReviews","hasApprovals","hasRequestedReviewsForGroup","reviewRequestRemoved","requested_reviewer","hasApprovedInReviews","sentMessageRequestedReview","split","deleteOne","reviewRequested","getEmojiFromState","reviewSubmitted","reviewUrl","isReviewByOwner","filteredFollowers","newLabels","isSameBranch","branches","b","synchronize","before","repoEdited","initApp","openedHandler","editedHandler","closedHandler","reopenedHandler","reviewRequestedHandler","reviewRequestRemovedHandler","reviewSubmittedHandler","reviewDismissedHandler","synchronizeHandler","commentCreated","commentEditedOrDeleted","MONGO_DB","init","MONGO_HOST","MONGO_PORT","MONGO_USER","MONGO_PASSWORD","connection","MongoConnection","MongoStore","coll","createIndex","unique","$lt","createSlackHomeWorker","updateMember","prsWithRequestedReviews","prsToMerge","prsWithRequestedChanges","prsInDraft","search","issuesAndPullRequests","q","sort","order","buildBlocks","total_count","items","repository_url","prFullName","elements","draft","image_url","avatar_url","alt_text","flat","views","publish","user_id","view","workerInterval","queueKeys","queue","stop","clearInterval","start","setInterval","item","scheduleUpdateOrg","cursor","scheduleUpdateAllOrgs","run","mongoInit"],"mappings":"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"}